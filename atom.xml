<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;hello-world/&gt;</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justwe.site/"/>
  <updated>2018-08-14T11:49:38.745Z</updated>
  <id>http://blog.justwe.site/</id>
  
  <author>
    <name>GPF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Php开发过程中不常碰到的error (8.14更新)</title>
    <link href="http://blog.justwe.site/2018/08/26/php-unsual-mistakes/"/>
    <id>http://blog.justwe.site/2018/08/26/php-unsual-mistakes/</id>
    <published>2018-08-26T02:30:23.000Z</published>
    <updated>2018-08-14T11:49:38.745Z</updated>
    
    <content type="html"><![CDATA[<p>这里做一些备注,以防再次碰到<br><a id="more"></a></p><h3 id="url-当中的参数有-amp-timestamp-1234567890这样的字段会被转义成xtamp-1234567890"><a href="#url-当中的参数有-amp-timestamp-1234567890这样的字段会被转义成xtamp-1234567890" class="headerlink" title="url 当中的参数有 &amp;timestamp=1234567890这样的字段会被转义成xtamp=1234567890"></a>url 当中的参数有 <code>&amp;timestamp=1234567890</code>这样的字段会被转义成<code>xtamp=1234567890</code></h3><p>这个不仅存在于页面解析当中,当使用 curl 请求时拼接的参数有这种格式的也会发生转义<br>解决方法有两个:</p><ol><li>把 timestamp 这个参数放在 urlQuery 的最前面, <code>?timestamp=1234567890</code> 这样避免出现 <code>&amp;time</code>发生转义的情况</li><li>将<code>&amp;</code>用<code>&amp;amp;</code>来代替</li></ol><h3 id="Automatically-populating-HTTP-RAW-POST-DATA-is-deprecated-and-will-be-removed-in-a-future-version"><a href="#Automatically-populating-HTTP-RAW-POST-DATA-is-deprecated-and-will-be-removed-in-a-future-version" class="headerlink" title="Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version."></a>Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version.</h3><p>出现这句话通常说明你在用的 php 版本是5.6.而且在<code>php&lt;=5.6</code>的时候,进行 <code>application/json</code>格式的 post 提交会把数据放在<code>$HTTP_RAW_POST_DATA</code>这个系统变量里面,在<code>php&gt;=7</code>的时候这个变量被移除了,统统归总到<code>php://input</code>这里<br>解决方法:</p><ol><li><p>根据系统提示的走:</p><blockquote><p>Although that indeed would be technically impossible (as $HTTP_RAW_POST_DATA is populated in the bootstrapping phase of the PHP process) allow one to override the setting by means of calling ini_set.</p></blockquote><p> 要确保自己的系统中没有使用 <code>HTTP_RAW_POST_DATA</code>这个变量,直接在<code>php.ini</code>里面禁掉它的设置,但是容易出现系统中又打开的情况(在框架中很常见)</p></li><li>改一下自己的提交方式, 使用 <code>application/form-data</code>或者<code>application/x-www-form-urlencoded</code>这种格式的提交, 然后在后端接收数据的时候再转成自己需要的格式(通常是数组)<br> <a href="https://www.bram.us/2014/10/26/php-5-6-automatically-populating-http_raw_post_data-is-deprecated-and-will-be-removed-in-a-future-version/" target="_blank" rel="noopener">参考资料</a></li></ol><h3 id="Exception-‘yii-db-Exception’-with-message-‘SQLSTATE-HY000-2002-No-such-file-or-directory’"><a href="#Exception-‘yii-db-Exception’-with-message-‘SQLSTATE-HY000-2002-No-such-file-or-directory’" class="headerlink" title="Exception ‘yii\db\Exception’ with message ‘SQLSTATE[HY000] [2002] No such file or directory’"></a>Exception ‘yii\db\Exception’ with message ‘SQLSTATE[HY000] [2002] No such file or directory’</h3><p>这种情况出现在平时运行的好好的, 但是突然换 cli 模式后这个配置就出问题了,原因在当 <code>host=localhost</code>时走的是 unix:socket 链接, 当<code>host=127.0.0.1</code>走的是 tcp 链接,这在<code>php-fpm</code>和<code>php-cli</code>中有点区别,尤其是本地没有安装 mysql 的时候<br>解决方法有三种:</p><ol><li>将本地链接配置统一成 <code>127.0.0.1</code></li><li>查看 MySQL 中的<code>user</code>表, <code>host=localhost</code>和<code>host=127.0.0.1</code>是不是用的同一个账号密码</li><li>配置<code>php.ini</code>文件中的<code>pdo_mysql.default_socket=</code> 写上完整的 socket 路径<br>以上三种方法都可以试一下<br><a href="http://www.cnblogs.com/mengdeep/p/7487910.html" target="_blank" rel="noopener">参考资料</a></li></ol><h3 id="常驻内存时发生的事情"><a href="#常驻内存时发生的事情" class="headerlink" title="常驻内存时发生的事情"></a>常驻内存时发生的事情</h3><p>这个是 phper 很少碰到但是很常见的情况, 比如用 swoole 启动了一个常驻进程的服务, 那么就一定要小心使用静态变量,在同步模式下会发生变量污染, 还有就是 redis,mysql 这类的链接,你会发现长时间静置以后就会出现一些摸不着头脑的问题, 这种情况不妨想一下是不是 server 端回收了这个 socket,因此在 client 端怎么都写入不进去.  还有就是 php 在读取消息的时候,出现消息过长的情况,那么就要考虑EOF终止符的问题了… 单次 http 每一次请求都是全新的代码, 不用自己考虑 gc 的问题, 但是在常驻内存的时候,这些就是一个个的大坑了</p><h3 id="mysql-has-gone-away"><a href="#mysql-has-gone-away" class="headerlink" title="mysql has gone away"></a>mysql has gone away</h3><p>产生这个错误的主要原因是 mysql server 端断开了链接, client 端还拿着这个句柄去请求,解决方式有两种:</p><ol><li><p><code>show global variables like &#39;%timeout&#39;;</code> 查看 wait_timeout 的时长,适当的调长一点, 这种方法治标不治本,而且有隐患</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global wait_timeout=10;</span><br><span class="line">mysql&gt; show global variables like <span class="string">'wait_timeout'</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 mysql 之前需要 mysql_ping() 一下, 如果出现断开的错误就启动重连机制</p></li></ol><h3 id="js-和-php-交互传中文参数的编解码问题"><a href="#js-和-php-交互传中文参数的编解码问题" class="headerlink" title="js 和 php 交互传中文参数的编解码问题"></a>js 和 php 交互传中文参数的编解码问题</h3><p>之前碰到了问题是:<br>在 php 端 urlencode 的值为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderid%3D21111111110001954%26pid%3D257742%26reason%3D%E4%B8%AA%E4%BA%BA%E6%96%B9%E9%9D%A2%E5%8E%9F%E5%9B%A0_%E4%BD%BF%E7%94%A8%E7%BA%A2%E5%8C%85%E9%87%8D%E6%96%B0%E4%B8%8B%E5%8D%95%26token%3D041d9e5575f480b7bfd58b09bd14ab1c7ee9e9594f2fcdb9f0e3e39fc634b48f</span><br></pre></td></tr></table></figure></p><p>需要 urldecode 一次</p><p>而在 js 端的结果是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderid%3D21111111110002170%26pid%3D257742%26reason%3D%25E4%25B8%25AA%25E4%25BA%25BA%25E6%2596%25B9%25E9%259D%25A2%25E5%258E%259F%25E5%259B%25A0_%25E4%25B8%25AA%25E4%25BA%25BA%25E8%25BA%25AB%25E4%25BD%2593%25E5%258E%259F%25E5%259B%25A0%26token%3D041d9e5575f480b7bfd58b09bd14ab1c7ee9e9594f2fcdb9f0e3e39fc634b48f</span><br></pre></td></tr></table></figure></p><p>需要 urldecode 两次</p><p>查阅资料后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在后端是PHP程序的情况下，保持前端Javascript和PHP之间传值的统一编码可以使用以下函数进行处理：</span><br><span class="line"> </span><br><span class="line">WEB前端JavaScript</span><br><span class="line"> </span><br><span class="line">编码：escape(encodeURI(string))</span><br><span class="line"> </span><br><span class="line">解码：unescape(decodeURI(string))</span><br><span class="line"> </span><br><span class="line">WEB后端Php</span><br><span class="line"> </span><br><span class="line">编码：urlencode(string)</span><br><span class="line"> </span><br><span class="line">解码：urldecode(urldecode(string))</span><br></pre></td></tr></table></figure></p><p><a href="https://bbs.csdn.net/topics/330072196" target="_blank" rel="noopener">为什么要encodeURI(url)两次才不会出现乱码？</a></p><h3 id="PHP中rawurlencode和urlencode、JS中encodeURI与encodeURIComponent-的区别"><a href="#PHP中rawurlencode和urlencode、JS中encodeURI与encodeURIComponent-的区别" class="headerlink" title="PHP中rawurlencode和urlencode、JS中encodeURI与encodeURIComponent 的区别"></a>PHP中rawurlencode和urlencode、JS中encodeURI与encodeURIComponent 的区别</h3><p>rawurlencode遵守是94年国际标准备忘录RFC 1738</p><p>urlencode实现的是传统做法，和上者的主要区别是对空格的转义是’+’而不是’%20’<br>javascript的encodeURL也是94年标准，而javascript的escape是另一种用”%xxx”标记unicode编码的方法。<br>推荐在PHP中使用用rawurlencode。弃用urlencode</p><p>样例<br>source:<br>超级无敌的人sadha sajdh数据样本sdls fhejrthcxzb.file.jpeg </p><p>PHP urlencode:<br>%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha+sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls+fhejrthcxzb.file.jpeg </p><p>PHP rawurlencode:<br>%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha%20sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls%20fhejrthcxzb.file.jpeg</p><p>Javascript encodeURI|encodeURIComponent:<br>%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha%20sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls%20fhejrthcxzb.file.jpeg </p><p>Javascript escape:<br>%u8D85%u7EA7%u65E0%u654C%u7684%u4EBAsadha%20sajdh%u6570%u636E%u6837%u672Csdls%20fhejrthcxzb.file.jpeg</p><p><a href="https://blog.csdn.net/suofiya2008/article/details/6397168" target="_blank" rel="noopener">帖子原文</a></p><p>在前端还有个问题就是, js 的 <code>encodeURIComponent</code> 和 <code>encodeURI</code> 都不会转换 <code>_-.!~*&#39;()#</code> 这些保留字符, 而在后端的<code>rawurlencode</code> 则是会转换的, 因此需要前端单独把这几个给拎出来, 如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"*"</span>.charCodeAt(<span class="number">0</span>) <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">42</span>) <span class="comment">// *</span></span><br></pre></td></tr></table></figure></p><p>这里有张图说的很明白<br><img src="http://blog-image.onlyoneip.com/urlencode.jpeg" alt=""><br><a href="https://www.zhihu.com/question/21861899/answer/91279362" target="_blank" rel="noopener">图片来源</a></p><h3 id="关于出现-lt-U-200B-gt-这种-zero-width-space-字符"><a href="#关于出现-lt-U-200B-gt-这种-zero-width-space-字符" class="headerlink" title="关于出现 &lt;U+200B&gt; 这种 zero-width space 字符"></a>关于出现 &lt;U+200B&gt; 这种 zero-width space 字符</h3><p>如果出现 <code>mb_substr</code> 这类操作的时候, 会出现字数判断错误的问题, 这个有时候很难排查, 因为在 win 上,使用命令行或者 linux 上用<code>cat</code>命令是看不到字符间是有 &lt;U+200B&gt; 的, 如下:<br><img src="http://blog-image.onlyoneip.com/zero-width%20space.png" alt=""></p><p>这玩意儿出现的场景就是: 在前端输入框中输入几个字, 然后复制粘贴.  这样尽管看起来之间没有空格, 但是其中还是插入了这个字符<br>这玩意就叫 <a href="https://zh.wikipedia.org/wiki/%E9%9B%B6%E5%AE%BD%E7%A9%BA%E6%A0%BC" target="_blank" rel="noopener">zero-width space 零宽空格</a>, 处理的办法也很简单, 前端传值之前给过滤一下, 比如 <a href="https://stackoverflow.com/questions/7055600/u200b-zero-width-space-characters-in-my-js-code-where-did-they-come-from" target="_blank" rel="noopener">https://stackoverflow.com/questions/7055600/u200b-zero-width-space-characters-in-my-js-code-where-did-they-come-from</a> 或 <a href="https://codeday.me/bug/20171122/97765.html" target="_blank" rel="noopener">https://codeday.me/bug/20171122/97765.html</a></p><p>后端 php 处理的话和这个不一样, 使用 utf-8 的处理方式, 可以参考这篇文章 <a href="https://blog.csdn.net/qq_28018283/article/details/54136480" target="_blank" rel="noopener">特殊字符<200b><200c><200d>的删除办法与原理</200d></200c></200b></a></p><p>替换这种编码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$value = str_replace(<span class="string">"\xe2\x80\x8b"</span>, <span class="string">''</span>, $value);</span><br><span class="line">$value = str_replace(<span class="string">"\xe2\x80\x8c"</span>, <span class="string">''</span>, $value);</span><br><span class="line">$value = str_replace(<span class="string">"\xe2\x80\x8d"</span>, <span class="string">''</span>, $value);</span><br></pre></td></tr></table></figure></p><p>编码对照如下:<br><img src="http://blog-image.onlyoneip.com/zero-width-space-2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里做一些备注,以防再次碰到&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="debug" scheme="http://blog.justwe.site/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>通过 Docker-Compose 搭建一个 Elk</title>
    <link href="http://blog.justwe.site/2018/08/20/docker-elk/"/>
    <id>http://blog.justwe.site/2018/08/20/docker-elk/</id>
    <published>2018-08-20T06:57:47.000Z</published>
    <updated>2018-08-21T06:24:52.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>找了不少使用 docker-elk 搭建的博客, 英文的阅读吃力不说, 镜像源也是慢的让人头皮发麻, 因此重新编排了一个<code>docker-compose</code>,源都是从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> 上找的, 即使拉的国内镜像源应该也能很好的支持了吧?</p></blockquote><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Docker          <code>18.06.0-ce</code></li><li>docker-compose  <code>1.22.0</code><br>给每个容器最少分配 1G 的内存</li></ul><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><ul><li>logstash:         <code>5.*</code></li><li>elasticsearch:    <code>5.*</code></li><li>kibana:           <code>5.*</code></li></ul><h3 id="启动前的配置"><a href="#启动前的配置" class="headerlink" title="启动前的配置"></a>启动前的配置</h3><p>在各个目录下都有对应的 config 配置, 根据各自的情况自行处理</p><p>拿默认的 logstash/confg/test.conf 中的配置举例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">      file &#123;</span><br><span class="line">          <span class="comment">#这里的路径指的是 logstash 容器中的路径, 外部接入需要使用 volume 进行目录映射 </span></span><br><span class="line">            path =&gt; <span class="string">"/logs/input/*"</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在 logstash 容器中的输入</span></span><br><span class="line">      stdin &#123;&#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 因为做了本地5000端口和容器5000端口进行绑定, 所以可以用 nc 工具测试一下</span></span><br><span class="line">      <span class="comment"># echo "Test Logstash TCP Input Plugin" | nc localhost 5000</span></span><br><span class="line">      tcp &#123;</span><br><span class="line">            <span class="built_in">type</span> =&gt; <span class="string">"tcp"</span></span><br><span class="line">            port =&gt; 5000</span><br><span class="line">            mode =&gt; <span class="string">"server"</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">      file &#123;</span><br><span class="line">          <span class="comment">#这里的路径指的是 logstash 容器中的路径, 外部接入需要使用 volume 进行目录映射</span></span><br><span class="line">            path =&gt; <span class="string">"/logs/output/%&#123;+yyyy-MM-dd-HH&#125;/%&#123;host&#125;.log"</span></span><br><span class="line">      &#125;</span><br><span class="line">      stdout &#123;</span><br><span class="line">            codec =&gt; rubydebug</span><br><span class="line">      &#125;</span><br><span class="line">      elasticsearch &#123;</span><br><span class="line">    hosts =&gt; <span class="string">"elasticsearch:9200"</span></span><br><span class="line">        <span class="comment"># 这里设置的 index 在 kibana 中会用到</span></span><br><span class="line">            index =&gt; <span class="string">"file-log-%&#123;+YYYY.MM&#125;"</span>  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/gaopengfei123123/docker-elk.git &amp;&amp; cd docker-elk</span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure></p><p>等一会看到执行成功的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Creating docker-elk_elasticsearch_1 ... done</span><br><span class="line">Creating docker-elk_logstash_1      ... done</span><br><span class="line">Creating docker-elk_kibana_1        ... done</span><br></pre></td></tr></table></figure></p><p>在本地浏览器输入 <code>http://localhost:5601/</code> 进入 kibana 界面</p><p><strong>注意</strong>, 第一次启动时有可能会出现提示 <code>elasticsearch not found</code> 这类的问题, 可以先等个一两分钟刷新一下就好了, 如果还是不行就谷歌或者提 issue 解决一下</p><p>同目录下输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure></p><p>则停止所有服务</p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>在 <code>logs/input/</code> 目录下新增个 test.log 文件, 然后输入点东西验证一下, 或者命令行执行<code>echo &quot;Test Logstash TCP Input Plugin&quot; | nc localhost 5000</code> 通过 tcp 发送日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><p>查看各容器日志输出</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul><li>引入 kafka 做缓冲 </li><li>搭建 es 集群</li></ul><p><a href="https://github.com/gaopengfei123123/docker-elk" target="_blank" rel="noopener">github 地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;找了不少使用 docker-elk 搭建的博客, 英文的阅读吃力不说, 镜像源也是慢的让人头皮发麻, 因此重新编排了一个&lt;code&gt;docker-compose&lt;/code&gt;,源都是从 &lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/&lt;/a&gt; 上找的, 即使拉的国内镜像源应该也能很好的支持了吧?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
      <category term="elk" scheme="http://blog.justwe.site/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>搞定 Git 合并冲突</title>
    <link href="http://blog.justwe.site/2018/08/03/git-merge-conflict/"/>
    <id>http://blog.justwe.site/2018/08/03/git-merge-conflict/</id>
    <published>2018-08-03T10:40:25.000Z</published>
    <updated>2018-08-03T11:03:18.903Z</updated>
    
    <content type="html"><![CDATA[<p>这次说一下通过命令行去批量解决文件冲突的问题, 这个方法适用你清楚的知道自己需要保留哪一个分支, 而不是两个分支里的改动都要一点<br><a id="more"></a></p><h2 id="关键命令"><a href="#关键命令" class="headerlink" title="关键命令"></a>关键命令</h2><p>checkout 是个好方法, 能粗暴的解决很多问题</p><p>针对冲突文件保留自己的分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --ours path/to/conflict_file</span><br></pre></td></tr></table></figure></p><p>想保留别人的分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --theirs path/to/conflict_file</span><br></pre></td></tr></table></figure></p><p>批量的解决:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -lr <span class="string">'&lt;&lt;&lt;&lt;&lt;&lt;&lt;'</span> . | xargs git checkout --ours</span><br></pre></td></tr></table></figure><h2 id="一个鲜活的例子…"><a href="#一个鲜活的例子…" class="headerlink" title="一个鲜活的例子…"></a>一个鲜活的例子…</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">test</span> mkdir merge-demo</span><br><span class="line">➜  <span class="built_in">test</span> <span class="built_in">cd</span> merge-demo</span><br><span class="line">➜  merge-demo ls</span><br><span class="line">➜  merge-demo <span class="built_in">echo</span> <span class="string">'first commit'</span> &gt; index.txt</span><br><span class="line">➜  merge-demo cat index.txt</span><br><span class="line">first commit</span><br><span class="line">➜  merge-demo git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /Users/gpf/Documents/<span class="built_in">test</span>/merge-demo/.git/</span><br><span class="line">➜  merge-demo git:(master) ✗ git add -A</span><br><span class="line">➜  merge-demo git:(master) ✗ git commit -m <span class="string">'init'</span></span><br><span class="line">[master (root-commit) e9f17b3] init</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 index.txt</span><br><span class="line">➜  merge-demo git:(master) git checkout -b <span class="built_in">test</span></span><br><span class="line">Switched to a new branch <span class="string">'test'</span></span><br><span class="line">➜  merge-demo git:(<span class="built_in">test</span>) <span class="built_in">echo</span> <span class="string">'second commit by test'</span> &gt; index.txt</span><br><span class="line">➜  merge-demo git:(<span class="built_in">test</span>) ✗ git add -A &amp;&amp; git commit -m <span class="string">'second commit'</span></span><br><span class="line">[<span class="built_in">test</span> 4d20ff3] second commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">➜  merge-demo git:(<span class="built_in">test</span>) cat index.txt</span><br><span class="line">second commit by <span class="built_in">test</span></span><br><span class="line">➜  merge-demo git:(<span class="built_in">test</span>) git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">➜  merge-demo git:(master) <span class="built_in">echo</span> <span class="string">'third commit by master'</span> &gt; index.txt</span><br><span class="line">➜  merge-demo git:(master) ✗ git add -A &amp;&amp; git commit -m <span class="string">'third commit'</span></span><br><span class="line">[master 85e520e] third commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">➜  merge-demo git:(master) git merge <span class="built_in">test</span></span><br><span class="line">Auto-merging index.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> index.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line">➜  merge-demo git:(master) ✗ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</span><br><span class="line">  (use <span class="string">"git merge --abort"</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   index.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line">➜  merge-demo git:(master) ✗ cat index.txt</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">third commit by master</span><br><span class="line">=======</span><br><span class="line">second commit by <span class="built_in">test</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="built_in">test</span></span><br><span class="line">➜  merge-demo git:(master) ✗ git checkout --ours index.txt</span><br><span class="line">➜  merge-demo git:(master) ✗ cat index.txt</span><br><span class="line">third commit by master</span><br><span class="line">➜  merge-demo git:(master) ✗ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</span><br><span class="line">  (use <span class="string">"git merge --abort"</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   index.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line">➜  merge-demo git:(master) ✗ git add -A &amp;&amp; git commit -m <span class="string">'done'</span></span><br><span class="line">[master d2d2057] <span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次说一下通过命令行去批量解决文件冲突的问题, 这个方法适用你清楚的知道自己需要保留哪一个分支, 而不是两个分支里的改动都要一点&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="merge-conflict" scheme="http://blog.justwe.site/tags/merge-conflict/"/>
    
  </entry>
  
  <entry>
    <title>不正宗 Docker 入门教程-使用 Docker-Compose (3/3)</title>
    <link href="http://blog.justwe.site/2018/07/20/docker-step-3/"/>
    <id>http://blog.justwe.site/2018/07/20/docker-step-3/</id>
    <published>2018-07-20T03:11:07.000Z</published>
    <updated>2018-07-20T05:46:43.453Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章通过一个具体的demo来了解 docker-compose</p></blockquote><a id="more"></a><h4 id="docker-compose-是做什么的"><a href="#docker-compose-是做什么的" class="headerlink" title="docker-compose 是做什么的"></a>docker-compose 是做什么的</h4><p>在构建一个完整的服务时，我们通常启动一个容器， 一旦出现多个容器需要同时启动的时候手打是下下之策， 因为时间一长难免会忘记细节，写脚本也不是不可以，但是大家没有达成共识时脚本也很难维护…</p><p><code>docker-compose</code> 就是来解决这个痛点， 只需要按照统一的格式书写，那么大家生成的容器也都是一致的， 在团队开发的时候扔一个配置好的   <code>docker-compose</code> 能节省很多时间和口水</p><h4 id="配置-docker-compose"><a href="#配置-docker-compose" class="headerlink" title="配置 docker-compose"></a>配置 docker-compose</h4><p>这是我构建的一个开发环境的容器:<a href="https://github.com/gaopengfei123123/dnmp" target="_blank" rel="noopener">dnmp</a></p><p>首先下载下来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gaopengfei123123/dnmp.git &amp;&amp; <span class="built_in">cd</span> dnmp</span><br></pre></td></tr></table></figure></p><p>我们第一件事就是先瞄一眼 <code>.env</code> 文件， 这里设置了很多常量，一会根据个人需求来调整</p><p>第二步才是打开 <code>docker-compose.yml</code> 文件， 看后缀都能猜到这是一个配置文件， 另外 <code>docker-compose.yml</code> <strong>是根据缩进来进行分层的，注意书写格式</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="comment"># 语法版本( 3 和 2 区别有点大, 比如 3 取消了 volume_from 的相关语法)</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  frontend:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;NETWORKS_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  backend:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;NETWORKS_DRIVER&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  mysql_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  redis_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  rabbitmq_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br><span class="line"><span class="comment"># 服务编排</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># workspace:</span></span><br><span class="line">  <span class="comment">#   image: tianon/true</span></span><br><span class="line">  <span class="comment">#   container_name: dnmp-www</span></span><br><span class="line">  <span class="comment">#   volumes:</span></span><br><span class="line">  <span class="comment">#     - ./www:/usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NGINX #############################################</span></span><br><span class="line"><span class="attr">  nginx:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnmp-nginx</span></span><br><span class="line"><span class="attr">    build:</span> </span><br><span class="line"><span class="attr">      context:</span> <span class="string">./nginx</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">PHP_UPSTREAM_CONTAINER=$&#123;NGINX_PHP_UPSTREAM_CONTAINER&#125;</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">PHP_UPSTREAM_PORT=$&#123;NGINX_PHP_UPSTREAM_PORT&#125;</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">php-fpm</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"$&#123;NGINX_HOST_HTTP_PORT&#125;:80"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"$&#123;NGINX_HOST_HTTPS_PORT&#125;:443"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># 没必要把配置文件用卷来挂载, 不然就算配置更新了 nginx 也是要重启的</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 挂载运行代码目录</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;APP_CODE_PATH_HOST&#125;:/var/www</span></span><br><span class="line">      <span class="comment"># 挂载日志目录</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;NGINX_HOST_LOG_PATH&#125;:/var/log/nginx</span></span><br><span class="line">    <span class="comment"># 使用 networks 取代 links 在同一个网络模式下的服务是互通的</span></span><br><span class="line">    <span class="comment"># 在service 中使用其他的 service 就直接调用 service 名就行, 不用管 ip 地址, docker 会自己维护一套</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">frontend</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP-FPM #############################################</span></span><br><span class="line"><span class="attr">  php-fpm:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnmp-php-fpm</span></span><br><span class="line">    <span class="comment"># 这里的args 是属于 build 下面的,用于构建./php-fpm/Dockerfile 文件中 ARG 参数指定 php 版本</span></span><br><span class="line"><span class="attr">    build:</span> </span><br><span class="line"><span class="attr">      context:</span> <span class="string">./php-fpm</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">PHP_VERSION=$&#123;PHP_VERSION&#125;</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;APP_CODE_PATH_HOST&#125;:/var/www</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./php-fpm/php$&#123;PHP_VERSION&#125;.ini:/usr/local/etc/php/php.ini</span></span><br><span class="line"><span class="attr">    expose:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"9000"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">backend</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnmp-redis</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./redis</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">REDIS_SET_PASSWORD=$&#123;REDIS_SET_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;REDIS_HOST_PORT&#125;:6379</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># 这里卷挂载的是本地文件</span></span><br><span class="line">      <span class="comment"># - $&#123;DATA_PATH_HOST&#125;/redis:/data</span></span><br><span class="line">      <span class="comment"># 这里创建一个 redis_volume来存放数据</span></span><br><span class="line"><span class="attr">      - redis_volume:</span><span class="string">/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql #############################################</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnmp-mysql</span></span><br><span class="line">    <span class="comment"># 镜像来源: https://github.com/docker-library/mysql/blob/fc3e856313423dc2d6a8d74cfd6b678582090fc7/5.7/Dockerfile</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:$&#123;MYSQL_VERSION&#125;</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># - $&#123;DATA_PATH_HOST&#125;/mysql:/var/lib/mysql</span></span><br><span class="line"><span class="attr">      - mysql_volume:</span><span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="comment"># 容器只要停止就会重启</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">$&#123;MYSQL_DATABASE&#125;</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">$&#123;MYSQL_USER&#125;</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">$&#123;MYSQL_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;MYSQL_HOST_PORT&#125;:3306</span></span><br></pre></td></tr></table></figure><p>接下来看看它的关键词都起着什么作用：</p><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><p>这个规定了文件的版本， 既然有 3 就肯定不用 2 啊， 虽然两者没冲突，但是我喜欢， 2 和 3 版本之间有轻微的变动，具体区别你可以在写配置文件时产生的报错信息来体验一下</p><h5 id="network"><a href="#network" class="headerlink" title="network"></a>network</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  frontend:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;NETWORKS_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  backend:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;NETWORKS_DRIVER&#125;</span></span><br></pre></td></tr></table></figure><p><code>${NETWORKS_DRIVER}</code> 是从 <code>.env</code> 文件中取的值， 下面的同理</p><p>这一块就相当于执行 <code>docker network create -d bridge frontend &amp;&amp; docker network create -d bridge backend</code><br>在本地持久化的建立一个网络配置，稍后方便容器进行连接， 当然这里也不止是一个 <code>driver</code> 参数，具体配置情况还是参考<code>docker network inspect dnmp_frontend</code> 来看一下</p><p>没有设置名字的配置当需要名字的时候会 <code>{当前docker-compose.yml文件名}_{key}</code> 这种格式</p><p>有了 <code>network</code> 配置就极大的简化了老版的 <code>--links</code> 命令， 只要属于同一个 network 就能互相访问到， 而不是每新增一个服务就要把原来的服务都 link 一遍 </p><h5 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  mysql_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  redis_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br><span class="line"><span class="attr">  rabbitmq_volume:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">$&#123;VOLUMES_DRIVER&#125;</span></span><br></pre></td></tr></table></figure><p>和 <code>network</code> 部分一样， 持久化的创建几个 <code>volume</code>, 相当于命令 <code>docker network create mysql_volume</code>等等</p><p>这算是 v3 的一个新特性， 在 v2 的时候， 为了共享数据大家会创建一个什么镜像都不继承的image， 所有容器的 volume 都会和它连接， 现在有了 <code>volume</code> 就没必要这么搞了</p><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><p>这个是本章的重点， 我们来看下面的例子中的注释， 按序号来<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#1 创建一个服务叫做nginx服务</span></span><br><span class="line"><span class="attr">  nginx:</span></span><br><span class="line">    <span class="comment">#2 为了显得个性化一点，我们指定这个容器的名字叫做 dnmp-nginx</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">dnmp-nginx</span></span><br><span class="line">    <span class="comment">#3 标明这个服务的 Dockerfile 的地址，用相对路径方便项目迁移</span></span><br><span class="line"><span class="attr">    build:</span> </span><br><span class="line">      <span class="comment">#3.1 相当于命令： </span></span><br><span class="line">      <span class="comment"># docker build ./nginx -t dnmp-nginx \</span></span><br><span class="line">      <span class="comment">#     --build-arg PHP_UPSTREAM_CONTAINER=xxx \</span></span><br><span class="line">      <span class="comment">#     --build-arg PHP_UPSTREAM_PORT=zzz</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./nginx</span></span><br><span class="line">      <span class="comment">#3.2 这里 $&#123;NGINX_PHP_UPSTREAM_PORT&#125; 的值是从 .env 文件中取的， args 属于构建时传入的参数</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">PHP_UPSTREAM_CONTAINER=$&#123;NGINX_PHP_UPSTREAM_CONTAINER&#125;</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">PHP_UPSTREAM_PORT=$&#123;NGINX_PHP_UPSTREAM_PORT&#125;</span></span><br><span class="line">    <span class="comment">#4  在启动这个容器之前先启动 php-fpm 这个容器 </span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">php-fpm</span></span><br><span class="line">    <span class="comment">#5 将本地端口和容器端口绑定， 本地哪个端口就看 .env 里怎么写的</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"$&#123;NGINX_HOST_HTTP_PORT&#125;:80"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"$&#123;NGINX_HOST_HTTPS_PORT&#125;:443"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#6 设置需要挂载的卷, 这里时将本地目录和容器绑定， 也可以像 services.redis 那样和创建好的卷绑定 </span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># 没必要把配置文件用卷来挂载, 不然就算配置更新了 nginx 也是要重启的</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 挂载运行代码目录</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;APP_CODE_PATH_HOST&#125;:/var/www</span></span><br><span class="line">      <span class="comment"># 挂载日志目录</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;NGINX_HOST_LOG_PATH&#125;:/var/log/nginx</span></span><br><span class="line">    <span class="comment"># 使用 networks 取代 links 在同一个网络模式下的服务是互通的</span></span><br><span class="line">    <span class="comment"># 在service 中使用其他的 service 就直接调用 service 名就行, 不用管 ip 地址, docker 会自己维护一套</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#7 设置容器从属的网络， 同一个网络下可互相访问</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">frontend</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure></p><p>在上文的 <code>#3</code> 步骤看其他的service也有直接使用<code>image</code>的， 这是直接从远程获取镜像的方式</p><p>配置文件写完了， 我们看下nginx的构建文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in file ./nginx/Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1 选择继承的镜像</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.13</span>.<span class="number">1</span>-alpine</span><br><span class="line"><span class="comment">#2 各种标签</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"GPF &lt;5173180@qq.com&gt;"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#3 容器中执行命令， 且把本地的配置文件添加进去</span></span></span><br><span class="line"><span class="bash"><span class="comment">#https://yeasy.gitbooks.io/docker_practice/content/image/build.html</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /etc/nginx/cert \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /etc/nginx/conf.d \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /etc/nginx/sites</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./nginx.conf /etc/ngixn/nginx.conf</span></span><br><span class="line"><span class="bash">COPY ./conf.d/ /etc/nginx/conf.d/</span></span><br><span class="line"><span class="bash">COPY ./cert/ /etc/nginx/cert/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./sites /etc/nginx/sites/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#4 这里也是设置构建参数， 不过相同 key 值会被 docker-compose 中的给覆盖掉</span></span></span><br><span class="line"><span class="bash">ARG PHP_UPSTREAM_CONTAINER=php-fpm</span></span><br><span class="line"><span class="bash">ARG PHP_UPSTREAM_PORT=9000</span></span><br><span class="line"><span class="bash"><span class="comment">#5 $&#123;PHP_UPSTREAM_CONTAINER&#125; 就在构建时的参数使用方式</span></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"upstream php-upstream &#123; server <span class="variable">$&#123;PHP_UPSTREAM_CONTAINER&#125;</span>:<span class="variable">$&#123;PHP_UPSTREAM_PORT&#125;</span>; &#125;"</span> &gt; /etc/nginx/conf.d/upstream.conf</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#6 设置挂载的目录， 该目录下文件变化不会影响到容器</span></span></span><br><span class="line"><span class="bash">VOLUME [<span class="string">"/var/log/nginx"</span>, <span class="string">"/var/www"</span>]</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#7 设置目录运行时所处在容器中的目录地址</span></span></span><br><span class="line"><span class="bash">WORKDIR /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><p><code>#5</code> 就是显示了在 nginx 容器中怎么去访问 php-fpm 这个容器, 直接调用 service 名称就行</p><p>这里需要注意的时 <code>ARG</code> 和 <code>ENV</code> 的区别， 参考这篇文章： <a href="http://blog.justwe.site/2018/06/28/docker-arg-env/">Docker中 Arg 和 Env 的区别</a></p><h4 id="启动docker-compse"><a href="#启动docker-compse" class="headerlink" title="启动docker-compse"></a>启动docker-compse</h4><p>在配置好 <code>.env</code> 文件和 <code>docker-compose.yml</code> 配置文件后就可以启动它了， 命令也很简单，在同级目录下运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>它会自动创建<code>volume</code>，<code>network</code>，<code>services</code>， 而且相关的运行参数都是按着配置文件来的， 这样一来每个完整<code>docker-compose.yml</code>中的service就相当于时一个整体，每个服务又属于各自的容器，这样操控是不是节省了很多代码呢？</p><p>查看这些容器的运行状况也很是简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br><span class="line"><span class="comment"># 或者使用更方便的一个工具： ctop ， github地址： https://github.com/bcicen/ctop</span></span><br></pre></td></tr></table></figure><p>可操控单一容器一样， 但是它会把这一组容器都囊括了进去，操控起来只需要知道操控哪个服务，而一些参数就写在配置文件当中已经默认添加了</p><p>一些常用的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终止整个服务集合</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止指定的服务 （这有个点就是启动的时候会先启动 depond_on 中的容器，关闭的时候不会影响到 depond_on 中的）</span></span><br><span class="line">docker-compose stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的输出日志</span></span><br><span class="line">docker-compose logs -f [services...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像时不使用缓存（能避免很多因为缓存造成的问题）</span></span><br><span class="line">docker-compose build --no-cache --force-rm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除指定的容器</span></span><br><span class="line">docker-compose rm nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>本来熟悉命令的最好方式就是 用-&gt;犯错-&gt;排错-&gt;用 这种循环, 有什么不懂的 谷歌bing 都能查到, 直接 <code>docker-compose --help</code> 也能猜出命令的大概作用, 这里就不细说了 </p></blockquote><p>还有个很不错的 docker-compose 项目就是 <a href="http://laradock.io/" target="_blank" rel="noopener">laradock</a>, dnmp 就是仿照着它写的， 不过网络不好的情况下别运行 laradock， 它现在做的太臃肿了。。。。 看看它里面的镜像是怎么写的还是很有收获的</p><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ol><li><a href="http://blog.justwe.site/2018/07/06/docker-step-1/">不正宗 Docker 入门教程-启动一个容器(1/3)</a></li><li><a href="http://blog.justwe.site/2018/07/08/docker-step-2/">不正宗 Docker 入门教程-构建一个镜像(2/3)</a></li><li><a href="http://blog.justwe.site/2018/07/20/docker-step-3/">不正宗 Docker 入门教程-使用 Docker-Compose (3/3)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本章通过一个具体的demo来了解 docker-compose&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker入门" scheme="http://blog.justwe.site/tags/docker%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>不正宗 Docker 入门教程-构建一个镜像(2/3)</title>
    <link href="http://blog.justwe.site/2018/07/08/docker-step-2/"/>
    <id>http://blog.justwe.site/2018/07/08/docker-step-2/</id>
    <published>2018-07-08T14:54:58.000Z</published>
    <updated>2018-07-20T06:19:58.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章讲的大概能让你明白虚拟机和 docker 的区别…</p></blockquote><a id="more"></a><p>docker 设置了两种构建镜像的方式:</p><h3 id="通过-docker-commit-构建镜像-不推荐"><a href="#通过-docker-commit-构建镜像-不推荐" class="headerlink" title="通过 docker commit 构建镜像(不推荐)"></a>通过 docker commit 构建镜像(不推荐)</h3><p>这个命令是将先有的容器制作成镜像, 不过建议仅用在排查问题的时候使用, 平时生成容器时最好不要用这种镜像, 因为不知道里面有什么改动, 对于开发者来说完全是一个黑盒</p><p>命令格式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [参数] &lt;容器 ID 或 容器名&gt; [仓库名[:标签]] [flags]</span><br></pre></td></tr></table></figure></p><p>比如(我随便找了一个本地容器 ID):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker commit -m <span class="string">"这是一个测试镜像"</span> -a <span class="string">"GPF"</span> 5ad06ec670eb local_nginx:v1</span><br><span class="line">sha256:134e09cdce58842dea03202aa5b6516ead8268afe78d2203be8595b4f0bc5ebe</span><br><span class="line">➜  ~ docker images</span><br><span class="line">REPOSITORY              TAG                    IMAGE ID            CREATED             SIZE</span><br><span class="line">local_nginx             v1                     134e09cdce58        2 seconds ago       109MB</span><br></pre></td></tr></table></figure></p><p>这就把当前的容器转换成了镜像, 提交到远程就是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push local_nginx:v1</span><br></pre></td></tr></table></figure></p><p>和<code>git</code>很像对不对?   不过推送到远程时需要有个 <a href="https://hub.docker.com/_/php/" target="_blank" rel="noopener">dockerhub</a> 的账号</p><p><code>docker history</code> 命令可以查看镜像的构建记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker <span class="built_in">history</span> 134e09cdce58</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">134e09cdce58        12 seconds ago      nginx -g daemon off;                            0B                  这是一个测试镜像</span><br><span class="line">649dcb69b782        4 days ago          /bin/sh -c <span class="comment">#(nop)  CMD ["nginx" "-g" "daemon…   0B</span></span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c <span class="comment">#(nop)  STOPSIGNAL [SIGTERM]         0B</span></span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c <span class="comment">#(nop)  EXPOSE 80/tcp                0B</span></span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx…   22B</span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c <span class="built_in">set</span> -x  &amp;&amp; apt-get update  &amp;&amp; apt…   53.7MB</span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c <span class="comment">#(nop)  ENV NJS_VERSION=1.15.1.0.…   0B</span></span><br><span class="line">&lt;missing&gt;           4 days ago          /bin/sh -c <span class="comment">#(nop)  ENV NGINX_VERSION=1.15.1-…   0B</span></span><br><span class="line">&lt;missing&gt;           11 days ago         /bin/sh -c <span class="comment">#(nop)  LABEL maintainer=NGINX Do…   0B</span></span><br><span class="line">&lt;missing&gt;           11 days ago         /bin/sh -c <span class="comment">#(nop)  CMD ["bash"]                 0B</span></span><br><span class="line">&lt;missing&gt;           11 days ago         /bin/sh -c <span class="comment">#(nop) ADD file:28fbc9fd012eef727…   55.3MB</span></span><br></pre></td></tr></table></figure></p><h3 id="通过-Dockerfile-构建镜像"><a href="#通过-Dockerfile-构建镜像" class="headerlink" title="通过 Dockerfile 构建镜像"></a>通过 Dockerfile 构建镜像</h3><p>一个 Dockerfile 就是一个构建镜像的脚本, 常用的几个命令也不多, 也就<code>FROM</code>, <code>COPY</code>, <code>RUN</code>, <code>ADD</code>, <code>ARG</code>, <code>ENV</code>, <code>VOLUME</code>, <code>EXPOSE</code>, <code>CMD</code>, <code>LABEL</code>, 其他的一些命令就不再这里说了, 想了解完整的 Dockerfile 的关键词看这个 <a href="https://docs.docker.com/engine/reference/builder/#usage" target="_blank" rel="noopener">Dockerfile reference</a></p><h4 id="一个简单的-demo"><a href="#一个简单的-demo" class="headerlink" title="一个简单的 demo"></a>一个简单的 demo</h4><p>接下来我们就用一个完整的 Dockerfile 来示范一下:</p><p>首先创建一个Dockerfile<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dockerfile_demo &amp;&amp; <span class="built_in">cd</span> dockerfile_demo</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile 内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承的 ubuntu 镜像的版本号</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 将本地 workdir 的文件复制到镜像内部, 另外有个 ADD 指令和这个效果类似, 不过不推荐使用</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./sources.list /etc/apt/sources.list</span></span><br><span class="line"><span class="bash"><span class="comment"># 在镜像内部执行命令, 这里就是更新版本和安装 nginx</span></span></span><br><span class="line"><span class="bash">RUN apt-get update &amp;&amp; apt-get install -y nginx</span></span><br><span class="line"><span class="bash"><span class="comment"># 修改 nginx 默认的 index.html 的内容</span></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">'Hi, I am in your container'</span>\</span></span><br><span class="line"><span class="bash">    &gt;/var/www/html/index.html</span></span><br><span class="line"><span class="bash"><span class="comment"># 镜像对外暴露80端口</span></span></span><br><span class="line"><span class="bash">EXPOSE 80</span></span><br></pre></td></tr></table></figure><p>然后为了更新速度快一点, 就要换一个国内镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi sources.list</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sources.list 内容</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后还是在这个目录下, 运行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build ./ -t local_ubuntu_nginx:v2</span><br></pre></td></tr></table></figure></p><p>执行完毕后就能看到本地多了一个镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  Documents docker images</span><br><span class="line">REPOSITORY              TAG                    IMAGE ID            CREATED             SIZE</span><br><span class="line">local_ubuntu_nginx      v2                     b0f5984c042a        14 minutes ago      214MB</span><br></pre></td></tr></table></figure></p><p>用这个镜像构建一个容器:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  Documents docker run -it --rm -p 8088:80 local_ubuntu_nginx:v2 /bin/bash</span><br><span class="line">root@5cb9ff723bee:/<span class="comment"># /usr/sbin/nginx</span></span><br><span class="line">root@5cb9ff723bee:/<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>保持终端打开, 本地访问 <code>http://localhost:8088/</code> 就能看到欢迎界面了 </p><p>如果这个是关闭交互端口, 这个就访问不到了, 这里要说一个<strong>关键点</strong>了</p><blockquote><p>在 docker 中运行的程序不能使用后台运行的模式, 否则 docker 会任务这个容器不活跃或出现问题而自动关闭<br>但是 docker 容器本身是可以后台运行的: docker run -d ……</p></blockquote><h4 id="关于-docker-build-多说一句"><a href="#关于-docker-build-多说一句" class="headerlink" title="关于 docker build 多说一句"></a>关于 docker build 多说一句</h4><p>之前我们构建时执行的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build ./ -t local_ubuntu_nginx:v2</span><br></pre></td></tr></table></figure></p><p>这个 <code>./</code> 的路径指的是构建文本流(context)的路径, 而不是 <code>Dockerfile</code>的文件路径, 在 <code>Dockerfile</code> 中用的各种相对路径都是基于 <code>context</code> 的,我们完全可以是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build /path/to/context -f /path/to/anywhere/Dockerfile_demo -t local_ubuntu_nginx</span><br></pre></td></tr></table></figure></p><p>你看, Dockerfile 的文件名不就变成 <code>Dockerfile_demo</code> 了, 如果有<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./sources.list /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure></p><p>这样的操作, 那么它的完整路径应该是 <code>/path/to/context/sources.list</code>, 不过默认的情况下就是这两个路径是一起的, 不设置镜像<code>tag</code>的话就拿 Dockerfile 所在的目录名为镜像名,默认<code>latest</code>版本</p><h3 id="多阶段构建"><a href="#多阶段构建" class="headerlink" title="多阶段构建"></a>多阶段构建</h3><p>有时候我们的运行环境和编译环境是两回事, 就拿 golang 来举例, 我们只会去维护代码, 而不去管它生成的二进制包是什么, 又因为golang 打包出来的二进制文件几乎是没有依赖, 只要执行这个文件就行, 那么在运行环境中和编译相关的程序就是多余的, 可以看一下官网的示例 <a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noopener">Use multi-stage builds</a>, 不能翻墙的看这个</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.7</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/alexellis/href-counter/</span></span><br><span class="line"><span class="bash">RUN go get -d -v golang.org/x/net/html  </span></span><br><span class="line"><span class="bash">COPY app.go .</span></span><br><span class="line"><span class="bash">RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM alpine:latest  </span></span><br><span class="line"><span class="bash">RUN apk --no-cache add ca-certificates</span></span><br><span class="line"><span class="bash">WORKDIR /root/</span></span><br><span class="line"><span class="bash"><span class="comment"># 这个是关键, --from=0 是指从第一个镜像(from)中复制内容, 程序中的1 就是0</span></span></span><br><span class="line"><span class="bash">COPY --from=0 /go/src/github.com/alexellis/href-counter/app .</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t alexellis2/href-counter:latest .</span><br></pre></td></tr></table></figure><p>这是我自己构建镜像时编译 <code>swoole.so</code> 的镜像和运行时的镜像大小<br><img src="http://blog-image.onlyoneip.com/docker-images.png" alt="docker-images"><br>我们只想要一个 <code>swoole.so</code> 像 <code>gcc</code>, <code>make</code> 都是不是代码运行时需要的模块, 因此只是在编译的时候用上, 吐一个<code>swoole.so</code>出来就行, <a href="https://github.com/gayhuber/dnmp/tree/master/php-cli" target="_blank" rel="noopener">相关代码</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>.<span class="number">36</span>-cli-alpine3.<span class="number">7</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中国特色</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"http://mirrors.ustc.edu.cn/alpine/v3.7/main/"</span> &gt; /etc/apk/repositories</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 添加编译 swoole 需要的前置插件</span></span></span><br><span class="line"><span class="bash">RUN apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk upgrade &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add alpine-sdk linux-headers &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add autoconf gcc make</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN wget https://github.com/swoole/swoole-src/archive/1.8.12-stable.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    tar zxvf 1.8.12-stable.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> swoole-src-1.8.12-stable &amp;&amp; \</span></span><br><span class="line"><span class="bash">    phpize &amp;&amp; \</span></span><br><span class="line"><span class="bash">    ./configure &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make &amp;&amp; make install</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">FROM php:5.6.36-cli-alpine3.7 as runtimer</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 这里因为给每一个阶段加了别名, 这样更方便一点</span></span></span><br><span class="line"><span class="bash">COPY --from=builder /usr/<span class="built_in">local</span>/lib/php/extensions/no-debug-non-zts-20131226/swoole.so /usr/<span class="built_in">local</span>/lib/php/extensions/no-debug-non-zts-20131226/swoole.so</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./swoole.ini /usr/<span class="built_in">local</span>/etc/php/conf.d/swoole.ini</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 通常 run 是构建镜像时用的, 会保存一层缓存, cmd 就是镜像启动后执行的命令</span></span></span><br><span class="line"><span class="bash">RUN [<span class="string">"php"</span>, <span class="string">"-m"</span>]</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"php"</span>, <span class="string">"-a"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="构建镜像时需要注意的几点"><a href="#构建镜像时需要注意的几点" class="headerlink" title="构建镜像时需要注意的几点"></a>构建镜像时需要注意的几点</h3><ol><li>尽量使用官方镜像, 同时版本选择 <code>alpine &gt; debian &gt; ubuntu &gt; centos</code>, <code>alpine</code>版本的镜像是最小的</li><li>COPY 和 ADD 尽量使用 COPY, COPY 只是单纯的复制, ADD 则会自动执行一些东西, 有可能出现意料外的问题</li><li>CMD 和 ENTERPOINT 这两个可以查一下区别, 我个人习惯用 CMD</li><li>容器中的程序都要前台执行的模式, 使用 daemon 模式会被退出(你想想本身一个后台运行的容器中有个后台运行的程序…)</li><li>每一个 <code>RUN</code> 指令就是一层缓存, 当其中一个步骤发生更改那么这之后的步骤也都重新构建</li><li><p>系统更新最好合成一个 RUN 比如:</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk upgrade &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add alpine-sdk linux-headers &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add autoconf gcc make</span></span><br></pre></td></tr></table></figure><p> 同样还是为了避免因为缓存时出现问题</p></li><li>多看看官方构建的镜像, 收获会很多, 比如 <a href="https://github.com/nginxinc/docker-nginx/tree/e3e35236b2c77e02266955c875b74bdbceb79c44/stable" target="_blank" rel="noopener">docker-nginx</a>, <a href="https://github.com/docker-library/php/tree/4af0a8734a48ab84ee96de513aabc45418b63dc5" target="_blank" rel="noopener">docker-php</a></li></ol><h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><ol><li><a href="http://blog.justwe.site/2018/07/06/docker-step-1/">不正宗 Docker 入门教程-启动一个容器(1/3)</a></li><li><a href="http://blog.justwe.site/2018/07/08/docker-step-2/">不正宗 Docker 入门教程-构建一个镜像(2/3)</a></li><li><a href="http://blog.justwe.site/2018/07/20/docker-step-3/">不正宗 Docker 入门教程-使用 Docker-Compose (3/3)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本章讲的大概能让你明白虚拟机和 docker 的区别…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker入门" scheme="http://blog.justwe.site/tags/docker%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>不正宗 Docker 入门教程-启动一个容器(1/3)</title>
    <link href="http://blog.justwe.site/2018/07/06/docker-step-1/"/>
    <id>http://blog.justwe.site/2018/07/06/docker-step-1/</id>
    <published>2018-07-06T10:25:44.000Z</published>
    <updated>2018-07-20T05:41:23.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 从命名上就知道这是一篇简单粗暴的<code>docker</code>新手入门教程， 为什么要简单粗暴？ 我认为有自学能力的人帮他入门就够了， 不能自学的一时半会儿也教不会， 不符合入门教程的初衷， 建议出门左拐去找找视频教程…<br><a id="more"></a></p></blockquote><h3 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标"></a>本章目标</h3><ol><li>大概了解 docker 是个什么玩意</li><li>知道常用的 docker 指令参数, 能启动一个容器(不然还想怎么样? 上天吗?)</li></ol><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>强烈推荐使用 <code>Docker for Mac</code> 或 <code>Docker for Windows</code>, 这两个工具已经将 <code>Kitematic</code> 和 <code>docker-compose</code> 集成好了， 至于这两个工具是做什么的咱们后面再说， <code>win10</code> 版本需要专业版的， 不然开启不了<code>Hyper-V</code>， <code>win7</code> 就别想了，不支持…</p><p>怎么安装在 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云镜像容器服务</a> 里面都说的很清楚了， 连<strong>国内镜像源</strong>都给你安排好了， 咱们就进入下一话题</p><blockquote><p>PS: 如果是 CentOS 6 的就需要升级一下系统内核了， <a href="http://blog.justwe.site/2018/07/06/docker-install-centos65/">centOS6.5 安装docker</a>， 毕竟都 <code>8102</code> 年了， docker 又是个比较新的东西， 对于稍微久一点的系统的支持就不那么友好</p></blockquote><h3 id="运行第一个容器"><a href="#运行第一个容器" class="headerlink" title="运行第一个容器"></a>运行第一个容器</h3><p>安装完环境之后就启动一个镜像开开眼儿<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name local_nginx nginx</span><br></pre></td></tr></table></figure></p><p>然后访问 <code>http://localhost:8080/</code> 就能看到 <code>nginx</code> 的初始界面了<br><img src="http://blog-image.onlyoneip.com/run-nginx.png" alt="run-image"></p><p>中间发生了什么呢？ </p><ol><li><code>docker run</code> 运行镜像的起手式， 详情查看 <code>docker run --help</code></li><li><code>-d</code> 启动 <code>docker</code> 守护进程</li><li><code>-p 8080:80</code> 将本地的 <code>8080</code> 端口绑定到容器的 <code>80</code> 端口上</li><li><code>--name local_nginx</code> 分配一个容器名， 不写的话会默认分配要给， 不过这个还是很有用的</li><li><code>nginx</code> 指定运行的镜像名，如果没有指定标签则默认是 <code>latest</code>， 这里其实是启动<code>nginx:latest</code>镜像</li></ol><p>现在可以查看一下本机都在运行着什么镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS D:\docker_study&gt; docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">6732fa239270        nginx              <span class="string">"nginx -g 'daemon of…"</span>   18 minutes ago      Up 18 minutes       0.0.0.0:8080-&gt;80/tcp   local_nginx</span><br></pre></td></tr></table></figure></p><p><code>docker ps</code> 只能看到正在运行中的容器， 想看到全部的就是 <code>docker ps -a</code></p><p><strong>进入这个容器的命令:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 6732fa239270 /bin/bash</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">docker <span class="built_in">exec</span> -it local_nginx /bin/bash</span><br></pre></td></tr></table></figure></p><p>解释一下:</p><ol><li><code>docker exec</code>    在容器中执行命令</li><li><code>-i</code>             保持stdin打开</li><li><code>-t</code>             分配一个伪终端(tty)</li><li><code>6732fa239270 或 local_nginx</code>    这里你也发现了， 可以是通过 <code>CONTAINER ID</code> 也可以是 <code>NAMES</code> 这里的 <code>CONTAINER ID</code>分为128位长ID和32位短ID， 不过作用都是一样的</li><li><code>/bin/bash</code>      运行容器中的 <code>/bin/bash</code> 脚本</li></ol><p>进入容器中感觉其实和进入一个虚拟机一样， 但是容器和虚拟机有点区别， 这个我们下一小节会讲到</p><p><strong>关闭容器</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 6732fa239270 或 local_nginx</span><br></pre></td></tr></table></figure></p><h3 id="什么是容器？什么是镜像？"><a href="#什么是容器？什么是镜像？" class="headerlink" title="什么是容器？什么是镜像？"></a>什么是容器？什么是镜像？</h3><p><img src="http://blog-image.onlyoneip.com/image-container.jpg" alt="image-container"></p><p>之前我们使用 <code>VirtualBox</code> 装虚拟机的时候有装盘镜像, 但是启动后就是一个个的虚拟机了, 不过在 docker 中和虚拟机还是有点区别</p><p>就拿上图来说, <code>container</code>就是镜像的实例化, <code>image</code> 是容器的底层支撑, 其实他们的关系用代码中的类<code>Class</code>来比喻是最合适的:</p><ul><li>Class 就是我们实际开发中写的一个代码集合, Object 是 Class 实例化之后生成的一种资源变量</li><li>Image 也是预先写好的逻辑, 并存在一个地方, Container 是 Image 启动之后生成的一个虚拟系统</li><li>实例化出来的 Object 不会影响到 Class 中的内容</li><li>已经启动的 Container 也不会影响到 Image 中的逻辑</li><li>Class 可以继承别的 Class, 从而继承它的特性</li><li>Image 也是可以继承别的 Image, 并在它的基础上构建新的镜像</li><li>一个 Object 对应着一个 Class, 但是 一个 Class 可以实例化无数个 Object</li><li>同理, 一份 Image 可以生成无数个 Container, 这就是方便集群化部署的所在</li></ul><p>简单的说 Container 就是 Image 的儿子, 模样和 Image 预想的一样, 但是 Container 运行之后会发生一些改变, 而且这种改变是可以保存的</p><p>7-11补充: 这位大佬讲的 image 和 虚拟机 之前的很清晰 -&gt; <a href="https://mp.weixin.qq.com/s/sACsDZNjPa2vSidWUMB14g" target="_blank" rel="noopener">宋宝华：Docker 最初的2小时(Docker从入门到入门)</a>, 不过推荐是先敲几个实际的例子运行一下再看, 工具先跑起来再去了解它嘛!</p><h3 id="常用的运行参数和命令"><a href="#常用的运行参数和命令" class="headerlink" title="常用的运行参数和命令"></a>常用的运行参数和命令</h3><p>咱们先不说构建镜像的事儿(那是下一章的话题), 这里先了解一下 <code>docker run</code> 命令中比较常用的参数:</p><h4 id="it-建立一个可在终端交互的容器"><a href="#it-建立一个可在终端交互的容器" class="headerlink" title="-it  建立一个可在终端交互的容器"></a><code>-it</code>  建立一个可在终端交互的容器</h4><p>比如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name local_nginx nginx:latest /bin/bash</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker <span class="built_in">exec</span> -it local_nginx bin/bash</span><br></pre></td></tr></table></figure></p><h4 id="p-用于宿主机和容器的端口绑定"><a href="#p-用于宿主机和容器的端口绑定" class="headerlink" title="-p    用于宿主机和容器的端口绑定"></a><code>-p</code>    用于宿主机和容器的端口绑定</h4><p>绑定多个端口就设置多个映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:80 -p 4433:443 nginx:latest</span><br><span class="line"><span class="comment"># 或    不写本地端口, docker 将帮你自动分配</span></span><br><span class="line">docker run -d -p :80 -p :443 nginx:latest</span><br><span class="line"><span class="comment"># 或    加上 ip 就绑本地指定的 ip</span></span><br><span class="line">docker run -d -p 127.0.0.1:8088:80 -p :443 nginx:latest</span><br><span class="line"><span class="comment"># 或    照样不写本地端口就随机分配</span></span><br><span class="line">docker run -d -p 127.0.0.1::80 -p :443 nginx:latest</span><br></pre></td></tr></table></figure></p><p>通过 <code>docker ps</code> 可以看一下上面两行命令的执行状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">test</span> docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                           NAMES</span><br><span class="line">57f65b46bd87        nginx:latest        <span class="string">"nginx -g 'daemon of…"</span>   1 second ago         Up 3 seconds        0.0.0.0:32769-&gt;80/tcp, 0.0.0.0:32768-&gt;443/tcp   happy_zhukovsky</span><br><span class="line">0c035ebabe44        nginx:latest        <span class="string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   0.0.0.0:8088-&gt;80/tcp, 0.0.0.0:4433-&gt;443/tcp     ecstatic_haibt</span><br></pre></td></tr></table></figure></p><h4 id="v-将宿主机的卷挂载到容器中的指定目录"><a href="#v-将宿主机的卷挂载到容器中的指定目录" class="headerlink" title="-v 将宿主机的卷挂载到容器中的指定目录"></a><code>-v</code> 将宿主机的卷挂载到容器中的指定目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:80 -v /Users/gpf/Documents/docker_study/docker_test/www/:/usr/share/nginx/html/ nginx:latest</span><br></pre></td></tr></table></figure><p>这里本地的目录要写绝对路径, 不然会报错, 这样一来, 本地的<code>/Users/gpf/Documents/docker_study/docker_test/www/</code> 就是容器中的<code>/usr/share/nginx/html/</code>, 就可以本地更改代码, 然后容器中运行</p><h4 id="d-后台运行"><a href="#d-后台运行" class="headerlink" title="-d 后台运行"></a><code>-d</code> 后台运行</h4><p>想查看日志的话就 <code>docker logs [containerID]</code> 就行</p><h4 id="docker-exec-执行-docker-容器中的命令"><a href="#docker-exec-执行-docker-容器中的命令" class="headerlink" title="docker exec 执行 docker 容器中的命令"></a><code>docker exec</code> 执行 docker 容器中的命令</h4><p>通常就是用来进入容器中搞七搞八的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 57f65b46bd87 /bin/bash</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker exsec -it local_nginx /bin/bash</span><br></pre></td></tr></table></figure></p><p>这里注意两点:</p><ul><li><code>containerID</code> 在很多情况下都可以用 <code>container Name</code> 来代替, 很多情况是等价的</li><li>命令最后的 <code>/bin/bash</code> 不是必须这么填, 而是执行的容器中的脚本, 如果你的镜像是 <code>alpine</code>版的就是 <code>sh</code>, 因为这个版本中就没有 bash 这个命令</li></ul><h4 id="docker-ps-容器的运行状态"><a href="#docker-ps-容器的运行状态" class="headerlink" title="docker ps 容器的运行状态"></a><code>docker ps</code> 容器的运行状态</h4><h4 id="docker-stop-containerID-或-name-停止容器"><a href="#docker-stop-containerID-或-name-停止容器" class="headerlink" title="docker stop [containerID 或 name] 停止容器"></a><code>docker stop [containerID 或 name]</code> 停止容器</h4><p>目前版本也增加了 <code>docker container stop [containerID 或 name]</code> 其实作用是一样的, 不过 <code>docker container</code> 命令底下还有很多别的命令, docker 给各模块的命令做了细分</p><h4 id="docker-rm-containerID-或-name-删除指定未运行的容器-一个或多个"><a href="#docker-rm-containerID-或-name-删除指定未运行的容器-一个或多个" class="headerlink" title="docker rm [containerID 或 name] 删除指定未运行的容器, 一个或多个"></a><code>docker rm [containerID 或 name]</code> 删除指定未运行的容器, 一个或多个</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 6dee0a9b5232 582f708af9d3</span><br></pre></td></tr></table></figure><h4 id="docker-rmi-imageID-或-tag-删除宿主机指定的镜像"><a href="#docker-rmi-imageID-或-tag-删除宿主机指定的镜像" class="headerlink" title="docker rmi [imageID 或 tag] 删除宿主机指定的镜像"></a><code>docker rmi [imageID 或 tag]</code> 删除宿主机指定的镜像</h4><p>这里要注意如果这个镜像还有容器在使用就不能删除掉, 这个时候要先把对应的容器删掉才行<br>删除指定镜像的容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps | grep <span class="string">'这里写imageName'</span> | awk <span class="string">'&#123; print $1&#125;'</span>)</span><br><span class="line">docker rm $(docker ps | grep <span class="string">'这里写imageName'</span> | awk <span class="string">'&#123; print $1&#125;'</span>)</span><br></pre></td></tr></table></figure></p><p>删除临时构建的镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images | grep <span class="string">'&lt;none&gt;'</span> | awk <span class="string">'&#123; print $3&#125;'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="prune-大杀器"><a href="#prune-大杀器" class="headerlink" title="prune 大杀器"></a>prune 大杀器</h4><p>这一手还是慎用,一些情况下可造成 <code>rm -rf /*</code> 的效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#移除所有未使用的镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="comment">#移除所有未运行的容器</span></span><br><span class="line">docker container prune</span><br><span class="line"><span class="comment">#移除所有未使用的本地卷</span></span><br><span class="line">docker volume prune</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><blockquote><p>PS: 因为有这一手, 所以可以看出官方的态度, 他们貌似也许可能没准大概差不多不建议把容器当成虚拟机一样把所有的东西都堆在一个镜像里面, 那样搞不止构建出来的镜像臃肿, 而且维护性移植性很差, 从目前网上的 docker 镜像资源来说, 基础镜像 alpine &gt; debian &gt; ubuntu &gt; centos, 优先使用最小的基础构建, 然后整个 image 只为一个服务而构建, 比如 redis 镜像里只要 redis, 没有什么 MySQL, memcache 什么的, 多个独立的 service 才组成一个 APP, 里面各个组件替换的话不用考虑其他组件的环境依赖什么的, 当然, 这个也是看业务的实际需要, 不能为了拆分而拆分, 在这之间能找到最合适自己的才是工具给我们带来的便利</p></blockquote><h4 id="docker-network-容器之间的互联"><a href="#docker-network-容器之间的互联" class="headerlink" title="docker network 容器之间的互联"></a><code>docker network</code> 容器之间的互联</h4><p>如果只是在一个容器里搞来搞去就真的是虚拟机了, docker 的强大之处就是它内部维护一个网络, 处在相同网络的容器是可以互通的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个 docker 网络, -d bridge 是指定网络模式, 当前是桥接网络</span></span><br><span class="line">docker network create -d bridge nginx_swarm</span><br><span class="line"><span class="comment"># 启动两个 nginx 容器, 分别命名 nginx_swarm_a nginx_swarm_b , 两者都加入了 nginx_swarm 这个网络  --rm 是当容器停止后自动删除</span></span><br><span class="line">docker run -it --rm  --name nginx_swarm_a --network nginx_swarm  nginx /bin/bash</span><br><span class="line">docker run -it --rm  --name nginx_swarm_b --network nginx_swarm  nginx /bin/bash</span><br></pre></td></tr></table></figure></p><p>注意, 我们并没把接口暴露出去, 现在随便在一个容器中 <code>ping</code> 另一个容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是在 nginx_swarm_a 中</span></span><br><span class="line"><span class="comment"># 没有 ping 命令的先装一个 ping</span></span><br><span class="line"><span class="comment"># apt-get update &amp;&amp; apt-get install -y iputils-ping</span></span><br><span class="line">root@73d04107780f:/<span class="comment"># ping -c 3 nginx_swarm_b</span></span><br><span class="line">PING nginx_swarm_b (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from nginx_swarm_b.nginx_swarm (172.18.0.3): icmp_seq=1 ttl=64 time=0.084 ms</span><br><span class="line">64 bytes from nginx_swarm_b.nginx_swarm (172.18.0.3): icmp_seq=2 ttl=64 time=0.161 ms</span><br><span class="line">64 bytes from nginx_swarm_b.nginx_swarm (172.18.0.3): icmp_seq=3 ttl=64 time=0.146 ms</span><br><span class="line"></span><br><span class="line">--- nginx_swarm_b ping statistics ---</span><br></pre></td></tr></table></figure></p><p>docker 能自动的把 server name 转换成 ip, 我们只需要标明请求的是哪个容器, 而不是还要记住它的 ip 地址(当然 ip 地址也能设置)</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>弄明白以下几点启动一个容器应该是没什么问题了:</p><ol><li>国内一定要使用国内镜像源, 不然会痛不欲生, <a href="https://ieevee.com/tech/2016/09/28/docker-mirror.html#%E9%80%89%E6%8B%A9%E9%9B%B6%E7%BD%91%E6%98%93163-docker%E9%95%9C%E5%83%8F" target="_blank" rel="noopener">国内 docker 仓库镜像对比</a></li><li>分清镜像和容器的概念, 容器就是基于镜像构建出来的一个实例</li><li>不要往容器中保存数据, 容器应该是无状态的, 需要持久化保存的就<code>docker run -v xx:xx</code> 或者 <code>docker create volume ...</code> 用独立的卷来保存</li><li>docker 不是虚拟机</li><li>分清楚宿主机端口和容器端口</li><li>处在相同<code>network</code>下的容器才能通过容器明互相访问</li></ol><p>参考资料:<br><a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener">Docker — 从入门到实践</a><br><a href="https://hub.docker.com/_/nginx/" target="_blank" rel="noopener">nginx 官方镜像</a></p><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ol><li><a href="http://blog.justwe.site/2018/07/06/docker-step-1/">不正宗 Docker 入门教程-启动一个容器(1/3)</a></li><li><a href="http://blog.justwe.site/2018/07/08/docker-step-2/">不正宗 Docker 入门教程-构建一个镜像(2/3)</a></li><li><a href="http://blog.justwe.site/2018/07/20/docker-step-3/">不正宗 Docker 入门教程-使用 Docker-Compose (3/3)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 从命名上就知道这是一篇简单粗暴的&lt;code&gt;docker&lt;/code&gt;新手入门教程， 为什么要简单粗暴？ 我认为有自学能力的人帮他入门就够了， 不能自学的一时半会儿也教不会， 不符合入门教程的初衷， 建议出门左拐去找找视频教程…&lt;br&gt;
    
    </summary>
    
    
      <category term="docker入门" scheme="http://blog.justwe.site/tags/docker%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>在 centOS65 环境下安装 Docker</title>
    <link href="http://blog.justwe.site/2018/07/06/docker-install-centos65/"/>
    <id>http://blog.justwe.site/2018/07/06/docker-install-centos65/</id>
    <published>2018-07-06T02:36:50.000Z</published>
    <updated>2018-07-06T02:11:25.648Z</updated>
    
    <content type="html"><![CDATA[<p>早期的 docker 对稍微老点的系统支持都不是很友好, 也是因为操作系统的一些新特性才能让 docker 运行起来</p><p>在国内的云服务商提供的 CentOS65 镜像内核都是<code>2.6.*</code>的，不能满足docker需要的<code>3.1.*</code>，因此首先需要升级一下内核<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#导入public key</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br><span class="line">#安装elrepo到内核为2.6.32的CentOS中</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-6-6.el6.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line">#安装kernel-lt(long term support)长期支持版本</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-lt -y</span><br></pre></td></tr></table></figure></p><p>如果yum安装的慢，可以通过rpm安装<code>kernel-lt</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问http://elrepo.org/linux/kernel/el6/x86_64/RPMS/下载对应的rpm包，通过rpm方式安装：</span><br><span class="line">rpm -ivh kernel-lt-3.10.93-1.el6.elrepo.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>安装完毕后编辑配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/grub.conf</span><br><span class="line"></span><br><span class="line"># grub.conf generated by anaconda</span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE:  You do not have a /boot partition.  This means that</span><br><span class="line">#          all kernel and initrd paths are relative to /, eg.</span><br><span class="line">#          root (hd0,0)</span><br><span class="line">#          kernel /boot/vmlinuz-version ro root=/dev/xvda1</span><br><span class="line">#          initrd /boot/initrd-[generic-]version.img</span><br><span class="line">#boot=/dev/xvda</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/boot/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS (3.10.105-1.el6.elrepo.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /boot/vmlinuz-3.10.105-1.el6.elrepo.x86_64 ro root=UUID=94e4e384-0ace-437f-bc96-057dd64f42ee rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /boot/initramfs-3.10.105-1.el6.elrepo.x86_64.img</span><br><span class="line">title CentOS (2.6.32-573.22.1.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /boot/vmlinuz-2.6.32-573.22.1.el6.x86_64 ro root=UUID=94e4e384-0ace-437f-bc96-057dd64f42ee rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /boot/initramfs-2.6.32-573.22.1.el6.x86_64.img</span><br><span class="line">title CentOS (2.6.32-431.23.3.el6.x86_64)</span><br></pre></td></tr></table></figure></p><p>我们用的 <code>CentOS (3.10.105-1.el6.elrepo.x86_64)</code>就排在第一个，因此改成 <code>default=0</code></p><p>保存后重启系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line">Linux iZm5eib1msf1eaxvrvhp60Z 3.10.105-1.el6.elrepo.x86_64 #1 SMP Fri Feb 10 10:48:08 EST 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装<code>docker</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-engine</span><br><span class="line">service docker start</span><br><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p>如果出现 <code>Cannot connect to the Docker daemon. Is &#39;docker -d&#39; running on this host?</code> 这种提示，按以下解决步骤：</p><ol><li>执行 <code>service docker start</code></li><li>加上 <code>sudo</code></li><li>执行 <code>yum upgrade device-mapper</code></li></ol><p>我是执行到第三步就可以正常运行了，如果还没解决问题的话就自己找去吧</p><p><a href="https://www.xiaohuai.com/4164" target="_blank" rel="noopener">资料1-centos安装docker升级内核到3.10</a></p><p><a href="https://github.com/docker/docker/issues/11356" target="_blank" rel="noopener">资料2-github/docker/issues/11356</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早期的 docker 对稍微老点的系统支持都不是很友好, 也是因为操作系统的一些新特性才能让 docker 运行起来&lt;/p&gt;
&lt;p&gt;在国内的云服务商提供的 CentOS65 镜像内核都是&lt;code&gt;2.6.*&lt;/code&gt;的，不能满足docker需要的&lt;code&gt;3.1.*&lt;/code&gt;，因此首先需要升级一下内核&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
      <category term="centos6" scheme="http://blog.justwe.site/tags/centos6/"/>
    
  </entry>
  
  <entry>
    <title>Docker中 Arg 和 Env 的区别</title>
    <link href="http://blog.justwe.site/2018/06/28/docker-arg-env/"/>
    <id>http://blog.justwe.site/2018/06/28/docker-arg-env/</id>
    <published>2018-06-28T09:55:59.000Z</published>
    <updated>2018-06-28T10:20:49.672Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 <code>docker-compoe</code> 构建镜像的时候会感觉 <code>ARG</code> 和 <code>ENV</code> 的作用很相似, 但是这两个存在就肯定有它的原因</p><a id="more"></a><h3 id="它们起作用的时机"><a href="#它们起作用的时机" class="headerlink" title="它们起作用的时机"></a>它们起作用的时机</h3><ul><li>arg 是在 build 的时候存在的, 可以在 Dockerfile 中当做变量来使用</li><li>env 是容器构建好之后的环境变量, 不能在 Dockerfile 中当参数使用</li></ul><p>从这里可以看出来 <code>ARG</code> 就是专门为构建镜像而生的</p><h3 id="拿一个具体的例子"><a href="#拿一个具体的例子" class="headerlink" title="拿一个具体的例子"></a>拿一个具体的例子</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> redis:<span class="number">3.2</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"GPF &lt;5173180@qq.com&gt;"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG REDIS_SET_PASSWORD=developer</span></span><br><span class="line"><span class="bash">ENV REDIS_PASSWORD <span class="variable">$&#123;REDIS_SET_PASSWORD&#125;</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">VOLUME /data</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 6379</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"exec redis-server --requirepass \"<span class="variable">$REDIS_PASSWORD</span>\""</span>]</span></span><br></pre></td></tr></table></figure><p>这是一个构建 redis 的文件, 中间有这么一句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG REDIS_SET_PASSWORD=developer</span><br><span class="line">ENV REDIS_PASSWORD <span class="variable">$&#123;REDIS_SET_PASSWORD&#125;</span></span><br></pre></td></tr></table></figure></p><p>它是为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"exec redis-server --requirepass \"<span class="variable">$REDIS_PASSWORD</span>\""</span>]</span><br></pre></td></tr></table></figure></p><p>这一句服务的, 这句就是在启动 redis 的时候设置密码, 因为当执行 <code>CMD</code> 的时候,说明容器已经构建成功运行了起来,此时 <code>CMD</code>是在容器中执行容器中的命令, 因此 <code>CMD</code> 中的变量是用的环境变量而不是在 <code>Dockerfile</code> 中的变量,因此需要把 <code>ARG</code> 中的值在构建的时候赋值给 <code>ENV</code></p><h3 id="另一个使用-ARG-的例子"><a href="#另一个使用-ARG-的例子" class="headerlink" title="另一个使用 ARG 的例子"></a>另一个使用 ARG 的例子</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.13</span>.<span class="number">1</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"GPF &lt;5173180@qq.com&gt;"</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#https://yeasy.gitbooks.io/docker_practice/content/image/build.html</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /etc/nginx/cert \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /etc/nginx/conf.d \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /etc/nginx/sites</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./nginx.conf /etc/ngixn/nginx.conf</span></span><br><span class="line"><span class="bash">COPY ./conf.d/ /etc/nginx/conf.d/</span></span><br><span class="line"><span class="bash">COPY ./cert/ /etc/nginx/cert/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY ./sites /etc/nginx/sites/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ARG PHP_UPSTREAM_CONTAINER=php-fpm</span></span><br><span class="line"><span class="bash">ARG PHP_UPSTREAM_PORT=9000</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"upstream php-upstream &#123; server <span class="variable">$&#123;PHP_UPSTREAM_CONTAINER&#125;</span>:<span class="variable">$&#123;PHP_UPSTREAM_PORT&#125;</span>; &#125;"</span> &gt; /etc/nginx/conf.d/upstream.conf</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">VOLUME [<span class="string">"/var/log/nginx"</span>, <span class="string">"/var/www"</span>]</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><p>这里就只是用了<code>ARG</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ARG PHP_UPSTREAM_CONTAINER=php-fpm</span><br><span class="line">ARG PHP_UPSTREAM_PORT=9000</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">"upstream php-upstream &#123; server <span class="variable">$&#123;PHP_UPSTREAM_CONTAINER&#125;</span>:<span class="variable">$&#123;PHP_UPSTREAM_PORT&#125;</span>; &#125;"</span> &gt; /etc/nginx/conf.d/upstream.conf</span><br></pre></td></tr></table></figure></p><p>这里的变量用的就是 <code>ARG</code> 而不是 <code>ENV</code>了,因为这条命令运行在 <code>Dockerfile</code> 当中的, 像这种临时使用一下的变量没必要存环境变量的值就很适合使用 <code>ARG</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 &lt;code&gt;docker-compoe&lt;/code&gt; 构建镜像的时候会感觉 &lt;code&gt;ARG&lt;/code&gt; 和 &lt;code&gt;ENV&lt;/code&gt; 的作用很相似, 但是这两个存在就肯定有它的原因&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker-composer" scheme="http://blog.justwe.site/tags/docker-composer/"/>
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Git调整 Ssh 登录参数</title>
    <link href="http://blog.justwe.site/2018/06/23/git-sshcommand/"/>
    <id>http://blog.justwe.site/2018/06/23/git-sshcommand/</id>
    <published>2018-06-23T15:39:17.000Z</published>
    <updated>2018-06-23T15:44:09.323Z</updated>
    
    <content type="html"><![CDATA[<p>指定 ssh 命令使用时的签名文件<br><a id="more"></a><br>进入 app的.git/config 文件下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> Engine:</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = <span class="literal">true</span></span><br><span class="line">        bare = <span class="literal">false</span></span><br><span class="line">        logallrefupdates = <span class="literal">true</span></span><br><span class="line">        ignorecase = <span class="literal">true</span></span><br><span class="line">        precomposeunicode = <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 添加一行这个就行</span></span><br><span class="line">        sshCommand = ssh -i ~/.ssh/id_rsa_gayhuber</span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">        url = git@github.com:gayhuber/php-fpm.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/master</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;指定 ssh 命令使用时的签名文件&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>自定义 Gii 模板</title>
    <link href="http://blog.justwe.site/2018/05/23/yii-gii/"/>
    <id>http://blog.justwe.site/2018/05/23/yii-gii/</id>
    <published>2018-05-23T06:15:12.000Z</published>
    <updated>2018-05-23T06:17:24.442Z</updated>
    
    <content type="html"><![CDATA[<p>开发是需要用到 gii,但是 gii 并不是完全符合自己的开发需求,所以需要对他做一点改造</p><a id="more"></a><p>这里先拿 <code>basic</code> 版举例, <code>advance</code>版同理</p><h3 id="1-修改配置文件-web-php"><a href="#1-修改配置文件-web-php" class="headerlink" title="1.修改配置文件 web.php"></a>1.修改配置文件 web.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file path: @app/config/web.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'debug'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'debug'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\debug\Module'</span>,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\Module'</span>,</span><br><span class="line">        <span class="comment">// 这里把原来的 model generator 给覆盖成自己的</span></span><br><span class="line">        <span class="string">'generators'</span> =&gt; [</span><br><span class="line">            <span class="string">'model'</span> =&gt; [</span><br><span class="line">                <span class="comment">// 自定义的模板生成器</span></span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\common\gii\model\Generator'</span>,</span><br><span class="line">                <span class="comment">//设置我们自己的模板</span></span><br><span class="line">                <span class="string">'templates'</span> =&gt; [</span><br><span class="line">                    <span class="comment">//模板名 =&gt; 模板路径</span></span><br><span class="line">                    <span class="string">'default'</span> =&gt;  <span class="string">'@app/common/gii/model/default'</span>,</span><br><span class="line">                    <span class="string">'original'</span> =&gt; <span class="string">'@app/common/gii/model/original_tpl'</span>,</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在配置中指定了两种model 生成模板了</p><h3 id="2-设置自定义的-Geneartor-和-template"><a href="#2-设置自定义的-Geneartor-和-template" class="headerlink" title="2.设置自定义的 Geneartor 和 template"></a>2.设置自定义的 Geneartor 和 template</h3><p>现在进<code>@app/vendor/yiisoft/yii2-gii/src/generators/model</code>把这个目录拷贝到 <code>@app/common/gii/</code>这里,位置随意, 只要保证 config 中能找到这个路径就行,现在我们就在 <code>@app/common/gii/model</code>这里操作</p><p> 因为 Generator 继承的 \yii\gii\Generator, 需要实现两个方法, 一个是 getName() 另一个是 generate(), 我们主要修改的就是 generate(),<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// file path: @app/common/gii/model/Generator</span><br><span class="line">namespace app\common\gii\model;</span><br><span class="line"></span><br><span class="line">use Yii;</span><br><span class="line">use yii\db\ActiveQuery;</span><br><span class="line">use yii\db\ActiveRecord;</span><br><span class="line">use yii\db\Connection;</span><br><span class="line">use yii\db\Schema;</span><br><span class="line">use yii\db\TableSchema;</span><br><span class="line">use yii\gii\CodeFile;</span><br><span class="line">use yii\helpers\Inflector;</span><br><span class="line">use yii\base\NotSupportedException;</span><br><span class="line"></span><br><span class="line">class Generator extends \yii\gii\Generator&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    some code .....</span><br><span class="line">    */</span><br><span class="line">     /**</span><br><span class="line">     * &#123;@inheritdoc&#125;</span><br><span class="line">     */</span><br><span class="line">    public function generate()</span><br><span class="line">    &#123;</span><br><span class="line">        $files = [];</span><br><span class="line">        $relations = $this-&gt;generateRelations();</span><br><span class="line">        $db = $this-&gt;getDbConnection();</span><br><span class="line">        foreach ($this-&gt;getTableNames() as $index =&gt; $tableName) &#123;</span><br><span class="line">            // model :</span><br><span class="line">            $modelClassName = $this-&gt;generateClassName($tableName);</span><br><span class="line">            $queryClassName = ($this-&gt;generateQuery) ? $this-&gt;generateQueryClassName($modelClassName) : false;</span><br><span class="line">            $tableSchema = $db-&gt;getTableSchema($tableName);</span><br><span class="line">            $params = [</span><br><span class="line">                &apos;tableName&apos; =&gt; $tableName,</span><br><span class="line">                &apos;className&apos; =&gt; $modelClassName,</span><br><span class="line">                &apos;queryClassName&apos; =&gt; $queryClassName,</span><br><span class="line">                &apos;tableSchema&apos; =&gt; $tableSchema,</span><br><span class="line">                &apos;properties&apos; =&gt; $this-&gt;generateProperties($tableSchema),</span><br><span class="line">                &apos;labels&apos; =&gt; $this-&gt;generateLabels($tableSchema),</span><br><span class="line">                // 这是新增的</span><br><span class="line">                &apos;constMap&apos; =&gt; $this-&gt;generateConstMap($tableSchema),</span><br><span class="line">                &apos;rules&apos; =&gt; $this-&gt;generateRules($tableSchema),</span><br><span class="line">                &apos;relations&apos; =&gt; isset($relations[$tableName]) ? $relations[$tableName] : [],</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            // 同一个库中只生成一个 Model.php 之后的 model 都要继承这个 model</span><br><span class="line">            if ($index == 0) &#123;</span><br><span class="line">                $files[] = new CodeFile(</span><br><span class="line">                    Yii::getAlias(&apos;@&apos; . str_replace(&apos;\\&apos;, &apos;/&apos;, $this-&gt;ns)) . &apos;/Model.php&apos;,</span><br><span class="line">                    $this-&gt;render(&apos;cModel.php&apos;, $params)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $files[] = new CodeFile(</span><br><span class="line">                Yii::getAlias(&apos;@&apos; . str_replace(&apos;\\&apos;, &apos;/&apos;, $this-&gt;ns)) . &apos;/&apos; . $modelClassName . &apos;.php&apos;,</span><br><span class="line">                $this-&gt;render(&apos;model.php&apos;, $params)</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $files;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected function generateConstMap($table)&#123;</span><br><span class="line">        // some code</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     /**</span><br><span class="line">    some code .....</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>generate()</code> 这个方法里的 <code>$params</code> 这里就是给模板准备参数, <code>new CodeFile</code>这里就是生成指定的模板</p><p>现在我们在模板中搞一下</p><h3 id="3-设置-model-模板"><a href="#3-设置-model-模板" class="headerlink" title="3.设置 model 模板"></a>3.设置 model 模板</h3><p>在<code>@app/common/gii/model</code>目录下有一个<code>default</code>目录,就是默认的 template,咱们在<code>config.php</code>中设置了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'templates'</span> =&gt; [</span><br><span class="line">            <span class="comment">//模板名 =&gt; 模板路径</span></span><br><span class="line">            <span class="string">'default'</span> =&gt;  <span class="string">'@app/common/gii/model/default'</span>,</span><br><span class="line">            <span class="string">'original'</span> =&gt; <span class="string">'@app/common/gii/model/original_tpl'</span>,</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure></p><p>这两个, 把 <code>default/</code> 复制一份叫 <code>original_tpl/</code> 这在 gii 页面端选模板的时候能看到这写别名,如果是<code>console</code>模式的话只能使用<code>default</code>模板了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: @app/common/gii/default/model.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the template for generating the model class of a specified table.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $this yii\web\View */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $generator yii\gii\generators\model\Generator */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $tableName string full table name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $className string class name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $queryClassName string query class name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $tableSchema yii\db\TableSchema */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $properties array list of properties (property =&gt; [type, name. comment]) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $labels string[] list of attribute labels (name =&gt; label) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $rules string[] list of validation rules */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $relations array list of relations (name =&gt; relation declaration) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $constMap string[] list of attribute labels (name =&gt; label) */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;?php\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &lt;?= $<span class="title">generator</span>-&gt;<span class="title">ns</span> ?&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the model class for table "&lt;?= $generator-&gt;generateTableName($tableName) ?&gt;".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">&lt;?php foreach ($properties as $property =&gt; $data): ?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">...底下一些乱七八糟的代码....</span></span><br></pre></td></tr></table></figure><p>这里就看着办吧,就是正常的渲染模板</p><p>因为在<code>generate()</code>中还设置了一个<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一个库中只生成一个 Model.php 之后的 model 都要继承这个 model</span></span><br><span class="line"><span class="keyword">if</span> ($index == <span class="number">0</span>) &#123;</span><br><span class="line">    $files[] = <span class="keyword">new</span> CodeFile(</span><br><span class="line">        Yii::getAlias(<span class="string">'@'</span> . str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, <span class="keyword">$this</span>-&gt;ns)) . <span class="string">'/Model.php'</span>,</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render(<span class="string">'cModel.php'</span>, $params)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新增了一个<code>cModel.php</code>,这个是我自己的业务需求, 同库的 model 全部继承这个 model, 这里只是设置了一下<code>getDb()</code>方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the template for generating the model class of a specified table.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $this yii\web\View */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $generator yii\gii\generators\model\Generator */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $tableName string full table name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $className string class name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $queryClassName string query class name */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $tableSchema yii\db\TableSchema */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $properties array list of properties (property =&gt; [type, name. comment]) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $labels string[] list of attribute labels (name =&gt; label) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $rules string[] list of validation rules */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $relations array list of relations (name =&gt; relation declaration) */</span></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> $constMap string[] list of attribute labels (name =&gt; label) */</span></span><br><span class="line"></span><br><span class="line">$date = date(<span class="string">'Y/m/d H:i'</span>);</span><br><span class="line">$date = explode(<span class="string">' '</span>, $date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$model = <span class="string">&lt;&lt;&lt;str</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * Created by Gii. </span></span><br><span class="line"><span class="string"> * TemplatePath: @app\common\gii\model\default\cModel.php</span></span><br><span class="line"><span class="string"> * Date: <span class="subst">&#123;$date[0]&#125;</span></span></span><br><span class="line"><span class="string"> * Time: <span class="subst">&#123;$date[1]&#125;</span></span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">namespace <span class="subst">&#123;$generator-&gt;ns&#125;</span>;</span></span><br><span class="line"><span class="string">use yii\db\ActiveRecord;</span></span><br><span class="line"><span class="string">use Yii;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 同文件夹下都要继承一下这个 model,目前是用来改库的链接地址</span></span><br><span class="line"><span class="string"> * Class Model</span></span><br><span class="line"><span class="string"> * @package app\modules\v1\models\passport</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class Model extends ActiveRecord</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 重写表所对应的数据库链接信息 (如果函数不存在则默认为 db 的配置)</span></span><br><span class="line"><span class="string">     * @return \yii\db\Connection</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public static function getDb()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        return Yii::\$app-&gt;get('<span class="subst">&#123;$generator-&gt;db&#125;</span>');</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">str;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $model;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样依赖 gii 的模板自定义就算是完事了</p><h3 id="4-console-模式下的-gii"><a href="#4-console-模式下的-gii" class="headerlink" title="4. console 模式下的 gii"></a>4. console 模式下的 gii</h3><p>照例首先需要设置<code>console.php</code>的配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path @app/console.php</span></span><br><span class="line"><span class="keyword">if</span> (YII_ENV_DEV) &#123;</span><br><span class="line">    <span class="comment">// configuration adjustments for 'dev' environment</span></span><br><span class="line">    $config[<span class="string">'bootstrap'</span>][] = <span class="string">'gii'</span>;</span><br><span class="line">    $config[<span class="string">'modules'</span>][<span class="string">'gii'</span>] = [</span><br><span class="line">        <span class="string">'class'</span> =&gt; <span class="string">'app\common\gii\Module'</span>,</span><br><span class="line">        <span class="string">'generators'</span> =&gt; [</span><br><span class="line">            <span class="string">'model'</span> =&gt; [</span><br><span class="line">                <span class="comment">// 自定义的模板生成器</span></span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\common\gii\model\Generator'</span>,</span><br><span class="line">                <span class="comment">//设置我们自己的模板 console 默认就是 default 模板</span></span><br><span class="line">                <span class="string">'templates'</span> =&gt; []</span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>generators</code> 和 之前的配置一样,区别就是 module 下的 class 设置成自己的 Module</p><p>这里把<code>@app/vendor/yiisoft/yii2-gii/src/Module.php</code>复制一份到<code>@app/common/gii/Module.php</code> 改一下命名空间并且继承<code>\yii\gii\Module</code> 毕竟咱们是定制的, 这个代码不能在 vendor 中改,不然以后你再装新的 composer 包的时候会非常麻烦</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: @app/common/gii/Module.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">代码块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">($app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($app <span class="keyword">instanceof</span> \yii\web\Application) &#123;</span><br><span class="line">            $app-&gt;getUrlManager()-&gt;addRules([</span><br><span class="line">                [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\UrlRule'</span>, <span class="string">'pattern'</span> =&gt; <span class="keyword">$this</span>-&gt;id, <span class="string">'route'</span> =&gt; <span class="keyword">$this</span>-&gt;id . <span class="string">'/default/index'</span>],</span><br><span class="line">                [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\UrlRule'</span>, <span class="string">'pattern'</span> =&gt; <span class="keyword">$this</span>-&gt;id . <span class="string">'/&lt;id:\w+&gt;'</span>, <span class="string">'route'</span> =&gt; <span class="keyword">$this</span>-&gt;id . <span class="string">'/default/view'</span>],</span><br><span class="line">                [<span class="string">'class'</span> =&gt; <span class="string">'yii\web\UrlRule'</span>, <span class="string">'pattern'</span> =&gt; <span class="keyword">$this</span>-&gt;id . <span class="string">'/&lt;controller:[\w\-]+&gt;/&lt;action:[\w\-]+&gt;'</span>, <span class="string">'route'</span> =&gt; <span class="keyword">$this</span>-&gt;id . <span class="string">'/&lt;controller&gt;/&lt;action&gt;'</span>],</span><br><span class="line">            ], <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($app <span class="keyword">instanceof</span> \yii\console\Application) &#123;</span><br><span class="line">            $app-&gt;controllerMap[<span class="keyword">$this</span>-&gt;id] = [</span><br><span class="line">                <span class="comment">// 这里改成自己定制的 consoleController</span></span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'app\common\gii\console\GenerateController'</span>,</span><br><span class="line">                <span class="string">'generators'</span> =&gt; array_merge(<span class="keyword">$this</span>-&gt;coreGenerators(), <span class="keyword">$this</span>-&gt;generators),</span><br><span class="line">                <span class="string">'module'</span> =&gt; <span class="keyword">$this</span>,</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">代码块</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>只用把 console 的 GenerateController 指向咱们自定义的控制器, 复制目录<code>@app/vendor/yiisoft/yii2-gii/src/console/</code> 到 <code>@app/common/gii/console/</code>, 这时我们就能对 gii console 模式下的代码进行调整了</p><p>可能在<code>@app/common/gii/console/GenerateController.php</code>中的代码让你摸不到头脑, 这里是在 <code>actions()</code>来着注册 router, 具体的 action 实现则是在 class 中指定了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: @app/common/gii/console/GenerateController.php</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actions</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $actions = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;generators <span class="keyword">as</span> $name =&gt; $generator) &#123;</span><br><span class="line">            $actions[$name] = [</span><br><span class="line">                <span class="string">'class'</span> =&gt; <span class="string">'yii\gii\console\GenerateAction'</span>,</span><br><span class="line">                <span class="string">'generator'</span> =&gt; $generator,</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 依赖model generator 重新定义一个 gii 命令</span></span><br><span class="line">            <span class="keyword">if</span>($name == <span class="string">'model'</span>) &#123;</span><br><span class="line">                $actions[<span class="string">'all'</span>] = [</span><br><span class="line">                    <span class="string">'class'</span> =&gt; <span class="string">'app\common\gii\console\GenerateAllAction'</span>,</span><br><span class="line">                    <span class="string">'generator'</span> =&gt; $generator,</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $actions;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为所有的 Generator 都实现了 <code>getName()</code> 和 <code>generate()</code>这两个方法,action 也是只使用了这两个方法,可以自己翻下代码,这里就不详细讲了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发是需要用到 gii,但是 gii 并不是完全符合自己的开发需求,所以需要对他做一点改造&lt;/p&gt;
    
    </summary>
    
      <category term="Yii2" scheme="http://blog.justwe.site/categories/Yii2/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="gii" scheme="http://blog.justwe.site/tags/gii/"/>
    
      <category term="yii" scheme="http://blog.justwe.site/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>十进制与二进制,八进制,十六进制的换算</title>
    <link href="http://blog.justwe.site/2018/05/23/conversion-calculation/"/>
    <id>http://blog.justwe.site/2018/05/23/conversion-calculation/</id>
    <published>2018-05-23T02:58:29.000Z</published>
    <updated>2018-05-23T03:16:16.339Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下二进制,八进制,十六进制之间的互相转换和怎么用十进制去转换它们</p><a id="more"></a><p>首先做一个定义： B(Binary)表示二进制，O(Octal)表示八进制，D(Decimal)或不加表示十进制，H(Hexadecimal)表示十六进制，比如：(101011)B=(53)O=(43)D=(2B)H</p><h3 id="十进制转换成二进制"><a href="#十进制转换成二进制" class="headerlink" title="十进制转换成二进制"></a>十进制转换成二进制</h3><h4 id="除二取余法"><a href="#除二取余法" class="headerlink" title="除二取余法"></a>除二取余法</h4><p>二进制说白了就是 0 和 1 啊，在十进制的时候就是2的次方</p><p>以十进制的(43)D为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">43/2=21%1</span><br><span class="line">21/2=10%1</span><br><span class="line">10/2=5 %0</span><br><span class="line">5 /2=2 %1</span><br><span class="line">2 /2=1 %0</span><br><span class="line">1 /2=0 %1</span><br><span class="line">以上把余数倒着排就是二进制的结果了，即101011</span><br></pre></td></tr></table></figure></p><h4 id="阶段相减法（适合低次方的速算）"><a href="#阶段相减法（适合低次方的速算）" class="headerlink" title="阶段相减法（适合低次方的速算）"></a>阶段相减法（适合低次方的速算）</h4><p>每次都减去最大的值，还是拿(42)D举例：42-32-8-2-1=0， 对应以下的表格为：</p><table><thead><tr><th style="text-align:center">64</th><th style="text-align:center">32</th><th style="text-align:center">16</th><th style="text-align:center">8</th><th style="text-align:center">4</th><th style="text-align:center">2</th><th style="text-align:center">1</th></tr></thead><tbody><tr><td style="text-align:center">2^6</td><td style="text-align:center">2^5</td><td style="text-align:center">2^4</td><td style="text-align:center">2^3</td><td style="text-align:center">2^2</td><td style="text-align:center">2^1</td><td style="text-align:center">2^0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>结果就是： 101011</p><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h3><p>以 (101011)B 举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1*2^0 + 1*2^1 + 1*2^3 + 1*2^5 = 43</span><br></pre></td></tr></table></figure></p><h3 id="十进制转八进制和十六进制"><a href="#十进制转八进制和十六进制" class="headerlink" title="十进制转八进制和十六进制"></a>十进制转八进制和十六进制</h3><p>都是用的除8或16取余法，不做赘述了，有点区别就是16进制的9以后就是abcd…代替的<br>这等式就自己进行一下验算好了: (101011)B=(53)O=(43)D=(2B)H</p><h3 id="二进制转八进制、十六进制"><a href="#二进制转八进制、十六进制" class="headerlink" title="二进制转八进制、十六进制"></a>二进制转八进制、十六进制</h3><p>先复习一个等式: <code>2^0 * 2^1 * 2^2 = 2^3</code>， 那么二进制转八进制就是将二进制的数三个为一组合并一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101|011 =&gt; 53</span><br></pre></td></tr></table></figure></p><p>同理， 二进制转16进制就是按四个为一组合并一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0010|1011 =&gt; 2b</span><br></pre></td></tr></table></figure></p><h3 id="十六进制和八进制之间转换"><a href="#十六进制和八进制之间转换" class="headerlink" title="十六进制和八进制之间转换"></a>十六进制和八进制之间转换</h3><p>都是先转换成二进制，然后再转成想要的进制</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下二进制,八进制,十六进制之间的互相转换和怎么用十进制去转换它们&lt;/p&gt;
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
      <category term="binary" scheme="http://blog.justwe.site/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>基于Rabbitmq实现的延时队列(golang版)</title>
    <link href="http://blog.justwe.site/2018/05/14/go-rabbitmq-delay-queue/"/>
    <id>http://blog.justwe.site/2018/05/14/go-rabbitmq-delay-queue/</id>
    <published>2018-05-14T13:37:40.000Z</published>
    <updated>2018-05-14T14:48:03.471Z</updated>
    
    <content type="html"><![CDATA[<p>虽然 rabbitmq 没有延时队列的功能,但是稍微变动一下也是可以实现的</p><a id="more"></a><h2 id="实现延时队列的基本要素"><a href="#实现延时队列的基本要素" class="headerlink" title="实现延时队列的基本要素"></a>实现延时队列的基本要素</h2><ol><li>存在一个倒计时机制:Time To Live(TTL)</li><li>当到达时间点的时候会触发一个发送消息的事件:Dead Letter Exchanges（DLX）</li></ol><p>$<del>~</del>~$基于第一点,我利用的是消息存在过期时间这一特性, 消息一旦过期就会变成<code>dead letter</code>,可以让单独的消息过期,也可以设置整个队列消息的过期时间<br>而<code>rabbitmq</code>会有限取两个值的最小值</p><p>$<del>~</del>~$基于第二点,是用到了<code>rabbitmq</code>的过期消息处理机制:<br>. <code>x-dead-letter-exchange</code> 将过期的消息发送到指定的 <code>exchange</code> 中<br>. <code>x-dead-letter-routing-key</code> 将过期的消息发送到自定的 <code>route</code>当中</p><p>在这里例子当中,我使用的是 过期消息+转发指定exchange</p><h2 id="在-golang-中的实现"><a href="#在-golang-中的实现" class="headerlink" title="在 golang 中的实现"></a>在 golang 中的实现</h2><p>首先是消费者<code>comsumer.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 建立链接</span></span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个主要使用的 exchange</span></span><br><span class="line">err = ch.ExchangeDeclare(</span><br><span class="line"><span class="string">"logs"</span>,   <span class="comment">// name</span></span><br><span class="line"><span class="string">"fanout"</span>, <span class="comment">// type</span></span><br><span class="line"><span class="literal">true</span>,     <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// auto-deleted</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// internal</span></span><br><span class="line"><span class="literal">false</span>,    <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,      <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare an exchange"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个常规的队列, 其实这个也没必要声明,因为 exchange 会默认绑定一个队列</span></span><br><span class="line">q, err := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test_logs"</span>,    <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">true</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,   <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to declare a queue"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意,这里是重点!!!!!</span></span><br><span class="line"><span class="comment">     * 声明一个延时队列, ß我们的延时消息就是要发送到这里</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">_, errDelay := ch.QueueDeclare(</span><br><span class="line"><span class="string">"test_delay"</span>,    <span class="comment">// name</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// durable</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// delete when unused</span></span><br><span class="line"><span class="literal">true</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>, <span class="comment">// no-wait</span></span><br><span class="line">amqp.Table&#123;</span><br><span class="line"><span class="comment">// 当消息过期时把消息发送到 logs 这个 exchange</span></span><br><span class="line"><span class="string">"x-dead-letter-exchange"</span>:<span class="string">"logs"</span>,</span><br><span class="line">&#125;,   <span class="comment">// arguments</span></span><br><span class="line">)</span><br><span class="line">failOnError(errDelay, <span class="string">"Failed to declare a delay_queue"</span>)</span><br><span class="line"></span><br><span class="line">err = ch.QueueBind(</span><br><span class="line">q.Name, <span class="comment">// queue name, 这里指的是 test_logs</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// routing key</span></span><br><span class="line"><span class="string">"logs"</span>, <span class="comment">// exchange</span></span><br><span class="line"><span class="literal">false</span>,</span><br><span class="line"><span class="literal">nil</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to bind a queue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里监听的是 test_logs</span></span><br><span class="line">msgs, err := ch.Consume(</span><br><span class="line">q.Name, <span class="comment">// queue name, 这里指的是 test_logs</span></span><br><span class="line"><span class="string">""</span>,     <span class="comment">// consumer</span></span><br><span class="line"><span class="literal">true</span>,   <span class="comment">// auto-ack</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line"><span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">)</span><br><span class="line">failOnError(err, <span class="string">"Failed to register a consumer"</span>)</span><br><span class="line"></span><br><span class="line">forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">log.Printf(<span class="string">" [x] %s"</span>, d.Body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [*] Waiting for logs. To exit press CTRL+C"</span>)</span><br><span class="line">&lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是生产者<code>productor.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/streadway/amqp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"%s: %s"</span>, msg, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := amqp.Dial(<span class="string">"amqp://guest:guest@localhost:5672/"</span>)</span><br><span class="line">failOnError(err, <span class="string">"Failed to connect to RabbitMQ"</span>)</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">ch, err := conn.Channel()</span><br><span class="line">failOnError(err, <span class="string">"Failed to open a channel"</span>)</span><br><span class="line"><span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line">body := bodyFrom(os.Args)</span><br><span class="line"><span class="comment">// 将消息发送到延时队列上</span></span><br><span class="line">err = ch.Publish(</span><br><span class="line"><span class="string">""</span>, <span class="comment">// exchange 这里为空则不选择 exchange</span></span><br><span class="line"><span class="string">"test_delay"</span>,     <span class="comment">// routing key</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// mandatory</span></span><br><span class="line"><span class="literal">false</span>,  <span class="comment">// immediate</span></span><br><span class="line">amqp.Publishing&#123;</span><br><span class="line">ContentType: <span class="string">"text/plain"</span>,</span><br><span class="line">Body:        []<span class="keyword">byte</span>(body),</span><br><span class="line">Expiration: <span class="string">"5000"</span>,<span class="comment">// 设置五秒的过期时间</span></span><br><span class="line">&#125;)</span><br><span class="line">failOnError(err, <span class="string">"Failed to publish a message"</span>)</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">" [x] Sent %s"</span>, body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bodyFrom</span><span class="params">(args []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(args) &lt; <span class="number">2</span>) || os.Args[<span class="number">1</span>] == <span class="string">""</span> &#123;</span><br><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">s = strings.Join(args[<span class="number">1</span>:], <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run comsumer.go</span><br><span class="line">go run productor.go</span><br></pre></td></tr></table></figure></p><p>$<del>~</del>~$具体看代码和注释就行, 这里的关键点就是将要延时的消息发送到过期队列当中, 然后监听的是<strong>过期队列转发到的 exchange 下的队列</strong><br>正常情况就是始终监听一个队列,然后把过期消息发送到延时队列中,当消息到达时间后就把消息发到正在监听的队列</p><p><a href="https://github.com/gaopengfei123123/go_study/tree/master/src/mq_demo" target="_blank" rel="noopener">一个自己写的mq工具</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然 rabbitmq 没有延时队列的功能,但是稍微变动一下也是可以实现的&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="rabbitmq" scheme="http://blog.justwe.site/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>有关 Restful 借口规范踩到的坑</title>
    <link href="http://blog.justwe.site/2018/05/09/php-restful/"/>
    <id>http://blog.justwe.site/2018/05/09/php-restful/</id>
    <published>2018-05-09T02:47:39.000Z</published>
    <updated>2018-05-09T05:55:45.774Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>restful</code> 接口规范开发时我碰到的几个槽点…</p><a id="more"></a><p><code>restful</code>提供了一种接口规范,本意是让路由变得更加易懂,不过既然是规则那么就有束缚,想在项目中采用这个的同学们可以参考一下</p><h3 id="路由嵌套太要命"><a href="#路由嵌套太要命" class="headerlink" title="路由嵌套太要命"></a>路由嵌套太要命</h3><p>$<del>~</del>~$如果存在这种<code>city/3/zoo/2/animal/1</code>这样的查询路由你怎么说? 多层嵌套在我看来反而不如<code>?city=3&amp;zoo=2&amp;animal=1</code>这种 query 来的方便直接,尤其是在后台的开发中这种目录结构会让人痛不欲生,而且很多情况下我们进行列表展示的时候数据不是从一个表里取出来的,有时甚至需要跨业务或者调第三方的进行组合,这种情况下路由是不是要很长? <code>restful</code>路由里需要显示出要操控的资源,这资源种类一多url 就会变得长长长,反而不如像<code>select/animal-list</code>这样来的简单直接</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>$<del>~</del>~$这是由于上个问题引申出来的, 像<code>city/{cid}/zoo/{zid}/animal/{aid}</code>这种路由规则的权限怎么去维护? 而且 rbac 在国内的应用来说很是常见,我们目前的解决方案也是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$route = [</span><br><span class="line">    <span class="string">'select/animal'</span> =&gt; <span class="string">'city/&#123;cid&#125;/zoo/&#123;zid&#125;/animal/&#123;aid&#125;'</span>,</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这样给这类的路由出一个给机器看的路由,长期下来如果当前开发人员走了后续接手的程序员会很绝望</p><h3 id="路由规则让人头秃"><a href="#路由规则让人头秃" class="headerlink" title="路由规则让人头秃"></a>路由规则让人头秃</h3><p>$<del>~</del>~$<code>restful</code>的路由命名核心就是将<strong>动词转换成名词</strong>,这个就看你的词汇量能不能跟上业务了,最典型的就是用户登录注册,<code>user/login</code>和<code>user/register</code>这种明显不符合啊,如果用<code>session/{id}</code>这种路由又显得怪怪的</p><h3 id="如果出现文件类型接口的怎么办"><a href="#如果出现文件类型接口的怎么办" class="headerlink" title="如果出现文件类型接口的怎么办?"></a>如果出现文件类型接口的怎么办?</h3><p>$<del>~</del>~$举个例子就是如果我有导出 excel 或者生成二维码的需求,那么这个路由算是文档操作里面的还是业务资源底下的?这一类的操作大部分都是<code>查</code>的居多,<code>增删改</code>几乎没有,这种接口都是单独写路由规则的.<br>还有一点,我们这边采取的前后端分离通常都是 <code>application/json</code> 格式传输数据,当碰到文件上传的时候还是老老实实的用<code>multipart/form-data</code>,请求方式要单独写,php56的还会提示<code>$HTTP_RAW_POST_DATA</code>即将被<code>php://input</code>替换</p><h3 id="回归到参数提取的问题"><a href="#回归到参数提取的问题" class="headerlink" title="回归到参数提取的问题"></a>回归到参数提取的问题</h3><p>$<del>~</del>~$还是查找这一块,路由很受限,举个例子:我需要查当前某个动物园的动物种类,按名字首字母降序排序,那么我应该是<code>GET /zoo/3/animal?sort=-1&amp;slabel=name</code>, 需要组成这个路由首先要前端兄弟把指定的 id 给拼出来,然后其他的参数拼到后面,或者其他的参数放到<code>header</code>里面,那么后台兄弟就要先把路由中的参数给剔出来,然后再去某个地方把剩余的参数给拿到…累不累? 查询条件多的情况下是不是还和原来一样,而且还多了提取<code>url</code>中参数的操作?</p><h3 id="理论上在查询的时候是可以指定显示字段的"><a href="#理论上在查询的时候是可以指定显示字段的" class="headerlink" title="理论上在查询的时候是可以指定显示字段的"></a>理论上在查询的时候是可以指定显示字段的</h3><p>$<del>~</del>~$<code>GET /zoo?field=name,id,desc</code> 查询的路由把暴露字段的权利开放给了调用方,那么如果有人操作不规范或者直接就是是坏,每次请求我都取全量字段内容,那么我的带宽不要钱啊?mysql 的 I/O 也是压力啊</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>$<del>~</del>~$<code>restful</code>接口在猛一看很美好,但是需要结合自己实际业务是不是适配这套规则,不要强行为了<code>restful</code>而<code>restful</code>, 一些小而美的工具可以用这种规范,中大型的业务真的要慎重考虑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;restful&lt;/code&gt; 接口规范开发时我碰到的几个槽点…&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="restful" scheme="http://blog.justwe.site/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>Go 开发过程中一些不错的工具(不定期更新)</title>
    <link href="http://blog.justwe.site/2018/03/26/golang-awesome-tools/"/>
    <id>http://blog.justwe.site/2018/03/26/golang-awesome-tools/</id>
    <published>2018-03-26T12:20:00.000Z</published>
    <updated>2018-08-29T02:41:07.606Z</updated>
    
    <content type="html"><![CDATA[<p>就是平时用到的一些工具<br><a id="more"></a></p><h1 id="fswatch"><a href="#fswatch" class="headerlink" title="fswatch"></a>fswatch</h1><p>用于监听目录文件的修改,一旦发生修改将自动执行系统指令,比如保存后自动 <code>go run</code> 之类的, 这个使用 go 写的</p><p><a href="https://github.com/codeskyblue/fswatch" target="_blank" rel="noopener">codeskyblue/fswatch</a></p><p>还有个跨平台的命令行工具,同样的名字 start 更多 <a href="https://github.com/emcrisostomo/fswatch" target="_blank" rel="noopener">emcrisostomo/fswatch</a> 不过图方便用 go 这个就行</p><h1 id="bee"><a href="#bee" class="headerlink" title="bee"></a>bee</h1><p>属于 beego 的附属开发工具, <code>bee run [project-name]</code> 的执行效果也是自动监听文件改动执行编译命令, 感觉不如<code>fswatch</code>方便,当然用 beego 开发的另说<br><a href="https://github.com/astaxie/beego" target="_blank" rel="noopener">astaxie/beego</a></p><h1 id="govendor"><a href="#govendor" class="headerlink" title="govendor"></a>govendor</h1><p>是 go 开发的包管理工具, 虽然依赖的<code>package</code>都在 <code>gopath</code>当中,但是代码换一个环境就要重新<code>go get</code>一堆东西实在不方便,而且还有一个值得吐槽的依赖包版本问题<br><code>govendor</code>工具就是解决这类的问题,通过 hash 来保证开发和线上使用的依赖库一样<br><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">kardianos/govendor</a></p><h1 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h1><p>一个很不错的 web 开发框架,github 上已经有 14711个 star(截止到18/02/05), 和 <code>Martini</code>的api 很像,但是更快,适合用来做 restful 的 API<br><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">gin-gonic/gin</a></p><h1 id="mux"><a href="#mux" class="headerlink" title="mux"></a>mux</h1><p>一个独立的路由包, 支持 restful,轻量,而且支持go的<code>net/http</code> 的接口<br><a href="https://github.com/gorilla/mux" target="_blank" rel="noopener">gorilla/mux</a></p><h1 id="beego"><a href="#beego" class="headerlink" title="beego"></a>beego</h1><p>国人开发的go web框架, 特点是大而全,方便入门,和 php 的框架思路很像,有不少人在吐槽它的笨重, 如果公司想转成 go 做 web 业务它是一个不错的选择,因为它能快速出东西啊,个人感觉有点头疼的是源码很多很多…<br><a href="https://github.com/astaxie/beego" target="_blank" rel="noopener">astaxie/beego</a></p><h1 id="beego-log"><a href="#beego-log" class="headerlink" title="beego-log"></a>beego-log</h1><p>如果不想全部引用 beego 的内容,可以引进它的模块啊,它的 log 模块就是一个很不错的选择<br><a href="https://beego.me/docs/module/logs.md" target="_blank" rel="noopener">beego-log 的中文档</a></p><h1 id="kafka-go"><a href="#kafka-go" class="headerlink" title="kafka-go"></a>kafka-go</h1><p>和 kafka 相关的库很少,不过我个人使用的话这个库已经能满足我的需求, 我这里也有一个<a href="https://github.com/gaopengfei123123/go_study/tree/master/src/kafka_demo" target="_blank" rel="noopener">demo示例</a><br><a href="https://github.com/segmentio/kafka-go" target="_blank" rel="noopener">segmentio/kafka-go</a></p><h1 id="go-redis-redis"><a href="#go-redis-redis" class="headerlink" title="go-redis/redis"></a>go-redis/redis</h1><p>redis 的依赖包还是很简单的,这里推荐一个 star 不少的库<br><a href="https://github.com/go-redis/redis" target="_blank" rel="noopener">go-redis/redis</a></p><h1 id="amqp"><a href="#amqp" class="headerlink" title="amqp"></a>amqp</h1><p>如果用 rabbitmq 就肯定用这个拉,官方出品的肯定有保证啊,可惜 kafka 还没出官方包<br><a href="https://github.com/streadway/amqp" target="_blank" rel="noopener">amqp</a></p><h1 id="viper"><a href="#viper" class="headerlink" title="viper"></a>viper</h1><p>一个很不错的 config 文件管理工具<br><a href="https://github.com/spf13/viper" target="_blank" rel="noopener">viper</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是平时用到的一些工具&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Volume</title>
    <link href="http://blog.justwe.site/2018/02/13/docker-volume/"/>
    <id>http://blog.justwe.site/2018/02/13/docker-volume/</id>
    <published>2018-02-13T05:24:30.000Z</published>
    <updated>2018-02-16T12:35:24.116Z</updated>
    
    <content type="html"><![CDATA[<p>这里有一个使用 wordpress 的 <code>docker-compose.yml</code>的示例:<br><a id="more"></a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">gaofeifiy</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">33060</span><span class="string">:3306</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  wordpress:</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">wordpress:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:80"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>其中有一点奇怪的地方就是在<code>db</code>的数据挂载当中,是这么写的:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>这是<code>docker-compose</code> version2 起开始的新语法,目的就是方便多个服务之间公用同一个卷<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>这种写法就是声明一个命名卷, 通过<code>docker volume ls</code> 可以列出来宿主机上的所有挂载的卷,而且这些卷<strong>不会因为容器被删除而删除</strong>,为的就是方便数据和服务分离</p><p>可以通过命令<code>docker inspect wordpress_db_data</code> 来查看卷的配置,这里<code>wordpress_db_data</code>就是我们刚才声明的那个卷的名字<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  wordpress git:(master) ✗ docker inspect wordpress_db_data</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "CreatedAt": "2018-02-13T04:29:29Z",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": &#123;</span><br><span class="line">            "com.docker.compose.project": "wordpress",</span><br><span class="line">            "com.docker.compose.volume": "db_data"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/wordpress_db_data/_data",</span><br><span class="line">        "Name": "wordpress_db_data",</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>不过他的<code>mountpoint</code>的路径并不是宿主机上的路径,而依然是属于<code>docker</code>的路径,在<code>macOS</code>系统当中可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -ltrh /var/lib/docker/volumes</span></span><br></pre></td></tr></table></figure><p>在 <code>macOS</code> 中并不能看到实体文件,而是进入<code>linuxkit</code>中,所有的资源也是在那里,这在<code>win</code>和<code>mac</code>会出现,在 <code>linuxOS</code>中就是正常的<code>/var/lib/docker</code>路径<br>可以查看卷的列表, <a href="https://forums.docker.com/t/host-path-of-volume/12277/6" target="_blank" rel="noopener">参考资料1</a> <a href="https://stackoverflow.com/questions/39175194/docker-compose-persistent-data-mysql" target="_blank" rel="noopener">参考资料2</a></p><p>清除本地的卷可以执行<code>docker volume prune</code></p><p><a href="https://docs.docker.com/compose/compose-file/#volumes" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有一个使用 wordpress 的 &lt;code&gt;docker-compose.yml&lt;/code&gt;的示例:&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
      <category term="volume" scheme="http://blog.justwe.site/tags/volume/"/>
    
  </entry>
  
  <entry>
    <title>Docker-compose.yml 常用命令</title>
    <link href="http://blog.justwe.site/2018/02/12/docker-compose-yml/"/>
    <id>http://blog.justwe.site/2018/02/12/docker-compose-yml/</id>
    <published>2018-02-12T02:36:50.000Z</published>
    <updated>2018-02-12T02:39:14.386Z</updated>
    
    <content type="html"><![CDATA[<p>常用命令备注<br><a id="more"></a></p><h3 id="build-构建-重构-服务容器"><a href="#build-构建-重构-服务容器" class="headerlink" title="build 构建(重构)服务容器"></a>build 构建(重构)服务容器</h3><p>格式为: <code>docker-compose build [options] [service...]</code></p><ul><li><code>--force-rm</code> 删除构建时的临时容器</li><li><code>--no-cache</code> 构建不使用 cache</li><li><code>--pull</code>     始终尝试 pull 最新的镜像</li></ul><h3 id="up-这个才是最常用的"><a href="#up-这个才是最常用的" class="headerlink" title="up (这个才是最常用的)"></a>up (这个才是最常用的)</h3><p><code>docker-compose up [options] [service...]</code></p><p>直接输出<code>docker-compose up</code>就是将执行目录下的<code>docker-compose.yml</code>里的服务都自动构建,重新创建,并启动起来,同时将不同的容器关联起来,默认保持前台运行,同时也会输出各容器的输出日志</p><p><code>docker-compose up -d</code> 将后台执行,在生产环境中使用</p><ul><li><code>-d</code> 保持后台运行</li><li><code>--no-color</code> 不以颜色区分日志输出</li><li><code>--no-deps</code> 不启动服务关联的容器</li><li><code>--force-recreate</code> 强制重新创建容器</li><li><code>--no-recreate</code> 若容器已经存在,则不再构建, 与上者不同时使用</li><li><code>--no-build</code> 不自动构建缺失的镜像</li><li><code>-t , --timeout  TIMEOUT</code> 停止容器时候的超时,默认10s</li></ul><h3 id="config-检测配置文件格式"><a href="#config-检测配置文件格式" class="headerlink" title="config 检测配置文件格式"></a>config 检测配置文件格式</h3><p>如果正确则显示配置文件内容,如果错误则显示错误原因</p><h3 id="down-停止up启动的游戏"><a href="#down-停止up启动的游戏" class="headerlink" title="down 停止up启动的游戏"></a>down 停止<code>up</code>启动的游戏</h3><h3 id="exec-进入指定的容器"><a href="#exec-进入指定的容器" class="headerlink" title="exec 进入指定的容器"></a>exec 进入指定的容器</h3><h3 id="images-列出-compose-中包含的镜像"><a href="#images-列出-compose-中包含的镜像" class="headerlink" title="images 列出 compose 中包含的镜像"></a>images 列出 compose 中包含的镜像</h3><h3 id="kill-发送信号停止容器"><a href="#kill-发送信号停止容器" class="headerlink" title="kill 发送信号停止容器"></a>kill 发送信号停止容器</h3><p><code>docker-compose kill [options] [service...]</code><br>比如 <code>docker kill -s web</code></p><h3 id="logs-日志"><a href="#logs-日志" class="headerlink" title="logs 日志"></a>logs 日志</h3><p><code>docker-compose logs [options] [service...]</code><br>不同容器输出的日志颜色不同,不想有颜色就添加参数<code>--no-color</code></p><h3 id="pause-暂停一个服务"><a href="#pause-暂停一个服务" class="headerlink" title="pause 暂停一个服务"></a>pause 暂停一个服务</h3><h3 id="pull-拉取所需的镜像"><a href="#pull-拉取所需的镜像" class="headerlink" title="pull 拉取所需的镜像"></a>pull 拉取所需的镜像</h3><p><code>docker-compose pull [options] [service...]</code></p><h3 id="version-输出-compose-的版本"><a href="#version-输出-compose-的版本" class="headerlink" title="version 输出 compose 的版本"></a>version 输出 compose 的版本</h3><p>一个简单的示例,具体代码参考 <a href="https://github.com/gaopengfei123123/docker_study/tree/master/docker_compose_demo" target="_blank" rel="noopener">这里</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span>                          <span class="comment"># 一个 service 的名字</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span>                    <span class="comment"># 指出 Dockerfile 所在文件夹的路径, 而且每个 service 中必须有 build 或者 image</span></span><br><span class="line"><span class="attr">    ports:</span>                      <span class="comment"># 将容器内的接口绑定到宿主机上</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"redis:alpine"</span>       <span class="comment"># 这就是使用的远程镜像</span></span><br></pre></td></tr></table></figure><p>下面列出来几个常用的参数命令:</p><ul><li><p><code>build</code> 通过 <code>Dockerfile</code> 来构建镜像,可以指定<code>Dockerfile</code>路径以及<code>context</code>的路径, 可以用<code>arg</code>指定构建时的参数 比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">        context:</span> <span class="string">./dir</span></span><br><span class="line"><span class="attr">        dockerfile:</span> <span class="string">./other-dir</span></span><br><span class="line"><span class="attr">        arg:</span></span><br><span class="line"><span class="attr">            buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><code>image</code> 根据提供的镜像名拉取镜像</p></li><li><p><code>command</code> 覆盖容器启动后的默认命令比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure></li><li><p><code>container_name</code> 指定 <code>service</code> 容器的名字,如果没设置的话就是 容器_序号 这样, 比如 <code>web_1</code>,<code>db_1</code> 这样的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">web-container</span></span><br></pre></td></tr></table></figure></li><li><p><code>devices</code> 指定设备映射关系</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure></li><li><p><code>depends_on</code> 指定容器依赖关系,会优先构建依赖的容器,比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">        build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">        depends_on:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    db:</span> </span><br><span class="line"><span class="attr">        image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure></li></ul><p>会先构建 <code>db</code>,<code>redis</code>再构建<code>web</code></p><ul><li><p><code>dns</code> 自定义 dns 服务列表</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure></li><li><p><code>env_file</code> 从文件中提取环境变量,同变量名的会被最后的变量覆盖</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">.env1</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">.env2</span></span><br></pre></td></tr></table></figure></li></ul><p>格式必须是可以被 <code>#</code>注释的<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PRO_ENV</span>=product</span><br><span class="line"><span class="attr">APP_NAME</span>=hahaha</span><br></pre></td></tr></table></figure></p><ul><li><p><code>environment</code> 设置环境变量,可以是<code>KEY=VALUE</code> 也可以只给出变量名,这将调取 <code>docker</code> 宿主机的环境变量</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">    ROCK_ENV:</span> <span class="string">'development'</span></span><br><span class="line"><span class="attr">    SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ROCK_ENV=development</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure></li><li><p><code>port</code> 将端口暴露到宿主机上<br>对于表示布尔值的变量建议添加引号,防止 yaml 解析的时候产生歧义,比如:<code>y|yes|TRYE|true|ON|on</code> 这一类的</p></li><li><p><code>volumes</code> 将宿主机的目录路径和容器中的路径挂载,可以设置访问模式,比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/lib/mysql</span>                <span class="comment"># 同路径挂载</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">~/configs:/etc/configs:/ro</span>    <span class="comment"># 支持相对路径, 支持访问模式</span></span><br></pre></td></tr></table></figure></li><li><p>读取变量: compose会读取宿主机的环境变量和当前目录下的<code>.env</code>文件中的变量 比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    db:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">"mongodb:($MONGO_VERSION)</span></span><br></pre></td></tr></table></figure></li></ul><p>这在启动的时候就会根据环境变量来调整要拉取的镜像</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用命令备注&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker-composer" scheme="http://blog.justwe.site/tags/docker-composer/"/>
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 Go 进行 Jwt 验证</title>
    <link href="http://blog.justwe.site/2018/01/22/go-jwt/"/>
    <id>http://blog.justwe.site/2018/01/22/go-jwt/</id>
    <published>2018-01-22T06:04:26.000Z</published>
    <updated>2018-01-22T09:53:53.416Z</updated>
    
    <content type="html"><![CDATA[<p>对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到<br>这一台服务器上,这和负载均衡的初衷不一致啊,而 jwt 就解决了这类的痛点<br><a id="more"></a></p><h2 id="使用-JWT-的场景"><a href="#使用-JWT-的场景" class="headerlink" title="使用 JWT 的场景"></a>使用 JWT 的场景</h2><ul><li>身份验证 用户在登录过后服务器会用 jwt 返回用户可访问的资源,比如权限什么的</li><li>传递信息 通过 jwt 的<code>header</code>和<code>signature</code>可以保证<code>payload</code>没有被篡改,保证信息的安全</li></ul><h2 id="JWT-的结构"><a href="#JWT-的结构" class="headerlink" title="JWT 的结构"></a>JWT 的结构</h2><p>JWT 是由<code>header,payload,signature</code>三部分组成的,咱们先用例子说话</p><ul><li>header<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br><span class="line">// base64编码的字符串`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9`</span><br></pre></td></tr></table></figure></li></ul><p>这里规定了加密算法,hash256</p><ul><li><p>payload</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">// base64编码的字符串`eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9`</span><br></pre></td></tr></table></figure><p>  这里的内容没有强制要求,因为 paylaod 就是为了承载内容而存在的,不过想用规范的话也可以参考下面的</p><ul><li>iss: jwt签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>iat: jwt的签发时间</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul></li><li><p>signature<br>是用 <code>header + payload + secret</code>组合起来加密的,公式是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></li></ul><p>这里 <code>secret</code>就是自己定义的一个随机字符串,这一个过程只能发生在 server 端,会随机生成一个 hash 值</p><p>这样组合起来之后就是一个完整的 jwt 了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.4c9540f793ab33b13670169bdf444c1eb1c37047f18e861981e14e34587b1e04</span><br></pre></td></tr></table></figure></p><p>这里有一个<a href="https://github.com/gaopengfei123123/go_study/tree/master/code/jwt" target="_blank" rel="noopener">用 go 加密和验证 jwt 的 demo</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>选择 jwt 最大的理由:</p><ol><li>内容有公钥私钥,可以保证内容的合法性</li><li>token 中可以包含很多信息</li></ol><p>不过 jwt 不保证的安全问题:</p><ol><li>因为<code>header,paylaod</code>是 base64编码,相当于明文可见的,因此不能在<code>payload</code>中放入敏感信息</li><li>并不能保证数据传输时会不会被盗用,这一点和 sessionID 一样,因此不要迷信它有多高的安全性..</li></ol><p><strong>为了安全还是要上 https</strong></p><blockquote><p>相关推荐:<br><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">jwt.io</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到&lt;br&gt;这一台服务器上,这和负载均衡的初衷不一致啊,而 jwt 就解决了这类的痛点&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
      <category term="jwt" scheme="http://blog.justwe.site/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>关于跨域请求的二三事</title>
    <link href="http://blog.justwe.site/2018/01/16/http-cross-domain-etc/"/>
    <id>http://blog.justwe.site/2018/01/16/http-cross-domain-etc/</id>
    <published>2018-01-16T09:29:54.000Z</published>
    <updated>2018-01-16T10:42:34.740Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 <code>vue.js</code>,后端 <code>go</code></p><a id="more"></a><h2 id="首先要区分简单请求和复杂请求"><a href="#首先要区分简单请求和复杂请求" class="headerlink" title="首先要区分简单请求和复杂请求"></a>首先要区分简单请求和复杂请求</h2><p>这里阮一峰有详细讲解过一个: <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><p>如果你有一种<strong>太长不看</strong>的想法,就听我给你简单说一下:</p><ul><li>简单路由: 指的就是你平时表单提交,ajax 提交,使用<code>GET,POST,HEAD</code>,http 头信息里面没有杂七杂八<br>的东西的请求<br><img src="http://blog-image.onlyoneip.com/WX20180116-180128@2x.png" alt="简单请求示例"></li><li>复杂请求: 就是除了简单请求之外的请求,比如你在 http 头里有自定义的字段,或者你使用像<code>DELETE,PATCH</code>这<br>样的方法<br><img src="http://blog-image.onlyoneip.com/WX20180116-181559@2x.png" alt="复杂请求示例"></li></ul><p>你会发现复杂请求最明显的变化就是浏览器每次去请求接口的时候会发送两次,这里第一次发送的必定是一个请求方法为<code>OPTIONS</code><br>的,第二个才是你写的方法,我截图里的就是<code>POST</code>, 第二张截图之所以被判定为复杂请求就是因为我加了一个<code>X-TOKEN</code>这个<br>header,而如果第一次的<code>OPTIONS</code>方法的请求如果失败了也就不会发送第二条信息了,至于为什么,我只能说这是规定</p><blockquote><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<br>——<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS）</a></p></blockquote><h2 id="对于简单请求和复杂请求的处理-后端"><a href="#对于简单请求和复杂请求的处理-后端" class="headerlink" title="对于简单请求和复杂请求的处理(后端)"></a>对于简单请求和复杂请求的处理(后端)</h2><p>既然叫简单请求处理起来也很简单,下面已经列出代码, 关键就是设置<code>Access-Control-Allow</code>这一些参数就行,<br>复杂请求就是添加一个针对<code>OPTIONS</code>的处理方式,通常情况返回一个空字符串就行至于跨域验证之类的就是八仙过海各显神通了<br>各家有个家的处理方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> httpServer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *httpServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Stop here if its Preflighted OPTIONS request</span></span><br><span class="line"><span class="keyword">if</span> origin := r.Header.Get(<span class="string">"Origin"</span>); origin != <span class="string">""</span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>)<span class="comment">// 限制请求方的域 * 就是不限制</span></span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, PUT, DELETE"</span>)<span class="comment">// 限制请求方式</span></span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Headers"</span>,<span class="string">"Action, Module"</span>)   <span class="comment">//有使用自定义头 需要这个,Action, Module是例子</span></span><br><span class="line">    w.Header().Set(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Authorization,X-Token"</span>) <span class="comment">//允许的header的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if r.Method == "OPTIONS" &#123;// 针对复杂请求时做出的处理</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">addr := flag.String(<span class="string">"http-address"</span>, <span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h httpServer</span><br><span class="line"></span><br><span class="line">httpListener, err := net.Listen(<span class="string">"tcp"</span>, *addr)</span><br><span class="line">server := http.Server&#123;Handler: &amp;h,&#125;</span><br><span class="line">server.Serve(httpListener)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"finish "</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 &lt;code&gt;vue.js&lt;/code&gt;,后端 &lt;code&gt;go&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>转 在 Vue-Cli 中使用 Svg 做 Icon</title>
    <link href="http://blog.justwe.site/2017/12/26/vue-svg-icon/"/>
    <id>http://blog.justwe.site/2017/12/26/vue-svg-icon/</id>
    <published>2017-12-26T09:03:55.000Z</published>
    <updated>2017-12-26T10:25:28.165Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是用的<code>image sprite</code>或者使用的 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a>这类的开源库<br>现在咱们已经走进了现代浏览器的年代(ie9+),可以玩点新鲜的东西了,svg</p><a id="more"></a><p>svg 有几个好处:</p><ul><li>矢量图,不失真</li><li>可以受CSS样式影响,就像一个文本</li><li>http请求低了</li></ul><blockquote><p>相关阅读: <a href="http://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/?spm=a313x.7781069.1998910419.50" target="_blank" rel="noopener">未来必热：SVG Sprite技术介绍</a></p></blockquote><p>而对我来说最直观的好处就是可以让设计师给你出一个 svg,而不是自己眼都挑花了去找一个合适的图标:)</p><h2 id="做一个-svg-icon-组件"><a href="#做一个-svg-icon-组件" class="headerlink" title="做一个 svg-icon 组件"></a>做一个 svg-icon 组件</h2><p>在 vue-cli 生成的 vue 脚手架中添加组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: @/components/SvgIcon/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg <span class="class"><span class="keyword">class</span></span>=<span class="string">"svg-icon"</span> aria-hidden=<span class="string">"true"</span>&gt;</span><br><span class="line">    &lt;use :xlink:href=<span class="string">"iconName"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'icon-svg'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.svg-icon &#123;</span></span><br><span class="line"><span class="regexp">  width: 1em;</span></span><br><span class="line"><span class="regexp">  height: 1em;</span></span><br><span class="line"><span class="regexp">  vertical-align: -0.15em;</span></span><br><span class="line"><span class="regexp">  fill: currentColor;</span></span><br><span class="line"><span class="regexp">  overflow: hidden;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">作者：花裤衩</span><br><span class="line">链接：https:<span class="comment">//juejin.im/post/59bb864b5188257e7a427c09</span></span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p><p>使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//引入svg组件</span><br><span class="line">import IconSvg from &apos;@/components/IconSvg&apos;</span><br><span class="line"></span><br><span class="line">//全局注册icon-svg</span><br><span class="line">Vue.component(&apos;icon-svg&apos;, IconSvg)</span><br><span class="line"></span><br><span class="line">//在代码中使用</span><br><span class="line">&lt;icon-svg icon-class=&quot;password&quot; /&gt;</span><br><span class="line"></span><br><span class="line">作者：花裤衩</span><br><span class="line">链接：https://juejin.im/post/59bb864b5188257e7a427c09</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p><p>现在组件有了,svg 去哪里搞?</p><h2 id="使用-svg-sprite-loader"><a href="#使用-svg-sprite-loader" class="headerlink" title="使用 svg-sprite-loader"></a>使用 svg-sprite-loader</h2><p>这个工具可以把多个 svg 打包成 svg-sprite</p><p>为了把 icon 使用的 svg 和其他地方使用的 svg 区分开,我们需要对<code>webpack.base.conf.js</code>中的内容<br>重新设置一下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path: app-project/build/webpack.base.conf.js</span></span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">// [新增]当引用图标 svg 的时候引入指定目录下的文件</span></span><br><span class="line">     &#123;</span><br><span class="line">       test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">       loader: <span class="string">'svg-sprite-loader'</span>,</span><br><span class="line">       include: [resolve(<span class="string">'src/icons'</span>)],</span><br><span class="line">       options: &#123;</span><br><span class="line">         symbolId: <span class="string">'icon-[name]'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// [修改]这里 exclude 来忽略常规的 svg 引入</span></span><br><span class="line">     &#123;</span><br><span class="line">       test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">       loader: <span class="string">'url-loader'</span>,</span><br><span class="line">       exclude: [resolve(<span class="string">'src/icons'</span>)],   <span class="comment">// 这一步必不可少</span></span><br><span class="line">       options: &#123;</span><br><span class="line">         limit: <span class="number">10000</span>,</span><br><span class="line">         name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></p><p>接下来需要使用 webpack 的<code>require.context</code>函数</p><blockquote><p>require.context(“./test”, false, /.test.js$/);这行代码就会去 test 文件夹（不包含子目录）下面的找所有文件名以 .test.js 结尾的文件能被 require 的文件。更直白的说就是 我们可以通过正则匹配引入相应的文件模块。</p></blockquote><p>为了拆卸方便就把这些都放在了<code>icons</code>目录下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: app-project/src/icons.index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">'@/components/SvgIcon'</span><span class="comment">// svg组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line">Vue.component(<span class="string">'svg-icon'</span>, SvgIcon)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个加载目录的函数</span></span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext)</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'./svg'</span>, <span class="literal">false</span>, /\.svg$/)</span><br><span class="line"><span class="comment">// 加载目录下的所有 svg 文件</span></span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure></p><p>然后只需要在 <code>main.js</code> 文件中引入这个组件就可以了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: app-project/src/main.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./icons'</span> <span class="comment">// 引入图标文件</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>具体代码可以参考 <a href="https://github.com/gaopengfei123123/tadmin/commit/32735b2998290ca7558a1bfe0ec8b9c368893703" target="_blank" rel="noopener">这个地址链接</a></p><h2 id="压缩-svg-内容"><a href="#压缩-svg-内容" class="headerlink" title="压缩 svg 内容"></a>压缩 svg 内容</h2><p>这里推荐一个比较好用的工具: <a href="https://github.com/svg/svgo" target="_blank" rel="noopener">svgo</a> <a href="http://www.zhangxinxu.com/wordpress/2016/02/svg-compress-tool-svgo-experience/" target="_blank" rel="noopener">SVG精简压缩工具svgo简介和初体验</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这是我抄的 花裤衩的 <a href="https://juejin.im/post/59bb864b5188257e7a427c09" target="_blank" rel="noopener">手摸手，带你优雅的使用 icon</a>,观摩别人的代码给自己带来了很多收获</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都是用的&lt;code&gt;image sprite&lt;/code&gt;或者使用的 &lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Font Awesome&lt;/a&gt;这类的开源库&lt;br&gt;现在咱们已经走进了现代浏览器的年代(ie9+),可以玩点新鲜的东西了,svg&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于 Chrome 浏览器会强制跳转到 Https 的问题</title>
    <link href="http://blog.justwe.site/2017/12/19/chrome-redirection-https/"/>
    <id>http://blog.justwe.site/2017/12/19/chrome-redirection-https/</id>
    <published>2017-12-19T02:34:25.000Z</published>
    <updated>2018-01-29T10:16:29.715Z</updated>
    
    <content type="html"><![CDATA[<p>我在本地使用的是 <code>*.app</code> 的域名开发的,某一天发现使用谷歌的时候会强制跳转到 <code>https</code>,改成<code>http</code>都不管用<br><a id="more"></a></p><p>询问了一下万能的404网站,查询的结果大多是:</p><blockquote><p>chrome浏览器地址栏输入：chrome://net-internals/#hsts<br>在该页面中搜索：Query HSTS/PKP domain<br>在其下方的 Domain 后面的输入框中输入自己无法访问的域名，比如：domain.app，点击Query进行查询，如果有类似下面的结果，说明该域名后缀无法使用http前缀。</p></blockquote><p>这样式儿的结果,结果试了以后没有解决都我目前的问题,后来根据这篇文章的描述 <a href="https://laravel-china.org/articles/7035/chrome-forcibly-converts-thedev-domain-name-to-https-as-of-the-v63-version#reply10" target="_blank" rel="noopener">Chrome 于 V63 版本起会将 .dev 域名强制转换为 HTTPS</a><br>说 <code>.dev</code> 的域名就是会强制跳转,看来我用的<code>.app</code>的域名估计也是同样的问题,解决方法也简单.<br>根据 <a href="https://iyware.com/dont-use-dev-for-development/" target="_blank" rel="noopener">Don’t Use .dev For Development</a>建议使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.localhost</span><br><span class="line">.invalid</span><br><span class="line">.text</span><br><span class="line">.example</span><br></pre></td></tr></table></figure></p><p>作为本地开发的模拟域名,如果用的不爽的话,换火狐啊 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在本地使用的是 &lt;code&gt;*.app&lt;/code&gt; 的域名开发的,某一天发现使用谷歌的时候会强制跳转到 &lt;code&gt;https&lt;/code&gt;,改成&lt;code&gt;http&lt;/code&gt;都不管用&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
</feed>
