<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;hello-world/&gt;</title>
  <subtitle>代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justwe.site/"/>
  <updated>2017-06-17T06:39:21.000Z</updated>
  <id>http://blog.justwe.site/</id>
  
  <author>
    <name>GPF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git同步所 Fork 的库代码</title>
    <link href="http://blog.justwe.site/2017/06/17/git-fork-upstream/"/>
    <id>http://blog.justwe.site/2017/06/17/git-fork-upstream/</id>
    <published>2017-06-17T06:36:23.000Z</published>
    <updated>2017-06-17T06:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们 fork 了一个库进行开发,但是时间长了那个库已经添加了一些新的东西,这要怎么处理呢?<br><a id="more"></a><br>先添加你 fork 的库的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add FORK-sync https://github.com/xxx/yyy.git</div><div class="line">git remote -v</div></pre></td></tr></table></figure></p>
<p> 能看到类似的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FORK-sync	https://github.com/xxx/yyy.git (fetch)</div><div class="line">FORK-sync	https://github.com/xxx/yyy.git (push)</div><div class="line">origin	git@github.xxx/born-1.git (fetch)</div><div class="line">origin	git@github.xxx/born-1.git (push)</div></pre></td></tr></table></figure></p>
<p>然后接受所 fork 库的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch FORK-sync</div></pre></td></tr></table></figure></p>
<p>合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge FORK-sync/master</div></pre></td></tr></table></figure></p>
<p>再推送到你的远程仓库就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们 fork 了一个库进行开发,但是时间长了那个库已经添加了一些新的东西,这要怎么处理呢?&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="fork" scheme="http://blog.justwe.site/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>Go操作 Json 文本</title>
    <link href="http://blog.justwe.site/2017/06/05/go-json/"/>
    <id>http://blog.justwe.site/2017/06/05/go-json/</id>
    <published>2017-06-05T14:18:51.000Z</published>
    <updated>2017-06-19T15:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些简单的导入导出<br><a id="more"></a></p>
<h2 id="事先准备一个-json-文件"><a href="#事先准备一个-json-文件" class="headerlink" title="事先准备一个 json 文件"></a>事先准备一个 json 文件</h2><p>首先我们准备一个 json 文件,我直接就用的<code>package.json</code>里的一些字段<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"GPF &lt;5173180@qq.com&gt;"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"A Vue.js project"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.2.6"</span>,</div><div class="line">    <span class="attr">"vue-router"</span>: <span class="string">"^2.3.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"browserslist"</span>: [</div><div class="line">    <span class="string">"&gt; 1%"</span>,</div><div class="line">    <span class="string">"last 2 versions"</span>,</div><div class="line">    <span class="string">"not ie &lt;= 8"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="具体操作的代码"><a href="#具体操作的代码" class="headerlink" title="具体操作的代码"></a>具体操作的代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> allStruct <span class="keyword">interface</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义了获取 json 的结构体</span></div><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">	Mingzi       <span class="keyword">string</span> <span class="string">`json:"name"`</span></div><div class="line">	Version      <span class="keyword">string</span></div><div class="line">	PrIvate      <span class="keyword">bool</span></div><div class="line">	Dependencies Depend</div><div class="line">	Browserslist []<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Depend <span class="keyword">struct</span> &#123;</div><div class="line">	Vue    <span class="keyword">string</span></div><div class="line">	Router <span class="keyword">string</span> <span class="string">`json:"vue-router"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	path := <span class="string">"./package.json"</span></div><div class="line"></div><div class="line">	pkg := Package&#123;&#125;</div><div class="line">	file, err := os.Open(path)</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	data, err := ioutil.ReadAll(file)</div><div class="line">	checkError(err)</div><div class="line">	<span class="comment">//这个就是解析 json 格式内容的函数</span></div><div class="line">	json.Unmarshal(data, &amp;pkg)</div><div class="line">	foreachStruct(pkg)</div><div class="line">	<span class="comment">//output</span></div><div class="line">	<span class="comment">// Mingzi -- hexo-site</span></div><div class="line">	<span class="comment">// Version -- 0.0.0</span></div><div class="line">	<span class="comment">// PrIvate -- true</span></div><div class="line">	<span class="comment">// Dependencies -- &#123;^2.2.6 ^2.3.1&#125;</span></div><div class="line">	<span class="comment">// Browserslist -- [&gt; 1% last 2 versions not ie &lt;= 8]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检测错误的方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历结构体的方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">foreachStruct</span><span class="params">(st <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	t := reflect.TypeOf(st)</div><div class="line">	v := reflect.ValueOf(st)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; t.NumField(); k++ &#123;</div><div class="line">		key := t.Field(k).Name</div><div class="line">		value := v.Field(k).Interface()</div><div class="line">		fmt.Printf(<span class="string">"%s -- %v \n"</span>, key, value)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法是将 json 自动的赋值给定义好的 <code>struct</code> 上,自动赋值的条件是:</p>
<ol>
<li><p>首先查找 tag 含有 jsonkey 值的<strong>可导出的</strong> struct 字段(首字母大写),如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mingzi       string `json:&quot;name&quot;`  //对应 json 中的 &quot;name:&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>其次查找字段名相同的<strong>可导出的</strong> struct 字段 如: <code>Version      string //对应 json 中的 &quot;version:&quot;</code></p>
</li>
<li>然后查找可导出的大小写不敏感的字段 如: <code>PrIvate      bool //对应 json 中的 &quot;private&quot;</code></li>
</ol>
<p>总之就是如果要求不高就建立 struct 的时候字段直接和 json 字段一一对应就好,但是一定要<strong>首字母大写</strong></p>
<h2 id="导入未知结构的-json-数据"><a href="#导入未知结构的-json-数据" class="headerlink" title="导入未知结构的 json 数据"></a>导入未知结构的 json 数据</h2><p>很多时候我们需要导入的 json 的不确定内容的,或者特别特别长,比如<code>laravel 的 composer.json</code>文件<br>这个时候如果写结构体就很不灵活了,当然,像这种配置型的文件写一个长长的结构体也是可以的<br>于是乎我们就是用 <strong>空接口</strong> 配合 <strong>断言</strong> 来实现未知格式json 的解析<br>上代码:<br>这里的<code>composer.json</code>文件可以参考 <a href="https://github.com/laravel/laravel/blob/master/composer.json" target="_blank" rel="external">laravel的composer.json文件</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/bitly/go-simplejson"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	filePath := <span class="string">"./composer.json"</span></div><div class="line">	file, err := os.Open(filePath)</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	data, err := ioutil.ReadAll(file)</div><div class="line">	<span class="comment">// checkError(err)</span></div><div class="line">	readJSON(data)</div><div class="line"></div><div class="line">	js, err := simplejson.NewJson(data)</div><div class="line">	checkError(err)</div><div class="line"></div><div class="line">	<span class="comment">//获取某个字段值</span></div><div class="line">	str, err := js.Get(<span class="string">"name"</span>).String()</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="string">"name -&gt; "</span>, str)</div><div class="line"></div><div class="line">	<span class="comment">//多层级的key值</span></div><div class="line">	str2, err := js.Get(<span class="string">"autoload"</span>).Get(<span class="string">"classmap"</span>).GetIndex(<span class="number">0</span>).String()</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="string">"autoload.classmap[0] -&gt; "</span>, str2)</div><div class="line"></div><div class="line">	<span class="comment">//判断字段是否存在</span></div><div class="line">	<span class="comment">//源码内容 https://github.com/bitly/go-simplejson/blob/master/simplejson.go#L157</span></div><div class="line">	jType, ok := js.CheckGet(<span class="string">"type"</span>)</div><div class="line">	<span class="keyword">if</span> ok &#123;</div><div class="line">		str3, _ := jType.String()</div><div class="line">		fmt.Println(<span class="string">"type -&gt; "</span>, str3)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"no exist"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//数组</span></div><div class="line">	arr, err := js.Get(<span class="string">"keywords"</span>).Array()</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</div><div class="line">		fmt.Printf(<span class="string">"arr index:%d value:%s \n"</span>, i, v)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//字典</span></div><div class="line">	mp := js.Get(<span class="string">"require"</span>).MustMap()</div><div class="line">	fmt.Println(<span class="string">"require's key:value is:"</span>)</div><div class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> mp &#123;</div><div class="line">		fmt.Printf(<span class="string">"%s : %s \n"</span>, key, value)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readJSON</span><span class="params">(data []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">	<span class="comment">//定义一个由空接口组成的字典用来承接解析出来的 json</span></div><div class="line">	<span class="keyword">var</span> f <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">	json.Unmarshal(data, &amp;f)</div><div class="line">	<span class="comment">//通过断言来判断字段类型</span></div><div class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> f &#123;</div><div class="line">		<span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is string ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is int ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">case</span> []<span class="keyword">interface</span>&#123;&#125;:</div><div class="line">			fmt.Println(k, <span class="string">"is interface ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is null type ====&gt;"</span>, v)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了 空接口&amp;断言 这种万用的写法,社区里也是有不少成熟的轮子,我这里用的就是一个很不错的轮子<br><a href="https://github.com/bitly/go-simplejson/blob/master/simplejson.go" target="_blank" rel="external">simpleJson</a>,以上给了几个示例,更全面的在轮子<br>的 <a href="https://github.com/bitly/go-simplejson" target="_blank" rel="external">github</a>中的测试文件中列举出来了</p>
<blockquote>
<p>作为新手首要的目标就是先让项目跑起来,等有一定的代码量之后再去看轮子的源码,如果先看源码经常<br>起到事倍功半的效果<br>—-这是我说的</p>
</blockquote>
<h2 id="导出-json-格式文件"><a href="#导出-json-格式文件" class="headerlink" title="导出 json 格式文件"></a>导出 json 格式文件</h2><p>知道了如何导入就要知道如何导出,接下来就是导出的一些需要注意的地方<br>上代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//Server is a json format</span></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	ServerName <span class="keyword">string</span> <span class="string">`json:"serverName"`</span></div><div class="line">	ServerIP   <span class="keyword">string</span> <span class="string">`json:"serverIP"`</span></div><div class="line">	Port       <span class="keyword">int</span>    <span class="string">`json:"port,string"`</span>         <span class="comment">// ,string 将 int,int64,bool,string 类型字段按 string 输出</span></div><div class="line">	Version    <span class="keyword">string</span> <span class="string">`json:"version,omitempty"`</span>   <span class="comment">//添加了 ,omitempty 修饰符的意思就是如果该字段未空就不输出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Serverslice is a json format</span></div><div class="line"><span class="keyword">type</span> Serverslice <span class="keyword">struct</span> &#123;</div><div class="line">	ID <span class="keyword">string</span> <span class="string">`json:"-"`</span> <span class="comment">// - 将不会处理</span></div><div class="line">	Servers []Server <span class="string">`json:"servers"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> s Serverslice</div><div class="line">	s.Servers = <span class="built_in">append</span>(s.Servers, Server&#123;<span class="string">"beijing_vpn"</span>, <span class="string">"127.0.0.1"</span>, <span class="number">22</span>, <span class="string">"v0.0.1"</span>&#125;)</div><div class="line">	s.Servers = <span class="built_in">append</span>(s.Servers, Server&#123;ServerName: <span class="string">"chegongzhuang"</span>, ServerIP: <span class="string">"127.0.0.2"</span>, Port: <span class="number">443</span>&#125;)</div><div class="line"></div><div class="line">	b, err := json.Marshal(s)</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出内容为:</span></div><div class="line"><span class="comment">//&#123;"servers":[&#123;"serverName":"beijing_vpn","serverIP":"127.0.0.1","port":"22","version":"v0.0.1"&#125;,&#123;"serverName":"chegongzhuang","serverIP":"127.0.0.2","port":"443"&#125;]&#125;</span></div></pre></td></tr></table></figure></p>
<p>我们使用了<code>encoding/json</code>这个包,而且是将结构体转成的 json 格式,需要注意一下几点:</p>
<ol>
<li>定义<code>Struct</code>的字段必须是首字母大写可导出的,如果不写<code>tag</code>的话将按照字段名来输出</li>
<li><code>tag</code>中设置的自定义名称如<code>json:&quot;serverName&quot;</code>将优先于字段名用于 json 的字段当中<br>按照我们刚才的例子就是 json 中输出 <code>serverName</code> 而不是 <code>ServerName</code></li>
<li>如果 <code>tag:&quot;-&quot;</code> 将不对这个字段进行处理<br>marshal 函数需要注意的问题:</li>
<li><code>tag:&quot;xxx,omitempty&quot;</code>这种修饰词就是如果字段为空时不输出</li>
<li><code>tag:&quot;xxx,string&quot;</code>将 int,int64,bool,string 类型字段按 string 输出</li>
<li>json 对象只支持 string 作为 key,因此如果要编码一个 map 必须是<code>map[string]T</code> (T 代表任意类型)</li>
<li>channel,complex和 function 不能被输出</li>
<li>指针在编码的时候会输出指针指向的内容,空指针输出<code>null</code></li>
</ol>
<p>参照七牛的<a href="https://github.com/qiniu/api.v7/blob/develop/cdn/api.go" target="_blank" rel="external">sdk 文档</a>就是一个很好的例子</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些简单的导入导出&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>关于使用 Git 的操作流程</title>
    <link href="http://blog.justwe.site/2017/05/27/git-workflow/"/>
    <id>http://blog.justwe.site/2017/05/27/git-workflow/</id>
    <published>2017-05-27T05:24:32.000Z</published>
    <updated>2017-05-29T14:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>老夫的毕生功力都在这了…<br><a id="more"></a></p>
<h2 id="通常我们工作时是这样操作"><a href="#通常我们工作时是这样操作" class="headerlink" title="通常我们工作时是这样操作"></a>通常我们工作时是这样操作</h2><p>说一下使用 <code>git</code> 做版本控制的时候的工作流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add -A           #需要添加到版本库中的文件 -A 就代表着所有文件(除开了 .gitignore忽略掉的文件)</div><div class="line">git commit -m &apos;本次提交的备注&apos;</div><div class="line">git pull            #将远程的库和本地的库版本同步一下,因为远程库可能发生了修改(多人合作开发时)</div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>这样操作的前提是本地远程都是同一个 <code>master</code> 分支上</p>
<h2 id="最可能会碰到的问题"><a href="#最可能会碰到的问题" class="headerlink" title="最可能会碰到的问题"></a>最可能会碰到的问题</h2><p>以上操作前两步通常不会碰到问题,最容易发生问题的是 <code>git pull</code> 这一步<br>因为多人开发时难免碰到同时修改了同一个文件,那么就会产生<strong>冲突</strong><br>git 是根据文件每行发生的修改进行的判定的,如果同时对同一文件的同一行发生了修改,就卡死到这一步上了</p>
<h2 id="怎么解决这个问题"><a href="#怎么解决这个问题" class="headerlink" title="怎么解决这个问题"></a>怎么解决这个问题</h2><p>我常用的是命令行和 phpstrom 中的版本控制工具,最推荐的是命令行操作,别的图形界面也是调的命令行接口<br>直接学会git 的命令是学习成本最低的一种方式,一次学会到处可用啊!</p>
<p>命令行还有个强大的地方就是它的提示通常就是你解决问题的方法,照着提示打就行(要善用提示啊,别看见报错就慌了)</p>
<p>我们做一个实验,我自己的一个版本库本地和远程同时发生了修改,而且是操作的同一个文件,<br>我直接进行 <code>git push</code>操作<br><img src="/images/git/git-push.png" alt=""><br>看到提示没?提示中的 hint 中说了,向远程库中更新被拒,因为远程有了修改而本地没有(说白了就是没同步),<br>这通常发生在另一个版本库向远程推送了相同的文件(就是两个人在这个版本下同时操作了同一个文件),<br>提示中给出原因之后紧接着给出了解决办法<code>(e.g., &#39;git pull ...&#39;)before pushing again</code>,</p>
<p>我们按着它给的提示操作一下<br><img src="/images/git/git-pull.png" alt=""><br>通常如果两个人之间的操作不发生冲突比如同时修改了同一个文件的同一行的情况下就会进入<code>commit</code>的<br>编辑界面了,但是我给他人为的造成一个错误,这个错误就是我们最常碰到的错误,合并冲突<br>看到提示中的最后一行了没有?<br><code>Automatic merge failed; fix conflicts and then commit the result.</code><br>自动合并失败了,请修复冲突并再次提交</p>
<p>如果文件很多我怎么去找到它?</p>
<ul>
<li>一种是靠界面工具主动把错误推到你面前</li>
<li>另一种就是自己去找了</li>
</ul>
<p>第一种方法坑爹的地方就是好多工具他给你提示就提示一次,你如果给关了就不会再提示了,但是该提交不上去的<br>还是提交不上去,而且如果是线上火速修复的时候你的编辑器是帮不到那么远的<br>我们选第二种,肯定不是挨个文件去翻啊!会死人的</p>
<p>有一个很有用的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p><img src="/images/git/git-status.png" alt=""><br>标红的文件都给你了,而且还给你了需要执行的命令,<strong>你别假装看不到啊!</strong><br>当然这个时候直接<code>git add &amp;&amp; git commit</code>会出事的,你还没解决冲突呢!<br>我们去这个冲突文件中解决掉冲突本地能跑通了再提交,而且这个错误提示会指名文件路径的,我这个冲突文件<br>因为正好是在项目的根目录下才没有的</p>
<p>打开这个文件我们看到如下的内容:<br><img src="/images/git/git-chongtu.png" alt=""><br>我这是在 phpstrom 中打开的文件,如果phpstrom 能读取到你项目中的 <code>.git/</code> 目录是可以进行版本控制的<br>这里phpstrom 就帮你把冲突文件标红了,多么醒目~当然这也是我们自己找的<br>如果文件内容特别多但是就一两处冲突时我们直接搜索关键词 <code>HEAD</code>或者<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>就行,你懂的…<br>被尖角号扩起来的就是冲突的地方,接下来就是<del>保孩子还是保大人</del>解决冲突的时候了,找到谁和你改的同一处代码</p>
<p>什么?你说你找不到是谁?你没看到代码冲突块下的 <code>779833d952d8a6557b2e8eba3bd192ede5cb6ca0</code><br>这一段文字吗?你先别激动,这个点还不适合开车,这个是提交的 commit-id,你每次提交都会产生的一个标识<br>要查看这到底是谁和我的代码冲突了就执行下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log 779833d952d8a6557b2e8eba3bd192ede5cb6ca0</div></pre></td></tr></table></figure></p>
<p>第一行就是你要的结果,<br>如果直接<code>git log -p</code> 就是列出所有的提交记录 -p 就是显示出修改的地方</p>
<p>冲突块部分 HEAD就是你写的代码,下面的是别人写的,去掉其中一个把那些标签清理干净,测试一下没问题了<br>再<code>git add &amp;&amp; git commit &amp;&amp; git pull &amp;&amp; git push</code> 这四连技好了,世界清净了</p>
<h2 id="这合并的时候发生了什么"><a href="#这合并的时候发生了什么" class="headerlink" title="这合并的时候发生了什么?"></a>这合并的时候发生了什么?</h2><p>这是我在 segmentfault 中给出的答案:</p>
<p>比如你从一个git log为<code>1,2,3,4,5,6</code>的远程库拉取到了本地,<br>另一个同事也拉取了同样的代码,而且你的同事先于你提交到远程了,<br>此时<strong>远程</strong>的版本是<code>1,2,3,4,5,6,7_new,8_new</code>,<br>而你当前只是<strong>本地</strong>的版本<code>1,2,3,4,5,6,7_local,8_local,9_local</code><br>从这里你就能看出你前一部分和<strong>远程</strong>的一样,后一部分和<strong>远程</strong>的不一样,<br>这个时候你不能正常推送上去的,如果你采取<code>git push origin master --force</code><br>那么<strong>远程</strong>的版本就变成了<code>1,2,3,4,5,6,7_local,8_local,9_local</code><br>之前你同事推送的<code>7_new,8_new</code>这两次推送被覆盖了,这不是大家想要的情况<br>因此需要<code>git pull</code>来将<strong>本地</strong>的版本合并成样<br><code>1,2,3,4,5,6,7_new,7_local,8_local,8_new,9_local,10_commit_merge</code><br>远程和<strong>本地</strong>的排序是按当时 <code>commit</code> 的时间来排的,最后一个<code>10_commit_merge</code>就是你<strong>本地</strong>和<strong>远程</strong>合并的标志,最后你推送到远程仓库的应该也是这个,<br>因为你们操作的是同一个库始终要保持代码的同步,所以一旦版本库发生改动同一分支下的所有人都要跟着去同步他,因为各开发各的直接往上推 git 还没智能到帮你处理冲突的地步<br><a href="https://segmentfault.com/q/1010000009549291?_ea=1982061" target="_blank" rel="external">答案链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老夫的毕生功力都在这了…&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="workflow" scheme="http://blog.justwe.site/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Laravel54初始化迁移失败</title>
    <link href="http://blog.justwe.site/2017/05/24/laravel54-migrate-error/"/>
    <id>http://blog.justwe.site/2017/05/24/laravel54-migrate-error/</id>
    <published>2017-05-24T03:55:45.000Z</published>
    <updated>2017-05-24T04:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在新版的 laravel 框架当中(v5.4.23) 出现了报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Illuminate\Database\QueryException]</div><div class="line"> SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t</div><div class="line"> oo long; max key length is 767 bytes (SQL: alter table `users` add unique `</div><div class="line"> users_email_unique`(`email`))</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>错误重现:</p>
<ol>
<li>laravel 版本 5.4.23</li>
<li>配置好数据库链接,执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php artisan make:auth</div><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
</li>
</ol>
<p>就会出现错误</p>
<p>解决办法:<br>打开文件 <code>@yourApp/app/Prividers/AppserviceProvider.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Schema::defaultStringLength(<span class="number">191</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>文章来源: <a href="https://laracasts.com/discuss/channels/laravel/laravel-54-failing-on-php-artisan-migrate-after-php-artisan-makeauth?page=1" target="_blank" rel="external">laracast</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在新版的 laravel 框架当中(v5.4.23) 出现了报错&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Illuminate\Database\QueryException]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; oo long; max key length is 767 bytes (SQL: alter table `users` add unique `&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; users_email_unique`(`email`))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="laravel" scheme="http://blog.justwe.site/tags/laravel/"/>
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Go-Mysql</title>
    <link href="http://blog.justwe.site/2017/05/17/go-mysql/"/>
    <id>http://blog.justwe.site/2017/05/17/go-mysql/</id>
    <published>2017-05-17T15:32:12.000Z</published>
    <updated>2017-05-18T02:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里写一个<code>go</code> 操作 <code>mysql</code> 的 curd 的 demo</p>
<a id="more"></a>
<p>表结构是这样的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</div><div class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span>,</div><div class="line">	age <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>,</div><div class="line">	created_at <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>go 的文件是:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"database/sql"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	_ <span class="string">"github.com/GO-SQL-Driver/MySQL"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkErr</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123123@tcp(localhost:33060)/go?charset=utf8"</span>)</div><div class="line">	<span class="keyword">defer</span> db.Close()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="comment">//insert</span></div><div class="line">	stmt, err := db.Prepare(<span class="string">"INSERT test SET name=? , age=? , created_at=?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="string">"gaopengfei"</span>, <span class="number">22</span>, time.Now().Unix())</div><div class="line">	checkErr(err)</div><div class="line">	<span class="comment">//获取插入数据的 id</span></div><div class="line">	id, err := res.LastInsertId()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"insert id %d \n"</span>, id)</div><div class="line"></div><div class="line">	<span class="comment">//update</span></div><div class="line">	stmt, err = db.Prepare(<span class="string">"UPDATE test SET age=? WHERE id &lt; ?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err = stmt.Exec(<span class="number">233</span>, <span class="number">4</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="comment">//输出受影响的条数</span></div><div class="line">	affect, err := res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"affected num is %d \n"</span>, affect)</div><div class="line"></div><div class="line">	<span class="comment">//select</span></div><div class="line">	rows, err := db.Query(<span class="string">"SELECT * FROM test"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="keyword">for</span> rows.Next() &#123;</div><div class="line">		<span class="keyword">var</span> id <span class="keyword">int</span></div><div class="line">		<span class="keyword">var</span> name <span class="keyword">string</span></div><div class="line">		<span class="keyword">var</span> age <span class="keyword">int</span></div><div class="line">		<span class="keyword">var</span> createdAt <span class="keyword">int</span> <span class="comment">//go 不让使用下划线的方式定义变量,如果字段是 created_at 需要写成 createdAt 驼峰命名法</span></div><div class="line">		err = rows.Scan(&amp;id, &amp;name, &amp;age, &amp;createdAt)</div><div class="line">		checkErr(err)</div><div class="line">		<span class="comment">//将int 转成 int64格式,方便格式化时间</span></div><div class="line">		<span class="keyword">var</span> tm64 <span class="keyword">int64</span></div><div class="line">		tm64 = <span class="keyword">int64</span>(createdAt)</div><div class="line">		tm := time.Unix(tm64, <span class="number">0</span>)</div><div class="line">		fmt.Printf(<span class="string">"id is %d; name is %s; age is %d: created_at is %s \n"</span>, id, name, age, tm.Format(<span class="string">"2006-01-02 03:04:05 PM"</span>))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//delete</span></div><div class="line">	stmt, err = db.Prepare(<span class="string">"DELETE FROM test WHERE id=?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err = stmt.Exec(<span class="number">3</span>)</div><div class="line">	checkErr(err)</div><div class="line">	affect, err = res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"affected num is %d \n"</span>, affect)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>这里使用了一个稳定的 mysql 包,因为 go 官方并没有实现 mysql 的实例,而是提供了数据操作的接口<br>只要能实现就可以进行操作</li>
<li>文件头部 <code>import</code> 中出现了 <code>_ &quot;github.com/GO-SQL-Driver/MySQL&quot;</code> 这样的写法,意思是<br>引用 <code>_</code> 后面的包名而不直接使用其中的函数,变量等资源</li>
<li>另外不得不吐槽一下 <code>go</code> 的时间格式函数,我大 php 的格式化是这样的<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date(<span class="string">"Y-m-d H:i:s"</span>,time())</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这边的是 “Y-m-d H:i:s” 啊!,一眼就看出来格式是什么了,但是 go 里的格式是这样的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">timestamp := time.Now().Unix()</div><div class="line">tm := time.Unix(timestamp, <span class="number">0</span>)</div><div class="line">timer  := tm.Format(<span class="string">"2006-01-02 03:04:05 PM"</span>)</div><div class="line">fmt.Println(timer)</div></pre></td></tr></table></figure></p>
<p>他的格式代表不是 Y,m,d,H,i,s 而是 2006,01,02,03,04,05 PM<br>这个也好记,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">月份 1,01,Jan,January</div><div class="line"></div><div class="line">日　 2,02,_2</div><div class="line"></div><div class="line">时　 3,03,15,PM,pm,AM,am</div><div class="line"></div><div class="line">分　 4,04</div><div class="line"></div><div class="line">秒　 5,05</div><div class="line"></div><div class="line">年　 06,2006</div><div class="line"></div><div class="line">周几 Mon,Monday</div><div class="line"></div><div class="line">时区时差表示 -07,-0700,Z0700,Z07:00,-07:00,MST</div><div class="line"></div><div class="line">时区字母缩写 MST</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里写一个&lt;code&gt;go&lt;/code&gt; 操作 &lt;code&gt;mysql&lt;/code&gt; 的 curd 的 demo&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="mysql" scheme="http://blog.justwe.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Php-Callback-Func</title>
    <link href="http://blog.justwe.site/2017/05/11/php-callback-func/"/>
    <id>http://blog.justwe.site/2017/05/11/php-callback-func/</id>
    <published>2017-05-11T10:31:59.000Z</published>
    <updated>2017-05-11T10:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>你知道茴香的<code>茴</code>有四种写法,那你知道 php 的回调也有四种写法吗?<br><a id="more"></a></p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="function"><span class="keyword">function</span><span class="params">($item)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> $item;</div><div class="line">&#125;,$array);</div></pre></td></tr></table></figure>
<h2 id="类静态调用"><a href="#类静态调用" class="headerlink" title="类静态调用"></a>类静态调用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($req)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="string">'A::Test'</span>,$array);</div><div class="line">array_map([<span class="string">'A'</span>,<span class="string">'Test'</span>],$array);</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($item)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'hello world'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="string">'test'</span>,$array);</div></pre></td></tr></table></figure>
<h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($req)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">$obj = <span class="keyword">new</span> A();</div><div class="line">array_map([$obj,<span class="string">'test'</span>],$array);</div></pre></td></tr></table></figure>
<p>转载自:<a href="https://wiki.swoole.com/wiki/page/458.html" target="_blank" rel="external">4种PHP回调函数风格-Swoole扩展-Swoole文档中心</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你知道茴香的&lt;code&gt;茴&lt;/code&gt;有四种写法,那你知道 php 的回调也有四种写法吗?&lt;br&gt;
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="callback" scheme="http://blog.justwe.site/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>Git-Askpass-Error</title>
    <link href="http://blog.justwe.site/2017/05/08/git-askpass-error/"/>
    <id>http://blog.justwe.site/2017/05/08/git-askpass-error/</id>
    <published>2017-05-08T14:31:42.000Z</published>
    <updated>2017-05-08T14:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 的账号密码错误情况<br><a id="more"></a></p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>前段时间使用 phpstrom 中的 git 出现了一个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Fetch failed</div><div class="line">	error: unable to read askpass response from &apos;..\tmp\intellij-git-askpass.bat&apos;</div><div class="line">	error: failed to execute prompt script (exit code 1)</div><div class="line">	fatal: could not read Username for &apos;http://xxx:3000&apos;: No error</div></pre></td></tr></table></figure></p>
<p>大体情况就是某一次操作的时候账户密码发生了变动,导致本地的 git 没权限去拉取远程库了(因为用的是 https)<br>的方式</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>第一种(推荐): 将远程地址换成 ssh 地址,使用 ssh-key 登录</p>
<p>第二种: 实在不想换的话就是用这种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin https://&lt;username&gt;:&lt;password&gt;@github.com/&lt;username&gt;/&lt;repo_name&gt;.git</div></pre></td></tr></table></figure></p>
<p>将账号密码写入到请求地址当中<br>比如我账户为: gaopengfei 密码为: 123456<br>请求的库的地址是 <code>https://github.com/gaopengfei123123/redis_lbs.git</code><br>那么我的远程地址就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin https://gaopengfei:123456@github.com/gaopengfei123123/redis_lbs.git</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/atom/atom/issues/8984#issuecomment-144697558" target="_blank" rel="external">参考issues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 的账号密码错误情况&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="askpass" scheme="http://blog.justwe.site/tags/askpass/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Transition</title>
    <link href="http://blog.justwe.site/2017/05/06/vue-transition/"/>
    <id>http://blog.justwe.site/2017/05/06/vue-transition/</id>
    <published>2017-05-06T05:24:23.000Z</published>
    <updated>2017-05-06T07:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>对 vue 的渐变效果的简单使用</p>
<a id="more"></a>
<h2 id="单个节点的渐变效果"><a href="#单个节点的渐变效果" class="headerlink" title="单个节点的渐变效果"></a>单个节点的渐变效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/animate.css/3.5.2/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/vue/2.3.2/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></div><div class="line">    Toggle render</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 同一个节点的多个显隐效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里解释一下 <code>&lt;transition&gt;</code> 中的参数问题:</p>
<ol>
<li><code>mode=&quot;out-in&quot;</code> 采用的切换模式是 先出后进,保证两个节点能平滑的切换显示, 还有一种是 <code>in-out</code>,<br>如果没有指定<code>mode</code>将同时生效,两个元素的动画同时触发这不是我现在需要的</li>
<li><code>enter-active-class=&quot;animated fadeInDown&quot;</code>  元素显示时添加的 class , 这里使用了 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">animate.css</a>,</li>
<li><code>leave-active-class=&quot;animated fadeOutDown&quot;</code> 元素消失时显示的动画</li>
<li><code>key</code> 相同标签名中必须的标识,否则 vue 将不能区分元素内容</li>
</ol>
<h2 id="一种运用-key-简化判断的一种写法"><a href="#一种运用-key-简化判断的一种写法" class="headerlink" title="一种运用 key 简化判断的一种写法"></a>一种运用 key 简化判断的一种写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:key</span>=<span class="string">"status"</span>&gt;</span>&#123;&#123; status &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它的效果等同于:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"status === 'show'"</span> <span class="attr">key</span>=<span class="string">"show"</span>&gt;</span></div><div class="line">    show</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"status === 'hidden'"</span> <span class="attr">key</span>=<span class="string">"hidden"</span>&gt;</span></div><div class="line">    hidden</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果是多重的状态判断这个会很实用</p>
<h2 id="多组件之间的状态过渡"><a href="#多组件之间的状态过渡" class="headerlink" title="多组件之间的状态过渡"></a>多组件之间的状态过渡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"view"</span> <span class="attr">value</span>=<span class="string">"v-a"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"view"</span> <span class="attr">value</span>=<span class="string">"v-b"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多个组件的过渡效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">view</span>: <span class="string">'v-a'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;&#125;,</div><div class="line">      <span class="attr">components</span>: &#123;</div><div class="line">        <span class="string">'v-a'</span>: &#123;</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;div&gt;Component A&lt;/div&gt;'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'v-b'</span>: &#123;</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;div&gt;Component B&lt;/div&gt;'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下部需要添加 key 值了,因为每次动态渲染的时候都只有一个</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 vue 的渐变效果的简单使用&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
      <category term="animate" scheme="http://blog.justwe.site/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>使用 Axios-Post 提交数据</title>
    <link href="http://blog.justwe.site/2017/05/02/vue-axios-post/"/>
    <id>http://blog.justwe.site/2017/05/02/vue-axios-post/</id>
    <published>2017-05-02T08:45:00.000Z</published>
    <updated>2017-05-02T14:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>继 <code>vue-resource</code> 之后, <code>axios</code> 是 vue 官方首推的网络请求组件<br><a id="more"></a></p>
<h2 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h2><p>它的功能更强大,而且可以无痛迁移到新的项目当中,有尤大的原话就是:</p>
<blockquote>
<p>最近团队讨论了一下，Ajax 本身跟 Vue 并没有什么需要特别整合的地方，使用 fetch polyfill 或是 axios、superagent 等等都可以起到同等的效果，vue-resource 提供的价值和其维护成本相比并不划算，所以决定在不久以后取消对 vue-resource 的官方推荐。已有的用户可以继续使用，但以后不再把 vue-resource 作为官方的 ajax 方案。<br>这里可以去掉 vue-resource，文档也不必翻译了。<br><a href="https://github.com/vuefe/vuefe.github.io/issues/186" target="_blank" rel="external">原文链接</a></p>
</blockquote>
<p>这里还有一份<a href="https://juejin.im/entry/587599388d6d810058a7a41a" target="_blank" rel="external">看两眼就是能用的手册</a></p>
<h2 id="关于-csrf-攻击"><a href="#关于-csrf-攻击" class="headerlink" title="关于 csrf 攻击"></a>关于 csrf 攻击</h2><p>这篇文章想说的不是怎么用 axios,而是之前碰到了一种情况,就是在 php 框架当中,碰到了 csrf 验证的问题<br>关于 csrf 攻击这里也不会讲,因为前辈们已经说的很详细了,比如这篇<a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html#undefined" target="_blank" rel="external">通俗易懂的文章</a></p>
<h2 id="axios-与-csrf-token"><a href="#axios-与-csrf-token" class="headerlink" title="axios 与 csrf-token"></a>axios 与 csrf-token</h2><p>我常用的两个框架中 laravel 是支持在 header 中设置 csrf-token 的,而 yii 中的默认设置只是在表单<br>提交的内容中检测 csrf-token 相关的字段,使用 axios 提交内容的时候默认并不会出现在 from-data<br>内容当中,比如这样提交的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> postUrl = <span class="string">'/route/to/action'</span>;</div><div class="line"><span class="keyword">let</span> postData = &#123;</div><div class="line">  <span class="attr">id</span> : <span class="number">1</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">"xiaoming"</span>,</div><div class="line">  <span class="attr">_csrf_token</span> : <span class="string">"&lt;?= Yii::$app-&gt;request-&gt;csrfToken ?&gt;"</span></div><div class="line">&#125;</div><div class="line">axios.post(postUrl,postData)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>但是这样的提交形式在 yii2.0 当中是接收不到提交的内容的,因为它的内容是存在了 <code>request payload</code>当中<br>所以使用<code>Yii::$app-&gt;request-&gt;post()</code>是获取不到内容的,想要得到提交的内容需要这样:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestPayload</span><span class="params">()</span></span>&#123;</div><div class="line">    $request_payload = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line">    <span class="keyword">return</span> json_decode($request_payload,<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">print_r(requestPayload());</div></pre></td></tr></table></figure></p>
<p>这样做的缺点就是获取请求都是自己去实现,而不是通过框架的 request 类去处理<br>这么做的前提还是关闭所提交 controller 的 csrf-token 验证,不安全啊同志们!</p>
<p>那么问题来了,用什么样的姿势提交能让框架去识别并自动提取出来 csrf-token 呢?</p>
<p>说了那么多废话终于到正题了,关键就是这个类了:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> postUrl = <span class="string">'/route/to/action'</span>;</div><div class="line"><span class="keyword">let</span> postData = <span class="keyword">new</span> FormData();</div><div class="line">postData.append(<span class="string">'action'</span>, <span class="string">'ADD'</span>);</div><div class="line">postData.append(<span class="string">'param'</span>, <span class="number">0</span>);</div><div class="line">postData.append(<span class="string">'_csrf_token'</span>, <span class="string">'&lt;?= Yii::$app-&gt;request-&gt;csrfToken ?&gt;'</span>);</div><div class="line"></div><div class="line">axios.post(postUrl,postData)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>在这之前 bb 了那么多也是想让自己的印象更清晰一点,边说边捋思路,这是当初找到答案的地方<a href="https://github.com/mzabriskie/axios/issues/318#issuecomment-218948420" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继 &lt;code&gt;vue-resource&lt;/code&gt; 之后, &lt;code&gt;axios&lt;/code&gt; 是 vue 官方首推的网络请求组件&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
      <category term="axios" scheme="http://blog.justwe.site/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Jquery 中$(This) 和 This 的区别</title>
    <link href="http://blog.justwe.site/2017/05/02/jquery-this/"/>
    <id>http://blog.justwe.site/2017/05/02/jquery-this/</id>
    <published>2017-05-02T03:39:31.000Z</published>
    <updated>2017-05-02T03:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>说一个常识性的东西,帮助自己回忆一下</p>
 <a id="more"></a>
<p> 一句话, $(this)是 jquery 的对象,而 this 是 html 元素对象<br> 什么意思呢?<br> $(this) 可以调用jquery 中的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="keyword">this</span>).val()</div><div class="line">$(<span class="keyword">this</span>).addClass()</div></pre></td></tr></table></figure></p>
<p>而 this 是属于 html 的对象,属于原生 js,因此不能用 jq 中一些封装好的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.value</div><div class="line"><span class="keyword">this</span>.id</div></pre></td></tr></table></figure></p>
<p>这两者容易造成混淆的地方就是在调用 jq 方法时使用闭包的情景下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#input'</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		inputCheck(<span class="keyword">this</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在 <code>inputCheck(param)</code> 这个方法中在调用参数的时候就不能再使用 jqery 的方法了,会报函数找不到<br>的错误,因此需要转换一下,<strong>一般情景</strong>下的转换关系是这样的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="keyword">this</span>)[<span class="number">0</span>] == <span class="keyword">this</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说一个常识性的东西,帮助自己回忆一下&lt;/p&gt;
    
    </summary>
    
      <category term="jquery" scheme="http://blog.justwe.site/categories/jquery/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="jquery" scheme="http://blog.justwe.site/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>&lt;转&gt; 关于 Ssh 的 25 条实用命令</title>
    <link href="http://blog.justwe.site/2017/04/28/ssh-command/"/>
    <id>http://blog.justwe.site/2017/04/28/ssh-command/</id>
    <published>2017-04-28T02:02:50.000Z</published>
    <updated>2017-04-28T02:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>OpenSSH是SSH连接工具的免费版本。telnet，rlogin和ftp用户可能还没意识到他们在互联网上传输的密码是未加密的，但SSH是加密的，OpenSSH加密所有通信（包括密码），有效消除了窃听，连接劫持和其它攻击。此外，OpenSSH提供了安全隧道功能和多种身份验证方法，支持SSH协议的所有版本。</p>
<a id="more"></a>
<p>SSH是一个非常伟大的工具，如果你要在互联网上远程连接到服务器，那么SSH无疑是最佳的候选。下面是通过网络投票选出的25个最佳SSH命令，你必须牢记于心。</p>
<p>（注：有些内容较长的命令，在本文中会显示为截断的状态。如果你需要阅读完整的命令，可以把整行复制到您的记事本当中阅读。）</p>
<h2 id="复制SSH密钥到目标主机，开启无密码SSH登录"><a href="#复制SSH密钥到目标主机，开启无密码SSH登录" class="headerlink" title="复制SSH密钥到目标主机，开启无密码SSH登录"></a>复制SSH密钥到目标主机，开启无密码SSH登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id user@host</div></pre></td></tr></table></figure>
<p>如果还没有密钥，请使用ssh-keygen命令生成。</p>
<h2 id="从某主机的80端口开启到本地主机2001端口的隧道"><a href="#从某主机的80端口开启到本地主机2001端口的隧道" class="headerlink" title="从某主机的80端口开启到本地主机2001端口的隧道"></a>从某主机的80端口开启到本地主机2001端口的隧道</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -N -L2001:localhost:80 somemachine</div></pre></td></tr></table></figure>
<p>现在你可以直接在浏览器中输入 <a href="http://localhost:2001访问这个网站。" target="_blank" rel="external">http://localhost:2001访问这个网站。</a></p>
<h2 id="将你的麦克风输出到远程计算机的扬声器"><a href="#将你的麦克风输出到远程计算机的扬声器" class="headerlink" title="将你的麦克风输出到远程计算机的扬声器"></a>将你的麦克风输出到远程计算机的扬声器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp</div></pre></td></tr></table></figure>
<p>这样来自你麦克风端口的声音将在SSH目标计算机的扬声器端口输出，但遗憾的是，声音质量很差，你会听到很多嘶嘶声。</p>
<h2 id="比较远程和本地文件"><a href="#比较远程和本地文件" class="headerlink" title="比较远程和本地文件"></a>比较远程和本地文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@host cat /path/to/remotefile | diff /path/to/localfile –</div></pre></td></tr></table></figure>
<p>在比较本地文件和远程文件是否有差异时这个命令很管用。</p>
<h2 id="通过SSH挂载目录-文件系统"><a href="#通过SSH挂载目录-文件系统" class="headerlink" title="通过SSH挂载目录/文件系统"></a>通过SSH挂载目录/文件系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sshfs name@server:/path/to/folder /path/to/mount/point</div></pre></td></tr></table></figure>
<p>从<a href="http://fuse.sourceforge.net/sshfs.html下载sshfs，它允许你跨网络安全挂载一个目录。" target="_blank" rel="external">http://fuse.sourceforge.net/sshfs.html下载sshfs，它允许你跨网络安全挂载一个目录。</a></p>
<h2 id="通过中间主机建立SSH连接"><a href="#通过中间主机建立SSH连接" class="headerlink" title="通过中间主机建立SSH连接"></a>通过中间主机建立SSH连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -t reachable_host ssh unreachable_host</div></pre></td></tr></table></figure>
<p>Unreachable_host 表示从本地网络无法直接访问的主机，但可以从 reachable_host 所在网络访问，这个命令通过到 reachable_host 的“隐藏”连接，创建起到 unreachable_host 的连接。</p>
<h2 id="将你的SSH公钥复制到远程主机，开启无密码登录-–-简单的方法"><a href="#将你的SSH公钥复制到远程主机，开启无密码登录-–-简单的方法" class="headerlink" title="将你的SSH公钥复制到远程主机，开启无密码登录 – 简单的方法"></a>将你的SSH公钥复制到远程主机，开启无密码登录 – 简单的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id username@hostname</div></pre></td></tr></table></figure>
<h2 id="直接连接到只能通过主机B连接的主机A"><a href="#直接连接到只能通过主机B连接的主机A" class="headerlink" title="直接连接到只能通过主机B连接的主机A"></a>直接连接到只能通过主机B连接的主机A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -t hostA ssh hostB</div></pre></td></tr></table></figure>
<p>当然，你要能访问主机A才行。</p>
<h2 id="创建到目标主机的持久化连接"><a href="#创建到目标主机的持久化连接" class="headerlink" title="创建到目标主机的持久化连接"></a>创建到目标主机的持久化连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -MNf &lt;user&gt;@&lt;host&gt;</div></pre></td></tr></table></figure>
<p>在后台创建到目标主机的持久化连接，将这个命令和你~/.ssh/config中的配置结合使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host host</div><div class="line">ControlPath ~/.ssh/master-%r@%h:%p</div><div class="line">ControlMaster no</div></pre></td></tr></table></figure></p>
<p>所有到目标主机的SSH连接都将使用持久化SSH套接字，如果你使用SSH定期同步文件（使用rsync/sftp/cvs/svn），这个命令将非常有用，因为每次打开一个SSH连接时不会创建新的套接字。</p>
<h2 id="通过SSH连接屏幕"><a href="#通过SSH连接屏幕" class="headerlink" title="通过SSH连接屏幕"></a>通过SSH连接屏幕</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -t remote_host screen –r</div></pre></td></tr></table></figure>
<p>直接连接到远程屏幕会话（节省了无用的父bash进程）。</p>
<h2 id="端口检测（敲门）"><a href="#端口检测（敲门）" class="headerlink" title="端口检测（敲门）"></a>端口检测（敲门）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">knock &lt;host&gt; 3000 4000 5000 &amp;&amp; ssh -p &lt;port&gt; user@host &amp;&amp; knock &lt;host&gt; 5000 4000 3000</div></pre></td></tr></table></figure>
<p>在一个端口上敲一下打开某个服务的端口（如SSH），再敲一下关闭该端口，需要先安装knockd，下面是一个配置文件示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[options]</div><div class="line">logfile = /var/log/knockd.log</div><div class="line">[openSSH]</div><div class="line">sequence = 3000,4000,5000</div><div class="line">seq_timeout = 5</div><div class="line">command = /sbin/iptables -A INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT</div><div class="line">tcpflags = syn</div><div class="line">[closeSSH]</div><div class="line">sequence = 5000,4000,3000</div><div class="line">seq_timeout = 5</div><div class="line">command = /sbin/iptables -D INPUT -i eth0 -s %IP% -p tcp –dport 22 -j ACCEPT</div><div class="line">tcpflags = syn</div></pre></td></tr></table></figure>
<h2 id="删除文本文件中的一行内容，有用的修复"><a href="#删除文本文件中的一行内容，有用的修复" class="headerlink" title="删除文本文件中的一行内容，有用的修复"></a>删除文本文件中的一行内容，有用的修复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -R &lt;the_offending_host&gt;</div></pre></td></tr></table></figure>
<p>在这种情况下，最好使用专业的工具。</p>
<h2 id="通过SSH运行复杂的远程shell命令"><a href="#通过SSH运行复杂的远程shell命令" class="headerlink" title="通过SSH运行复杂的远程shell命令"></a>通过SSH运行复杂的远程shell命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh host -l user $(&lt;cmd.txt)</div></pre></td></tr></table></figure>
<p>更具移植性的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh host -l user “`cat cmd.txt`”</div></pre></td></tr></table></figure></p>
<h2 id="通过SSH将MySQL数据库复制到新服务器"><a href="#通过SSH将MySQL数据库复制到新服务器" class="headerlink" title="通过SSH将MySQL数据库复制到新服务器"></a>通过SSH将MySQL数据库复制到新服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost “mysql -uUSER -pPASS NEW_DB_NAME”</div></pre></td></tr></table></figure>
<p>通过压缩的SSH隧道Dump一个MySQL数据库，将其作为输入传递给mysql命令，我认为这是迁移数据库到新服务器最快最好的方法。</p>
<h2 id="删除文本文件中的一行，修复“SSH主机密钥更改”的警告"><a href="#删除文本文件中的一行，修复“SSH主机密钥更改”的警告" class="headerlink" title="删除文本文件中的一行，修复“SSH主机密钥更改”的警告"></a>删除文本文件中的一行，修复“SSH主机密钥更改”的警告</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i 8d ~/.ssh/known_hosts</div></pre></td></tr></table></figure>
<h2 id="从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器"><a href="#从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器" class="headerlink" title="从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器"></a>从一台没有SSH-COPY-ID命令的主机将你的SSH公钥复制到服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub | ssh user@machine “mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys”</div></pre></td></tr></table></figure>
<p>如果你使用Mac OS X或其它没有ssh-copy-id命令的*nix变种，这个命令可以将你的公钥复制到远程主机，因此你照样可以实现无密码SSH登录。</p>
<h2 id="实时SSH网络吞吐量测试"><a href="#实时SSH网络吞吐量测试" class="headerlink" title="实时SSH网络吞吐量测试"></a>实时SSH网络吞吐量测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yes | pv | ssh $host “cat &gt; /dev/null”</div></pre></td></tr></table></figure>
<p>通过SSH连接到主机，显示实时的传输速度，将所有传输数据指向/dev/null，需要先安装pv。</p>
<p>如果是Debian：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install pv</div></pre></td></tr></table></figure></p>
<p>如果是Fedora：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install pv</div></pre></td></tr></table></figure></p>
<p>（可能需要启用额外的软件仓库）。</p>
<h2 id="如果建立一个可以重新连接的远程GNU-screen"><a href="#如果建立一个可以重新连接的远程GNU-screen" class="headerlink" title="如果建立一个可以重新连接的远程GNU screen"></a>如果建立一个可以重新连接的远程GNU screen</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -t user@some.domain.com /usr/bin/screen –xRR</div></pre></td></tr></table></figure>
<p>人们总是喜欢在一个文本终端中打开许多shell，如果会话突然中断，或你按下了“Ctrl-a d”，远程主机上的shell不会受到丝毫影响，你可以重新连接，其它有用的screen命令有“Ctrl-a c”（打开新的shell）和“Ctrl-a a”（在shell之间来回切换），请访问阅读更多<a href="http://aperiodic.net/screen/quick_reference" target="_blank" rel="external">关于screen命令的快速参考</a>。</p>
<h2 id="继续SCP大文件"><a href="#继续SCP大文件" class="headerlink" title="继续SCP大文件"></a>继续SCP大文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file</div></pre></td></tr></table></figure>
<p>它可以恢复失败的rsync命令，当你通过VPN传输大文件，如备份的数据库时这个命令非常有用，需要在两边的主机上安装rsync。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync –partial –progress –rsh=ssh $file_source $user@$host:$destination_file local -&gt; remote</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync –partial –progress –rsh=ssh $user@$host:$remote_file $destination_file remote -&gt; local</div></pre></td></tr></table></figure></p>
<h2 id="通过SSH-W-WIRESHARK分析流量"><a href="#通过SSH-W-WIRESHARK分析流量" class="headerlink" title="通过SSH W/ WIRESHARK分析流量"></a>通过SSH W/ WIRESHARK分析流量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@server.com ‘tshark -f “port !22″ -w -&apos; | wireshark -k -i –</div></pre></td></tr></table></figure>
<p>使用tshark捕捉远程主机上的网络通信，通过SSH连接发送原始pcap数据，并在wireshark中显示，按下Ctrl+C将停止捕捉，但也会关闭wireshark窗口，可以传递一个“-c #”参数给tshark，让它只捕捉“#”指定的数据包类型，或通过命名管道重定向数据，而不是直接通过SSH传输给wireshark，我建议你过滤数据包，以节约带宽，tshark可以使用tcpdump替代：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@example.com tcpdump -w – ‘port !22′ | wireshark -k -i –</div></pre></td></tr></table></figure>
<h2 id="保持SSH会话永久打开"><a href="#保持SSH会话永久打开" class="headerlink" title="保持SSH会话永久打开"></a>保持SSH会话永久打开</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autossh -M50000 -t server.example.com ‘screen -raAd mysession’</div></pre></td></tr></table></figure>
<p>打开一个SSH会话后，让其保持永久打开，对于使用笔记本电脑的用户，如果需要在Wi-Fi热点之间切换，可以保证切换后不会丢失连接。</p>
<h2 id="更稳定，更快，更强的SSH客户端"><a href="#更稳定，更快，更强的SSH客户端" class="headerlink" title="更稳定，更快，更强的SSH客户端"></a>更稳定，更快，更强的SSH客户端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -4 -C -c blowfish-cbc</div></pre></td></tr></table></figure>
<p>强制使用IPv4，压缩数据流，使用Blowfish加密。</p>
<h2 id="使用cstream控制带宽"><a href="#使用cstream控制带宽" class="headerlink" title="使用cstream控制带宽"></a>使用cstream控制带宽</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -cj /backup | cstream -t 777k | ssh host ‘tar -xj -C /backup’</div></pre></td></tr></table></figure>
<p>使用bzip压缩文件夹，然后以777k bit/s速率向远程主机传输。Cstream还有更多的功能，请访问<a href="http://www.cons.org/cracauer/cstream.html#usage" target="_blank" rel="external">了解详情</a>，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo w00t, i’m 733+ | cstream -b1 -t2</div></pre></td></tr></table></figure></p>
<h2 id="一步将SSH公钥传输到另一台机器"><a href="#一步将SSH公钥传输到另一台机器" class="headerlink" title="一步将SSH公钥传输到另一台机器"></a>一步将SSH公钥传输到另一台机器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen; ssh-copy-id user@host; ssh user@host</div></pre></td></tr></table></figure>
<p>这个命令组合允许你无密码SSH登录，注意，如果在本地机器的~/.ssh目录下已经有一个SSH密钥对，ssh-keygen命令生成的新密钥可能会覆盖它们，ssh-copy-id将密钥复制到远程主机，并追加到远程账号的~/.ssh/authorized_keys文件中，使用SSH连接时，如果你没有使用密钥口令，调用ssh user@host后不久就会显示远程shell。</p>
<h2 id="将标准输入（stdin）复制到你的X11缓冲区"><a href="#将标准输入（stdin）复制到你的X11缓冲区" class="headerlink" title="将标准输入（stdin）复制到你的X11缓冲区"></a>将标准输入（stdin）复制到你的X11缓冲区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@host cat /path/to/some/file | xclip</div></pre></td></tr></table></figure>
<p>你是否使用scp将文件复制到工作用电脑上，以便复制其内容到电子邮件中？xclip可以帮到你，它可以将标准输入复制到X11缓冲区，你需要做的就是点击鼠标中键粘贴缓冲区中的内容。</p>
<p><a href="http://www.cnblogs.com/weafer/archive/2011/06/10/2077852.html" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenSSH是SSH连接工具的免费版本。telnet，rlogin和ftp用户可能还没意识到他们在互联网上传输的密码是未加密的，但SSH是加密的，OpenSSH加密所有通信（包括密码），有效消除了窃听，连接劫持和其它攻击。此外，OpenSSH提供了安全隧道功能和多种身份验证方法，支持SSH协议的所有版本。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Go-Http</title>
    <link href="http://blog.justwe.site/2017/04/26/go-http/"/>
    <id>http://blog.justwe.site/2017/04/26/go-http/</id>
    <published>2017-04-26T15:11:29.000Z</published>
    <updated>2017-04-26T16:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>用于了解 http 包的一些运行机制</p>
<a id="more"></a>
<h2 id="首先一个简单的例子"><a href="#首先一个简单的例子" class="headerlink" title="首先一个简单的例子"></a>首先一个简单的例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">  <span class="string">"net/http"</span></div><div class="line">  <span class="string">"strings"</span></div><div class="line">  <span class="string">"log"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhelloName</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">  r.ParseForm()                         <span class="comment">//解析参数,默认不解析</span></div><div class="line">  fmt.Println(r.Form)                   <span class="comment">//在终端中打印出表单内容</span></div><div class="line">  fmt.Println(<span class="string">"Path"</span>, r.URL.Path)</div><div class="line">  fmt.Println(<span class="string">"scheme"</span>, r.URL.Scheme)</div><div class="line">  fmt.Println(r.Form[<span class="string">"url_long"</span>])       <span class="comment">//输出指定的参数</span></div><div class="line">  <span class="keyword">for</span> k,v := <span class="keyword">range</span> r.Form&#123;              <span class="comment">//遍历打印出表单的值</span></div><div class="line">    fmt.Println(<span class="string">"key"</span>,k)</div><div class="line">    fmt.Println(<span class="string">"val"</span>, strings.Join(v, <span class="string">""</span>))</div><div class="line">  &#125;</div><div class="line">  fmt.Fprint(w, <span class="string">"hello gpf!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  http.HandleFunc(<span class="string">"/"</span>, sayhelloName)        <span class="comment">//绑定路由与方法</span></div><div class="line">  err := http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>)  <span class="comment">//监听 tcp:9090 端口</span></div><div class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    log.Fatal(<span class="string">"ListenAndServe: "</span>,err)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文件目录下 <code>go build http.go</code> <code>./http</code> 再直接访问<code>http://localhost:9090</code>就能看到页面了</p>
<h2 id="运行流程是什么呢"><a href="#运行流程是什么呢" class="headerlink" title="运行流程是什么呢?"></a>运行流程是什么呢?</h2><p>大体的运行流程是介样:</p>
<ol>
<li>创建 Listen Socket,监听 tcp 协议的 9090 端口,等待请求</li>
<li>收到请求后创建一个 client socket 去解析请求(request)</li>
<li>将请求内容交给 handle request 去处理,处理后返回给 client socket(handler)</li>
<li>client socket 收到后台的处理结果返回给用户(response)</li>
</ol>
<p>我们80%的逻辑都是在第3步内进行的,其他的已经有底层包帮我们实现了</p>
<h2 id="我们的路由绑定机制是怎么实现的"><a href="#我们的路由绑定机制是怎么实现的" class="headerlink" title="我们的路由绑定机制是怎么实现的?"></a>我们的路由绑定机制是怎么实现的?</h2><p>当走到以上的第3步的时候将会进入自己独立的 goroutine ,这也是用户访问互不影响的原因,<br>这一点和 nginx 很像,都是异步非阻塞的处理方式用来应对高并发</p>
<p>在最开始的例子当中我们绑定路由是直接将路由和函数指定了的,这里面发生了什么呢?<br>当调用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.HandleFunc(<span class="string">"/"</span>, sayhelloName)</div></pre></td></tr></table></figure></p>
<p>时 因为没有对监听函数传递第二个参数,传了个 nil 进去<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>)</div></pre></td></tr></table></figure></p>
<p>nil 的位置本应该是一个 handler,如果为空的话,将调用默认的 handler ,即 <code>DefaultServeMux</code>,<br>因为它实现了 <code>Handler</code> 接口所以能处理请求, <code>Handler</code>接口的内容是<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span>&#123;</div><div class="line">  ServeHTTP(ResponseWriter, *Request)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法就是我们的路由实现器,我们所有的路由指向的方法都是在这里处理的,</p>
<p>可是为什么我的<code>sayhelloName()</code>并没有实现 <code>Handler</code>的接口但还是正常运行了,这怎么回事呢?<br>这是因为 <code>http.HandleFunc()</code>帮你完成了这个接口的实现,<a href="https://gowalker.org/net/http#HandleFunc" target="_blank" rel="external">文档</a></p>
<h2 id="自己实现一个简易的路由"><a href="#自己实现一个简易的路由" class="headerlink" title="自己实现一个简易的路由"></a>自己实现一个简易的路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//设定一个空的接口体来承载接口</span></div><div class="line"><span class="keyword">type</span> MyMux <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//实现 Handler 接口,在这里处理路由相关的内容</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MyMux)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> r.URL.Path == <span class="string">"/"</span> &#123;</div><div class="line">		sayHello(w, r)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> r.URL.Path == <span class="string">"/login"</span> &#123;</div><div class="line">		loginPage(w, r)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	http.NotFound(w, r)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprint(w, <span class="string">"Hello route '/' !"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginPage</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">	fmt.Fprintf(w, <span class="string">"this is login page"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">//实例化结构体</span></div><div class="line">	mux := &amp;MyMux&#123;&#125;</div><div class="line">  <span class="comment">//当做 handler 注入到监听服务当中去</span></div><div class="line">	http.ListenAndServe(<span class="string">":9090"</span>, mux)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想自己实现路由的处理也可以这样试试,但是我不想平白的用一个空的 struct 去承载这个啊,<br>我们可以试试这个</p>
<h2 id="ServeMux"><a href="#ServeMux" class="headerlink" title="ServeMux"></a>ServeMux</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	mux := http.NewServeMux()</div><div class="line">	mux.HandleFunc(<span class="string">"/login"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">		fmt.Fprintf(w, <span class="string">"this is login page"</span>)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">		fmt.Fprintf(w, <span class="string">"hello your first page"</span>)</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	http.ListenAndServe(<span class="string">":9090"</span>, mux)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说了这么多其实还是云里雾里的,不过没关系,可以先放在这里,等用的多了自然也能想开了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用于了解 http 包的一些运行机制&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="http" scheme="http://blog.justwe.site/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Go-Comma-Switch</title>
    <link href="http://blog.justwe.site/2017/04/24/go-comma-switch/"/>
    <id>http://blog.justwe.site/2017/04/24/go-comma-switch/</id>
    <published>2017-04-24T14:52:37.000Z</published>
    <updated>2017-04-24T15:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍下 <code>comma-ok</code> 和 <code>switch</code> 用来判定变量类型<br><a id="more"></a><br>上篇博客介绍了接口,接口在实际应用中可以当做一个万用变量来用,可以用一个空接口来存储多种类型的变量<br>但是,当我们需要取出来用的时候就要头疼一下取出的到底是哪种类型的数据了</p>
<h2 id="comma-ok"><a href="#comma-ok" class="headerlink" title="comma-ok"></a>comma-ok</h2><p><code>value, ok := element.(type)</code>  element 就是我们要判断的变量,括号中是要判断的类型,<br>value 就是变量的值,ok 是 bool 类型,true||false</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Element <span class="keyword">interface</span>&#123;&#125; <span class="comment">//定义一个空接口</span></div><div class="line"><span class="keyword">type</span> List []Element      <span class="comment">//定义一个由空接口组成的数组类型</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">	age  <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"&lt; "</span> + p.name + <span class="string">"-"</span> + strconv.Itoa(p.age) + <span class="string">"years old /&gt;"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	list := <span class="built_in">make</span>(List, <span class="number">3</span>)</div><div class="line">	list[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">	list[<span class="number">1</span>] = <span class="string">"shakalaka"</span></div><div class="line">	list[<span class="number">2</span>] = Person&#123;<span class="string">"Gao"</span>, <span class="number">25</span>&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> index, element := <span class="keyword">range</span> list &#123;</div><div class="line">		<span class="keyword">if</span> value, ok := element.(<span class="keyword">int</span>); ok &#123;</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is int and value is %d \n"</span>, index, value)</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> value, ok := element.(<span class="keyword">string</span>); ok &#123;</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is string and value is %s \n"</span>, index, value)</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> value, ok := element.(Person); ok &#123;</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is Person and value is %s \n"</span>, index, value)</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is undefined"</span>, index)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就是调用 go 提供的内置函数, 在 php 当中就是 <code>is_null,is_array</code>这类的函数方法,<br>这种写法判定单个类型的时候比较方便,但是类型一多就会出现多个 <code>if-else</code> 这样很不优雅,<br>于是就有了下面的写法</p>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>用代码看是最直观的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Element <span class="keyword">interface</span>&#123;&#125; <span class="comment">//定义一个空接口</span></div><div class="line"><span class="keyword">type</span> List []Element      <span class="comment">//定义一个由空接口组成的数组类型</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">	name <span class="keyword">string</span></div><div class="line">	age  <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"&lt; "</span> + p.name + <span class="string">"-"</span> + strconv.Itoa(p.age) + <span class="string">"years old /&gt;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	list := <span class="built_in">make</span>(List, <span class="number">3</span>)</div><div class="line">	list[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">	list[<span class="number">1</span>] = <span class="string">"shakalaka"</span></div><div class="line">	list[<span class="number">2</span>] = Person&#123;<span class="string">"Gao"</span>, <span class="number">25</span>&#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> index, element := <span class="keyword">range</span> list &#123;</div><div class="line">		<span class="keyword">switch</span> value := element.(<span class="keyword">type</span>) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is int and value is %d \n"</span>, index, value)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is string and value is %s \n"</span>, index, value)</div><div class="line">		<span class="keyword">case</span> Person:</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is Person and value is %s \n"</span>, index, value)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			fmt.Printf(<span class="string">"list[%d] is undefined"</span>, index)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就能批量判定类型了<br><strong>这里需要注意一下</strong>, <code>element.(type)</code> 这种写法只能出现在 <code>switch</code> 当中,判定单个类型的时候<br>还是老实的用 <code>value , ok := element.(type)</code> 这种写法<br>看到这里我们发现其实调用的都是同一个内置函数,就是添加了一个 <code>switch</code> 这样的使用情景</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍下 &lt;code&gt;comma-ok&lt;/code&gt; 和 &lt;code&gt;switch&lt;/code&gt; 用来判定变量类型&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="comma-ok" scheme="http://blog.justwe.site/tags/comma-ok/"/>
    
      <category term="switch" scheme="http://blog.justwe.site/tags/switch/"/>
    
  </entry>
  
  <entry>
    <title>Go-Interface</title>
    <link href="http://blog.justwe.site/2017/04/19/go-interface/"/>
    <id>http://blog.justwe.site/2017/04/19/go-interface/</id>
    <published>2017-04-19T15:43:41.000Z</published>
    <updated>2017-04-24T14:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 go 语言接口的简单介绍<br><a id="more"></a><br>接口对于 go 实现面向对象来说非常重要,如果没有它 go 的结构体(struct)也就只能存储一些信息,<br>但是相关的方法将会变得非常麻烦</p>
<h2 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口?"></a>什么是接口?</h2><p>接口就是制定一个通用的规范,只要符合这个规范就能使用这个借口(听起来像是车轱辘话)</p>
<h2 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h2><p>比如我定义了一个接口<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> example <span class="keyword">interface</span>&#123;</div><div class="line">  a()</div><div class="line">  b()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>他定义了两个方法,只要有结构体中含有 <code>a()</code>,<code>b()</code>两个方法就能实现这个接口,通过接口来统一调用,<br>如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//package main</span></div><div class="line"><span class="comment">//import "fmt"</span></div><div class="line"></div><div class="line"><span class="comment">//定义一个基本的类</span></div><div class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span>&#123;</div><div class="line">  name  <span class="keyword">string</span></div><div class="line">  age   <span class="keyword">int</span></div><div class="line">  phone <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;</div><div class="line">  Human <span class="comment">//继承 human 中的字段</span></div><div class="line">  school <span class="keyword">string</span></div><div class="line">  loan   <span class="keyword">float32</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span>&#123;</div><div class="line">  Human</div><div class="line">  company <span class="keyword">string</span></div><div class="line">  money   <span class="keyword">float32</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Human 实现 Sayhi 方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Human)</span> <span class="title">Sayhi</span><span class="params">()</span></span>&#123;</div><div class="line">  fmt.Printf(<span class="string">"hi my name is %s and my phone is %s \n"</span>, h.name,h.phone)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Human 实现 Sing 方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Human)</span> <span class="title">Sing</span><span class="params">(lyrics <span class="keyword">string</span>)</span></span>  &#123;</div><div class="line">  fmt.Println(<span class="string">"galigaygay galigaygay ..."</span>,lyrics)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//student 复写 Sayhi 方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sdt Student)</span> <span class="title">Sayhi</span><span class="params">()</span></span>  &#123;</div><div class="line">  fmt.Printf(<span class="string">"my name is %s and my school is %s \n"</span>, sdt.name,sdt.school)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义一个通用的接口</span></div><div class="line"><span class="keyword">type</span> Men <span class="keyword">interface</span>&#123;</div><div class="line">  Sayhi()</div><div class="line">  Sing(lyrics <span class="keyword">string</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</div><div class="line">  <span class="comment">//实例化两种类</span></div><div class="line">  mike := Student&#123;Human&#123;<span class="string">"mike"</span>,<span class="number">25</span>,<span class="string">"18333636999"</span>&#125;,<span class="string">"MIT"</span>,<span class="number">3.14</span>&#125;</div><div class="line">  jack := Employee&#123;Human&#123;<span class="string">"jack"</span>,<span class="number">30</span>,<span class="string">"18333636998"</span>&#125;,<span class="string">"hotcast"</span>,<span class="number">20000</span>&#125;</div><div class="line"></div><div class="line">  <span class="comment">//定义一个接口变量</span></div><div class="line">  <span class="keyword">var</span> i Men</div><div class="line"></div><div class="line">  <span class="comment">//接口实现了 Student 类的方法</span></div><div class="line">  fmt.Println(<span class="string">"下面有请 mike 开始他的表演:"</span>)</div><div class="line">  i = mike</div><div class="line">  i.Sayhi();</div><div class="line">  i.Sing(<span class="string">"dongci daci"</span>)</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//接口实现了 Employee 类的方法</span></div><div class="line">  fmt.Println(<span class="string">"下面有请 mike 开始他的表演:"</span>)</div><div class="line">  i = jack</div><div class="line">  i.Sayhi();</div><div class="line">  i.Sing(<span class="string">"haha haha haha"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的 <code>Men</code> 接口被所有继承了<code>Human</code>的结构体的方法所实现,所以这些实例化的结构体可以赋值给<br><code>Men</code>的接口变量上,我们在 go 语言中的面向对象开发可以说就是面向接口在开发,由接口来组成一个个的<br>变量,<br>这和 php 的接口有所不同,在 php 中,接口是需要被 class 来继承,然后class 中去实现 interface 中<br>指定的方法,比如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Human</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sing</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Human</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span></span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span></span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样子的, 每个类需要指定继承哪些接口才可以去实现接口,而 go 和 php 正好相反,是谁实现了我的规范<br>谁就可以用我的接口,实现顺序正好倒过来了</p>
<h2 id="再举一个接口的例子"><a href="#再举一个接口的例子" class="headerlink" title="再举一个接口的例子"></a>再举一个接口的例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</div><div class="line">	name  <span class="keyword">string</span></div><div class="line">	age   <span class="keyword">int</span></div><div class="line">	phone <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里需要把 int 类型转换成字符串,否则使用 + 来连接字符的时候报数据类型不匹配的错误</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Human)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"&lt;"</span> + h.name + <span class="string">"-"</span> + strconv.Itoa(h.age) + <span class="string">"years old ,phone is "</span> + h.phone + <span class="string">"/&gt;"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	Duck := Human&#123;<span class="string">"duck"</span>, <span class="number">22</span>, <span class="string">"110-120-119"</span>&#125;</div><div class="line">	fmt.Println(<span class="string">"this human is :"</span>, Duck)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述例子当中我们实现了 <code>fmt.Println</code> 中的一个接口<br>```go<br>type Stringer interface {<br>  String() string<br>}</p>
<p>这样之后,调用 <code>Human</code> 的 String() 函数就能被 <code>fmt.Println()</code> 所用了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 go 语言接口的简单介绍&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="interface" scheme="http://blog.justwe.site/tags/interface/"/>
    
  </entry>
  
  <entry>
    <title>Go-Simple-Webserver-Demo</title>
    <link href="http://blog.justwe.site/2017/04/18/go-simple-webserver-demo/"/>
    <id>http://blog.justwe.site/2017/04/18/go-simple-webserver-demo/</id>
    <published>2017-04-18T15:25:04.000Z</published>
    <updated>2017-04-18T15:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>用 <code>go</code> 写的一个简单的 http 服务</p>
<a id="more"></a>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">  <span class="string">"net/http"</span></div><div class="line">  <span class="string">"strings"</span></div><div class="line">  <span class="string">"log"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayhelloName</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class="line">  r.ParseForm()                         <span class="comment">//解析参数,默认不解析</span></div><div class="line">  fmt.Println(r.Form)                   <span class="comment">//在终端中打印出表单内容</span></div><div class="line">  fmt.Println(<span class="string">"Path"</span>, r.URL.Path)</div><div class="line">  fmt.Println(<span class="string">"scheme"</span>, r.URL.Scheme)</div><div class="line">  fmt.Println(r.Form[<span class="string">"url_long"</span>])       <span class="comment">//输出指定的参数</span></div><div class="line">  <span class="keyword">for</span> k,v := <span class="keyword">range</span> r.Form&#123;              <span class="comment">//遍历打印出表单的值</span></div><div class="line">    fmt.Println(<span class="string">"key"</span>,k)</div><div class="line">    fmt.Println(<span class="string">"val"</span>, strings.Join(v, <span class="string">""</span>))</div><div class="line">  &#125;</div><div class="line">  fmt.Fprint(w, <span class="string">"hello gpf!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  http.HandleFunc(<span class="string">"/"</span>, sayhelloName)        <span class="comment">//绑定路由与方法</span></div><div class="line">  err := http.ListenAndServe(<span class="string">":9090"</span>, <span class="literal">nil</span>)  <span class="comment">//监听 tcp:9090 端口</span></div><div class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    log.Fatal(<span class="string">"ListenAndServe: "</span>,err)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打包运行之后访问 <code>http://localhost:9090/index?url_long=aa&amp;url_long=23445&amp;name=gpf</code> 将在页面和终端都有显示,前后台的逻辑也是在这里执行的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 &lt;code&gt;go&lt;/code&gt; 写的一个简单的 http 服务&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="webserver" scheme="http://blog.justwe.site/tags/webserver/"/>
    
  </entry>
  
  <entry>
    <title>Git-Submodule</title>
    <link href="http://blog.justwe.site/2017/04/11/git-submodule/"/>
    <id>http://blog.justwe.site/2017/04/11/git-submodule/</id>
    <published>2017-04-11T06:34:36.000Z</published>
    <updated>2017-05-08T14:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中经常会使用到第三方的 git 库,将三方库整合到项目中最简单的办法就是复制粘贴,但是如果这个库升级了一个很酷炫的功能,你要怎么整合进来呢?<br><a id="more"></a><br>这就是本次要介绍的 git-submodule 操作,直接把第三方的版本库合并到自己的库中.</p>
<h2 id="添加第三方库"><a href="#添加第三方库" class="headerlink" title="添加第三方库"></a>添加第三方库</h2><p>我这里是自己开了两个库做测试,主库叫 <code>body</code>,另一个库叫 <code>leg</code></p>
<p>首先在本地的<code>body</code>库中添加<code>leg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone https://git.oschina.net/gaofeifps/body.git</div><div class="line">cd body</div><div class="line">git submodule add https://git.oschina.net/gaofeifps/leg.git</div></pre></td></tr></table></figure></p>
<p>这时查看下状态会多两个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  body git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Your branch is ahead of &apos;origin/master&apos; by 1 commit.</div><div class="line">  (use &quot;git push&quot; to publish your local commits)</div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">       	new file:   .gitmodules</div><div class="line">       	new file:   leg</div></pre></td></tr></table></figure></p>
<p>这就多了一个 <code>leg</code>的库,和一个<code>.gitmodules</code>的文件,现在提交一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -am &quot;add leg&quot;</div></pre></td></tr></table></figure></p>
<h2 id="在其他地方使用合并后的版本库"><a href="#在其他地方使用合并后的版本库" class="headerlink" title="在其他地方使用合并后的版本库"></a>在其他地方使用合并后的版本库</h2><p>本地提交了版本之后可以提交到远程试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>这时去远程库中看的话库中的内容是这样的<br><img src="/images/git_module1.png" alt="img"><br>这里有个奇怪的 <code>leg @ 6dec2fa</code>,明明是没有的啊?<br>点一下原来是一个快捷方式,直接给连接到了 <code>leg</code>库的地址,版本库中不会存第三方引入库的实体文件,而是通过 <code>.gitmodules</code>的方式存储三方的联系方式,当下载到本地运行的时候才会再拉取文件</p>
<p>而且这个时候在其他的地方安装<code>body</code>这个库的时候直接运行 <code>git clone</code> 是生成不了完整的文件的,缺少了 <code>leg</code>库的文件<br>因为这个时候的 <code>body/leg</code>目录是空的需要多走一步,这时为什么呢?我们下面会讲到原因<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://git.oschina.net/gaofeifps/body.git</div><div class="line">git submodule init &amp;&amp; git submodule update</div><div class="line"></div><div class="line">#下面这一句的效果和上面三条命令的效果是一样的,多加了个参数  `--recursive`</div><div class="line">git clone https://git.oschina.net/gaofeifps/body.git --recursive</div></pre></td></tr></table></figure></p>
<p>这时才是一个完整的库</p>
<h2 id="将三方库同步到主线"><a href="#将三方库同步到主线" class="headerlink" title="将三方库同步到主线"></a>将三方库同步到主线</h2><p>之前的一些步骤其实还不完整,因为 <code>body/leg</code> 这个目录中的文件并没有和主线在一条线上,这也是为什么在远程库的 leg 目录是空的,因为在 master 分支里面它确实是空的,文件是在另一个分支上,我们先去看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd path/to/body/leg</div><div class="line">➜  leg git:(6dec2fa) git branch</div><div class="line">* (HEAD detached at 6dec2fa)</div><div class="line">  master</div></pre></td></tr></table></figure></p>
<p>别的文件的分支都是 <code>master</code> 到这个文件的时候就是 <code>6dec2fa</code>分支了,其实这个值也是 <code>leg</code>库当前的 commitId<br>而且如果不把第三方的库纳入自己的主线的话会非常的危险,因为你对项目中的三方库发生的任何改动都不会对主线产生任何影响,被主线遗忘了,因此我们还需要接下来的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd path/to/body/leg</div><div class="line">git checkout master</div></pre></td></tr></table></figure></p>
<h2 id="更新第三方库"><a href="#更新第三方库" class="headerlink" title="更新第三方库"></a>更新第三方库</h2><p>这里有个问题就是如果<code>body/leg</code>发生了更新就首先在这个文件中提交一个<code>commit</code>,然后在<code>body</code>这个目录下再 <code>commit</code>一次<br>第一次 commit 是为了更新 <code>leg</code>的版本控制,第二次更新是更新<code>body</code>的版本控制,同时更新 <code>leg</code>库在<code>body</code>的指针</p>
<p>如果更新的比较多,可以运行</p>
<h2 id="批量更新第三方库"><a href="#批量更新第三方库" class="headerlink" title="批量更新第三方库"></a>批量更新第三方库</h2><p>假设你的项目当中引入了100个第三方的库,你需要同步的时候难道还要每一个都要执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd module-dir/</div><div class="line">git checkout master</div><div class="line">git pull</div></pre></td></tr></table></figure></p>
<p>是不是想起了小学被老师罚抄一百遍的恐惧当中了?<br>少年,多看看文档准没错的,这些东西 git 早就帮你想好了<br>具体操作可以看一下<code>git help submodule</code>有相关的介绍的<br>不想看文档的就直接告诉你<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git submodule foreach &lt;command&gt;</div><div class="line">比如:</div><div class="line">git submodule foreach git checkout master</div></pre></td></tr></table></figure></p>
<p>这条命令就会按照 <code>.gitmodules</code>会根据<code>path</code>寻找所有的三方模块,并在每一个模块中都执行 <code>foreach</code> 后的命令,<br>比如你想批量更新模块到最新的时候就:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule foreach git submodule update</div></pre></td></tr></table></figure></p>
<h2 id="画个重点-敲黑板"><a href="#画个重点-敲黑板" class="headerlink" title="画个重点(敲黑板!)"></a>画个重点(敲黑板!)</h2><p>如果像让你引入的第三方库<code>leg</code>符合你自己的定制,你在里面发生了一些修改,但是这些修改并不能提交到远程去,因为你的提交会让第三方库的作者产生困扰:我写的好好的一个轮子你给定制成这样,还怎么去给其他的人用?</p>
<p>而且这个问题很严重,如果你本地的<code>leg</code>和<code>body</code>都更新了,但是 第三方的<code>leg</code>不能提交到远程,而<code>body</code>提交上去了,那么与你同使用一个版本库的小伙伴就会因为当前项目<code>leg</code>的指针地址找不到而产生报错</p>
<p>所以如果有定制的需要就得去<code>fork</code>这个项目到你自己的 github 上,然后自己想怎么折腾都随意了,但是怎么去既有定制,还能保持和轮子作者的版本同步呢?</p>
<h2 id="怎么保持与作者同步"><a href="#怎么保持与作者同步" class="headerlink" title="怎么保持与作者同步?"></a>怎么保持与作者同步?</h2><p>首先是自己有一个 fork 的三方项目,然后在自己本地添加一个三方的源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cd path/to/body/leg</div><div class="line">➜  leg git:(master) git remote -v</div><div class="line">origin 	https://git.oschina.net/gaofeifps/leg.git (fetch)</div><div class="line">origin 	https://git.oschina.net/gaofeifps/leg.git (push)</div><div class="line"></div><div class="line">#添加第三方包的源地址</div><div class="line">➜  leg git:(master) git remote add dist_source https://git.oschina.net/xxxx/leg.git</div><div class="line">➜  leg git:(master) git remote -v</div><div class="line">dist_source    	https://git.oschina.net/xxxx/leg.git (fetch) #这个是三方的源地址</div><div class="line">dist_source    	https://git.oschina.net/xxxx/leg.git (push)</div><div class="line">origin 	https://git.oschina.net/gaofeifps/leg.git (fetch)    #这个是你 fork 的项目地址</div><div class="line">origin 	https://git.oschina.net/gaofeifps/leg.git (push)</div></pre></td></tr></table></figure></p>
<p>这样的话可以拉取源文件到本地并合并本地代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull dist_source master</div></pre></td></tr></table></figure></p>
<p>修复一下版本冲突的文件,确认没有问题之后提交到自己 fork 的库中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p>这样其他人就能正常使用了</p>
<p>写了这么多忽然发现:还是复制粘贴比较省事啊!</p>
<p>那么</p>
<h2 id="怎么删除submodule"><a href="#怎么删除submodule" class="headerlink" title="怎么删除submodule?"></a>怎么删除submodule?</h2><p>在当前 git 版本<code>1.7.8</code>之前,删除指定的 submodule 的命令是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm &lt;submodule-name&gt;</div></pre></td></tr></table></figure></p>
<p>在新版的 git 下,则是运行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule deinit &lt;submodule-name&gt;</div></pre></td></tr></table></figure></p>
<p>查看本地有哪些三方模块可以查看 <code>.gitmodules</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  body git:(master) cat .gitmodules</div><div class="line">[submodule &quot;leg&quot;]</div><div class="line">       	path = leg</div><div class="line">       	url = https://git.oschina.net/gaofeifps/leg.git</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中经常会使用到第三方的 git 库,将三方库整合到项目中最简单的办法就是复制粘贴,但是如果这个库升级了一个很酷炫的功能,你要怎么整合进来呢?&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Npm-DTrace</title>
    <link href="http://blog.justwe.site/2017/04/10/npm-DTrace/"/>
    <id>http://blog.justwe.site/2017/04/10/npm-DTrace/</id>
    <published>2017-04-10T14:21:13.000Z</published>
    <updated>2017-04-10T14:37:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装<code>npm</code>模块的时候有时候会提示<code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings</code></p>
<a id="more"></a>
<p>虽然会正常运行但是总是报这个错也是很不爽的,查了下相关的 <a href="https://github.com/mcavage/node-ldapjs/issues/64" target="_blank" rel="external">issues</a><br>比较直接的解决方法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install dtrace-provider</div></pre></td></tr></table></figure></p>
<p>ubuntu 和 macos 上都有效</p>
<p>这是一个历史遗留的问题,开发者已经逐渐替代了这个模块,所以说影响不大,如果觉的终端总是报错很烦就这样试试吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装&lt;code&gt;npm&lt;/code&gt;模块的时候有时候会提示&lt;code&gt;Error: Cannot find module &amp;#39;./build/Release/DTraceProviderBindings&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Composer-Install</title>
    <link href="http://blog.justwe.site/2017/04/10/docker-composer-install/"/>
    <id>http://blog.justwe.site/2017/04/10/docker-composer-install/</id>
    <published>2017-04-10T14:14:01.000Z</published>
    <updated>2017-04-10T15:11:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装 <code>docker-composer</code><br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure></p>
<p>可能会有被墙的情况,可以找一下国内的云服务商,比如 <a href="https://download.daocloud.io/Docker_Mirror/Docker_Compose" target="_blank" rel="external">DaoCloud</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 &lt;code&gt;docker-composer&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="docker-composer" scheme="http://blog.justwe.site/tags/docker-composer/"/>
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Brew-Update</title>
    <link href="http://blog.justwe.site/2017/04/09/brew-update/"/>
    <id>http://blog.justwe.site/2017/04/09/brew-update/</id>
    <published>2017-04-09T15:36:54.000Z</published>
    <updated>2017-04-09T15:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>brew更新软件时常用的操作<br><a id="more"></a></p>
<h2 id="安装-brew"><a href="#安装-brew" class="headerlink" title="安装 brew"></a>安装 brew</h2><p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/Go/install)&quot;</code></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>brew search MySQL</code></p>
<h2 id="查看程序具体信息"><a href="#查看程序具体信息" class="headerlink" title="查看程序具体信息"></a>查看程序具体信息</h2><p><code>brew info mysql</code></p>
<h2 id="更新-brew"><a href="#更新-brew" class="headerlink" title="更新 brew"></a>更新 brew</h2><p><code>brew update</code></p>
<h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><p><code>brew upgrade mysql</code><br>如果不指定更新哪个则会更新所有可以更新的软件</p>
<h2 id="清理缓存-更新完后的操作"><a href="#清理缓存-更新完后的操作" class="headerlink" title="清理缓存(更新完后的操作)"></a>清理缓存(更新完后的操作)</h2><p><code>brew cleanup</code></p>
<h2 id="查看本地所有可更新的工具"><a href="#查看本地所有可更新的工具" class="headerlink" title="查看本地所有可更新的工具"></a>查看本地所有可更新的工具</h2><p><code>brew outdated</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;brew更新软件时常用的操作&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="brew" scheme="http://blog.justwe.site/tags/brew/"/>
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Yii-Multi-Database</title>
    <link href="http://blog.justwe.site/2017/04/08/yii-multi-database/"/>
    <id>http://blog.justwe.site/2017/04/08/yii-multi-database/</id>
    <published>2017-04-08T09:31:31.000Z</published>
    <updated>2017-04-09T13:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中经常会碰到多个数据库的情况,在 yii 中也是可以快速设置的<br><a id="more"></a><br>演示的版本是 basic 版,但是原理很好理解</p>
<h2 id="编辑配置文件-app-config-web-php"><a href="#编辑配置文件-app-config-web-php" class="headerlink" title="编辑配置文件 @app/config/web.php"></a>编辑配置文件 <code>@app/config/web.php</code></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="string">'db'</span> =&gt; <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/db.php'</span>), <span class="comment">//框架提供的一个默认连接</span></div><div class="line"><span class="string">'localDb'</span> =&gt; <span class="keyword">require</span>(<span class="keyword">__DIR__</span> . <span class="string">'/db2.php'</span>), <span class="comment">//这个是我们新加的一个连接配置</span></div><div class="line">......</div></pre></td></tr></table></figure>
<p>在同目录下的 <code>db2.php</code> 内容格式和 <code>db.php</code> 格式一样,只是连接不同</p>
<h2 id="修改-model-中需要使用的-connection-id"><a href="#修改-model-中需要使用的-connection-id" class="headerlink" title="修改 model 中需要使用的 connection id"></a>修改 model 中需要使用的 connection id</h2><p>这时再在想改的 model 中复写 <code>getDb()</code> 方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Members</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">db</span>\<span class="title">ActiveRecord</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@inheritdoc</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">tableName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'members'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> \yii\db\Connection the database connection used by this AR class.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDb</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Yii::$app-&gt;get(<span class="string">'localDb'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ......some functions.................</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个 model 中我们使用了 <code>localDb</code> 的链接配置,可以追踪代码 <code>\yii\db\ActiveRecord</code>中的 <code>getDb()</code> 方法,<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//in \yii\db\ActiveRecord</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Returns the database connection used by this AR class.</div><div class="line">    * By default, the "db" application component is used as the database connection.</div><div class="line">    * You may override this method if you want to use a different database connection.</div><div class="line">    * <span class="doctag">@return</span> Connection the database connection used by this AR class.</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDb</span><span class="params">()</span></span></div><div class="line">   &#123;</div><div class="line">       <span class="keyword">return</span> Yii::$app-&gt;getDb();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>有这么一段,既然已经显示出来 <code>Yii::$app</code> 这种核心的东西了,说明已经离那个<code>connection</code>容器已经不远了<br>再追踪到<code>getDb()</code> 显示的是 <code>$this-&gt;get(&#39;db&#39;)</code> 转换一下不就是默认使用的 <code>Yii::$app-&gt;get(&#39;db&#39;)</code> 吗? 于是回到最开始的 model 中,将其重写为 <code>Yii::$app-&gt;get(&#39;localDb&#39;)</code>,之后我们再使用这个 model 的时候就是使用的id 为<code>localDb</code>的 connection 单例了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中经常会碰到多个数据库的情况,在 yii 中也是可以快速设置的&lt;br&gt;
    
    </summary>
    
      <category term="yii2" scheme="http://blog.justwe.site/categories/yii2/"/>
    
    
      <category term="yii2" scheme="http://blog.justwe.site/tags/yii2/"/>
    
  </entry>
  
</feed>
