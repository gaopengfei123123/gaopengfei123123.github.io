<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;hello-world/&gt;</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justwe.site/"/>
  <updated>2017-12-02T16:15:35.459Z</updated>
  <id>http://blog.justwe.site/</id>
  
  <author>
    <name>GPF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sense-HAT Api 文档</title>
    <link href="http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/"/>
    <id>http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/</id>
    <published>2017-11-30T05:57:18.000Z</published>
    <updated>2017-12-02T16:15:35.459Z</updated>
    
    <content type="html"><![CDATA[<p>从官方给的 api 文档中硬翻的…<br><a id="more"></a></p><h1 id="LED-模型"><a href="#LED-模型" class="headerlink" title="LED 模型"></a>LED 模型</h1><h2 id="set-rotation-设置翻转角度"><a href="#set-rotation-设置翻转角度" class="headerlink" title="set_rotation 设置翻转角度"></a>set_rotation 设置翻转角度</h2><p>这个函数可以设置 led 的旋转角度</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0</code>,<code>90</code>,<code>180</code>,<code>270</code></td><td style="text-align:center"><code>0</code>指的是树莓派 HDMI 接口向下的方向</td></tr><tr><td style="text-align:center">redraw</td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">默认为 <code>TRUE</code></td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import sys</div><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">X = (255, 0, 0)</div><div class="line">O = (255, 255, 255)</div><div class="line"></div><div class="line">question_mark = [</div><div class="line">    O, O, O, X, X, O, O, O,</div><div class="line">    O, O, X, O, O, X, O, O,</div><div class="line">    O, O, O, O, O, X, O, O,</div><div class="line">    O, O, O, O, X, O, O, O,</div><div class="line">    O, O, O, X, O, O, O, O,</div><div class="line">    O, O, O, X, O, O, O, O,</div><div class="line">    O, O, O, O, O, O, O, O,</div><div class="line">    O, O, O, X, O, O, O, O</div><div class="line">]</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">sense.set_pixels(question_mark)</div><div class="line"></div><div class="line">sense.set_pixel(0, 0, 255, 0, 0)</div><div class="line">sense.set_pixel(0, 7, 0, 255, 0)</div><div class="line">sense.set_pixel(7, 0, 0, 0, 255)</div><div class="line">sense.set_pixel(7, 7, 255, 0, 255)</div><div class="line"></div><div class="line">def close_light():</div><div class="line">    black = [ [0,0,0] ] * 64</div><div class="line">    sense.set_pixels(black)</div><div class="line"></div><div class="line">try:</div><div class="line">    while True:</div><div class="line">        for r in [0, 90, 180, 270]:</div><div class="line">            sense.set_rotation(r)</div><div class="line">            time.sleep(0.3)</div><div class="line">except KeyboardInterrupt:</div><div class="line">    close_light()</div><div class="line">    print &quot;Good bye&quot;</div></pre></td></tr></table></figure></p><h2 id="set-pixels-批量设置像素点"><a href="#set-pixels-批量设置像素点" class="headerlink" title="set_pixels 批量设置像素点"></a>set_pixels 批量设置像素点</h2><p>改变64颗 led 的显示颜色</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>pixel_list</code></td><td style="text-align:center">List</td><td style="text-align:center"><code>[[R, G, B] * 64]</code></td><td style="text-align:center">需要提供 list 长度为64的二维数组, (r,g,b)为三原色的色值</td></tr></tbody></table><p>示例参考上一个示例</p><h2 id="get-pixels-获取当前像素点数组"><a href="#get-pixels-获取当前像素点数组" class="headerlink" title="get_pixels 获取当前像素点数组"></a>get_pixels 获取当前像素点数组</h2><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">将当前的 led 屏上显示的图像转换成list</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line"></div><div class="line">X = (255, 0, 0)</div><div class="line">O = (0, 0, 0)</div><div class="line">question_mark = [</div><div class="line">    O, X, O, O, O, O, X, O,</div><div class="line">    O, O, X, O, O, X, O, O,</div><div class="line">    O, X, X, X, X, X, X, O,</div><div class="line">    X, X, O, X, X, O, X, X,</div><div class="line">    X, X, X, X, X, X, X, X,</div><div class="line">    X, X, X, X, X, X, X, X,</div><div class="line">    O, X, O, O, O, O, X, O,</div><div class="line">    X, O, O, O, O, O, O, X</div><div class="line">]</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">sense.set_pixels(question_mark)</div><div class="line">out_list = sense.get_pixels()</div><div class="line">print out_list</div></pre></td></tr></table></figure></p><blockquote><p>提示:之所以有这个函数是因为传入<code>set_pixels</code>的像素值有时会发生变化,sense HAT 是将每个像素指定为<br>8 位数 (0-255) 但是如果传入 led 的 frameBuffer 中的时候,颜色的位数会转成 RGB565(5位红色,6位绿色和5位蓝色)<br>执行转换的时候可以看到二进制转换时发生的精度损失<br>get_pixels 就是显示像素在缓冲区内结束时的值</p></blockquote><h2 id="set-pixel-设置单点像素颜色"><a href="#set-pixel-设置单点像素颜色" class="headerlink" title="set_pixel 设置单点像素颜色"></a>set_pixel 设置单点像素颜色</h2><p>通过 x-y 坐标系来定位像素位置,以 HDMI 接口面向的位置为<code>下</code></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为左 7为右</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为上 7为下</td></tr><tr><td style="text-align:center">当只有三个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pixel</code></td><td style="text-align:center">Tuple / List</td><td style="text-align:center">0-255</td><td style="text-align:center">(r, g, b)    数值</td></tr><tr><td style="text-align:center">当有五个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">红</td></tr><tr><td style="text-align:center"><code>g</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">绿</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">蓝</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line"># examples using (x, y, r, g, b)</div><div class="line">sense.set_pixel(0, 0, 255, 0, 0)</div><div class="line">sense.set_pixel(0, 7, 0, 255, 0)</div><div class="line">sense.set_pixel(7, 0, 0, 0, 255)</div><div class="line">sense.set_pixel(7, 7, 255, 0, 255)</div><div class="line"></div><div class="line">red = (255, 0, 0)</div><div class="line">green = (0, 255, 0)</div><div class="line">blue = (0, 0, 255)</div><div class="line"></div><div class="line"># examples using (x, y, pixel)</div><div class="line">sense.set_pixel(0, 0, red)</div><div class="line">sense.set_pixel(0, 0, green)</div><div class="line">sense.set_pixel(0, 0, blue)</div></pre></td></tr></table></figure></p><h2 id="get-pixel-获取指定位置的颜色"><a href="#get-pixel-获取指定位置的颜色" class="headerlink" title="get_pixel 获取指定位置的颜色"></a>get_pixel 获取指定位置的颜色</h2><p>同 <code>get_pixels</code> 不过是单体版的</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为左 7为右</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为上 7为下</td></tr></tbody></table><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">[R,G,B] 组成的数组</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">top_left_pixel = sense.get_pixel(0, 0)</div></pre></td></tr></table></figure></p><h2 id="load-image-加载图像到矩阵中"><a href="#load-image-加载图像到矩阵中" class="headerlink" title="load_image 加载图像到矩阵中"></a>load_image 加载图像到矩阵中</h2><p>加载一个图像文件，将其转换为RGB格式，并在LED矩阵上显示。图像的大小必须是8×8像素。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>file_path</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">有效的图片路径</td></tr><tr><td style="text-align:center"><code>redraw</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>/<code>FALSE</code></td><td style="text-align:center">是否重绘已加载的图像文件在LED矩阵上。默认值为True</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.load_image(&quot;space_invader.png&quot;)</div></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">[[R,G,B] * 64] 组成的数组</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">invader_pixels = sense.load_image(&quot;space_invader.png&quot;, redraw=False)</div></pre></td></tr></table></figure><h2 id="clear-让-led-屏变成纯色-默认是关闭"><a href="#clear-让-led-屏变成纯色-默认是关闭" class="headerlink" title="clear 让 led 屏变成纯色,默认是关闭"></a>clear 让 led 屏变成纯色,默认是关闭</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">当只有一个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pixel</code></td><td style="text-align:center">Tuple / List</td><td style="text-align:center">0-255</td><td style="text-align:center">(r, g, b)    数值,默认为<code>[0,0,0]</code></td></tr><tr><td style="text-align:center">当有三个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">红</td></tr><tr><td style="text-align:center"><code>g</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">绿</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">蓝</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line">from time import sleep</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">red = (255, 0, 0)</div><div class="line"></div><div class="line">sense.clear()  # no arguments defaults to off</div><div class="line">sleep(1)</div><div class="line">sense.clear(red)  # passing in an RGB tuple</div><div class="line">sleep(1)</div><div class="line">sense.clear(255, 255, 255)  # passing in r, g and b values of a colour</div></pre></td></tr></table></figure></p><h2 id="show-message-屏幕显示单个文字"><a href="#show-message-屏幕显示单个文字" class="headerlink" title="show_message 屏幕显示单个文字"></a>show_message 屏幕显示单个文字</h2><p>就是街头广告灯的那种 led 滚屏啦!</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>text_string</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">将要滚屏的字母</td></tr><tr><td style="text-align:center"><code>scroll_speed</code></td><td style="text-align:center">Float</td><td style="text-align:center">任意浮点数</td><td style="text-align:center">滚屏速度,默认 0.1</td></tr><tr><td style="text-align:center"><code>text_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">文字颜色,默认[255,255,255]</td></tr><tr><td style="text-align:center"><code>back_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">背景颜色,默认[0,0,0]</td></tr></tbody></table><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.show_message(&quot;One small step for Pi!&quot;, text_colour=[255, 0, 0])</div></pre></td></tr></table></figure><h2 id="show-letter-单屏显示字母"><a href="#show-letter-单屏显示字母" class="headerlink" title="show_letter  单屏显示字母"></a>show_letter  单屏显示字母</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>s</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">将要显示的字母</td></tr><tr><td style="text-align:center"><code>text_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">文字颜色,默认[255,255,255]</td></tr><tr><td style="text-align:center"><code>back_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">背景颜色,默认[0,0,0]</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">letters = &quot;ABCDEFGHIJKLMNOPQRSTUVWSYZ&quot;</div><div class="line"></div><div class="line"></div><div class="line">for i in letters:</div><div class="line">    sense.show_letter(str(i))</div><div class="line">    time.sleep(1)</div></pre></td></tr></table></figure></p><h2 id="low-light-调低亮度"><a href="#low-light-调低亮度" class="headerlink" title="low_light  调低亮度"></a>low_light  调低亮度</h2><p>如果觉得亮度有点刺眼的话可以开低亮度模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.clear(255, 255, 255)</div><div class="line">sense.low_light = True</div><div class="line">time.sleep(2)</div><div class="line">sense.low_light = False</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.clear(255, 127, 0)</div><div class="line"></div><div class="line">sense.set_pixels(question_mark)</div><div class="line"></div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">old = sense.gamma</div><div class="line">sense.gamma = old[::-1]</div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line"></div><div class="line">sense.low_light = True</div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">sense.low_light = False</div></pre></td></tr></table></figure><h2 id="gamma"><a href="#gamma" class="headerlink" title="gamma"></a>gamma</h2><p>For advanced users. Most users will just need the low_light Boolean property above. The Sense HAT python API uses 8 bit (0 to 255) colours for R, G, B. When these are written to the Linux frame buffer they’re bit shifted into RGB 5 6 5. The driver then converts them to RGB 5 5 5 before it passes them over to the ATTiny88 AVR for writing to the LEDs.<br>The gamma property allows you to specify a gamma lookup table for the final 5 bits of colour used. The lookup table is a list of 32 numbers that must be between 0 and 31. The value of the incoming 5 bit colour is used to index the lookup table and the value found at that position is then written to the LEDs.</p><blockquote><p>对于高级用户。大多数用户只需要上面的low_light布尔属性。这个感觉帽python API使用8位(0到255)的颜色为R,G,b。当这些被写入Linux框架缓冲区时，它们被位转换为RGB 5 6 5。然后，驱动程序将它们转换为RGB 5 5 5，然后将其传递给ATTiny88 AVR以写入led。<br>gamma属性允许您为使用的最后5位颜色指定一个伽马查找表。查找表是32个数字的列表，它们必须在0到31之间。传入的5位颜色的值用于索引查找表，然后将该位置上发现的值写入led。<br>—来自有道词典,因为暂时不知道用在哪里</p></blockquote><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">长度为32的元组或列表，包含0到31之间的整数</td><td style="text-align:center">最后的5位颜色的查找表</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.clear(255, 127, 0)</div><div class="line"></div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">sense.gamma = sense.gamma[::-1]</div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">sense.low_light = True</div><div class="line">print(sense.gamma)</div><div class="line">time.sleep(2)</div><div class="line"></div><div class="line">sense.low_light = False</div></pre></td></tr></table></figure></p><h2 id="gamma-reset"><a href="#gamma-reset" class="headerlink" title="gamma_reset"></a>gamma_reset</h2><p>一个函数将gamma查找表重置为默认值，理想情况下，如果您已经对它进行了处理，并希望将它恢复到默认状态。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.clear(255, 127, 0)</div><div class="line">time.sleep(2)</div><div class="line">sense.gamma = [0] * 32  # Will turn the LED matrix off</div><div class="line">time.sleep(2)</div><div class="line">sense.gamma_reset()</div></pre></td></tr></table></figure></p><h1 id="环境感应器"><a href="#环境感应器" class="headerlink" title="环境感应器"></a>环境感应器</h1><h2 id="get-humidity-湿度"><a href="#get-humidity-湿度" class="headerlink" title="get_humidity 湿度"></a>get_humidity 湿度</h2><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">湿度的百分数</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">humidity = sense.get_humidity()</div><div class="line">print(&quot;Humidity: %s %%rH&quot; % humidity)  #Humidity: 13.8048038483 %rH</div><div class="line"></div><div class="line"># 同样效果</div><div class="line">print(sense.humidity)   #14.9011135101</div></pre></td></tr></table></figure></p><h2 id="get-temperature-温度"><a href="#get-temperature-温度" class="headerlink" title="get_temperature 温度"></a>get_temperature 温度</h2><p>返回值也是浮点数<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">temp = sense.get_temperature()</div><div class="line">print(&quot;Temperature: %s C&quot; % temp)   # Temperature: 33.0 C</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.temp)       # 33.0</div><div class="line">print(sense.temperature)    # 33.0</div></pre></td></tr></table></figure></p><h2 id="get-temperature-from-humidity-温度"><a href="#get-temperature-from-humidity-温度" class="headerlink" title="get_temperature_from_humidity 温度"></a>get_temperature_from_humidity 温度</h2><p>从湿度传感器获取当前温度(摄氏度)。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">temp = sense.get_temperature_from_humidity()</div><div class="line">print(&quot;Temperature: %s C&quot; % temp)</div></pre></td></tr></table></figure></p><h2 id="get-temperature-from-pressure-温度"><a href="#get-temperature-from-pressure-温度" class="headerlink" title="get_temperature_from_pressure 温度"></a>get_temperature_from_pressure 温度</h2><p>从压力传感器获取温度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">temp = sense.get_temperature_from_pressure()</div><div class="line">print(&quot;Temperature: %s C&quot; % temp)</div></pre></td></tr></table></figure></p><h2 id="get-pressure-压力"><a href="#get-pressure-压力" class="headerlink" title="get_pressure 压力"></a>get_pressure 压力</h2><p>获取压力参数</p><p>ps: 1Bar=0.1MPa=1000mba=1000hpa=100*7.5mmhg=75mmhg=1个大气压</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">单位为Millibars</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">pressure = sense.get_pressure()</div><div class="line">print(&quot;Pressure: %s Millibars&quot; % pressure)  #Pressure: 1024.56738281 Millibars</div><div class="line"></div><div class="line"># 同理</div><div class="line">print(sense.pressure)   # 1024.56738281</div></pre></td></tr></table></figure></p><h1 id="IMU-Sensor-惯性测量单元"><a href="#IMU-Sensor-惯性测量单元" class="headerlink" title="IMU Sensor 惯性测量单元"></a>IMU Sensor 惯性测量单元</h1><p>IMU(inertial measurement unit)传感器是三个传感器的组合，每个传感器分别有x、y和z轴。由于这个原因，它被认为是一个9自由度的传感器。</p><ul><li>陀螺仪(Gyroscope)</li><li>加速度计(Accelerometer)</li><li>指南针(Magnetometer)<br>这个API允许你在任何组合中使用这些传感器来测量方向或单独的传感器。</li></ul><h2 id="set-imu-config"><a href="#set-imu-config" class="headerlink" title="set_imu_config"></a>set_imu_config</h2><p>支持或禁用陀螺仪、加速度计和/或磁强计</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>compass_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用指南针</td></tr><tr><td style="text-align:center"><code>gyro_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用陀螺仪</td></tr><tr><td style="text-align:center"><code>accel_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用加速度计</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">sense.set_imu_config(False, True, False)  # 只开启陀螺仪</div></pre></td></tr></table></figure></p><h2 id="get-orientation-radians"><a href="#get-orientation-radians" class="headerlink" title="get_orientation_radians"></a>get_orientation_radians</h2><p>获取当前方向弧度,依据飞行器轴参数的  pitch, roll 和 yaw.<br><a href="https://segmentfault.com/a/1190000000408831" target="_blank" rel="external">理解传说中的roll、yaw、pitch</a><br><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="external">欧拉角</a></p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴弧度</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">orientation_rad = sense.get_orientation_radians()</div><div class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**orientation_rad)) # p: 0.0906969159842, r: -0.218863099813, y: 2.87161874771</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.orientation_radians) # &#123;&apos;yaw&apos;: 2.933598041534424, &apos;roll&apos;: -0.20759552717208862, &apos;pitch&apos;: 0.09733205288648605&#125;</div></pre></td></tr></table></figure></p><h2 id="get-orientation-degrees"><a href="#get-orientation-degrees" class="headerlink" title="get_orientation_degrees"></a>get_orientation_degrees</h2><p>以俯仰、翻滚和偏航的飞机主轴得到当前的方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">orientation = sense.get_orientation_degrees()</div><div class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**orientation)) # p: 359.368855623, r: 359.958133745, y: 24.4292643968</div></pre></td></tr></table></figure></p><h2 id="get-orientation"><a href="#get-orientation" class="headerlink" title="get_orientation"></a>get_orientation</h2><p>作用同<code>get_orientation_degrees</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">orientation = sense.get_orientation()</div><div class="line"></div><div class="line">print(sense.orientation) # &#123;&apos;yaw&apos;: 20.334569404489745, &apos;roll&apos;: 0.02406978340326997, &apos;pitch&apos;: 359.2895215347403&#125;</div></pre></td></tr></table></figure><h2 id="get-compass"><a href="#get-compass" class="headerlink" title="get_compass"></a>get_compass</h2><p>调用罗盘时会预先调用<code>set_imu_config</code>禁止掉重力计和加速度计的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">north = sense.get_compass()</div><div class="line">print(&quot;North: %s&quot; % north) # North: 351.031626941</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.compass) # 351.031626941</div></pre></td></tr></table></figure><h2 id="get-compass-raw"><a href="#get-compass-raw" class="headerlink" title="get_compass_raw"></a>get_compass_raw</h2><p>获取原始x、y和z轴的磁强计数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">字典对象索引的字符串x,y和z。表示磁场强度的值浮动轴的microteslas(µT)。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">raw = sense.get_compass_raw()</div><div class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw)) # x: 3.14855718613, y: 0.269534498453, z: -0.743863344193</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.compass_raw) # &#123;&apos;y&apos;: 0.4851621091365814, &apos;x&apos;: 5.667402744293213, &apos;z&apos;: -1.338953971862793&#125;</div></pre></td></tr></table></figure><h2 id="get-gyroscope"><a href="#get-gyroscope" class="headerlink" title="get_gyroscope"></a>get_gyroscope</h2><p>调用set_imu_config来禁用磁强计和加速计，然后只从陀螺仪获取当前方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">gyro_only = sense.get_gyroscope()</div><div class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**gyro_only))</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.gyro) # &#123;&apos;yaw&apos;: 0.0604013305118731, &apos;roll&apos;: 359.9494321175156, &apos;pitch&apos;: 359.9567423509234&#125;</div><div class="line">print(sense.gyroscope) # &#123;&apos;yaw&apos;: 0.0604013305118731, &apos;roll&apos;: 359.9494321175156, &apos;pitch&apos;: 359.9567423509234&#125;</div></pre></td></tr></table></figure><h2 id="get-gyroscope-raw"><a href="#get-gyroscope-raw" class="headerlink" title="get_gyroscope_raw"></a>get_gyroscope_raw</h2><p>获取原始x、y和z轴的陀螺仪数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">一个由字符串x、y和z索引的字典对象。这些值是按每秒弧度表示轴的旋转强度的浮点数。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">raw = sense.get_gyroscope_raw()</div><div class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw))</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.gyro_raw)</div><div class="line">print(sense.gyroscope_raw)</div><div class="line"></div><div class="line"># x: 1.03765261173, y: 2.46352291107, z: 0.185390725732</div><div class="line"># &#123;&apos;y&apos;: 1.5728815793991089, &apos;x&apos;: 0.34309887886047363, &apos;z&apos;: 0.2984008193016052&#125;</div><div class="line"># &#123;&apos;y&apos;: 0.8343454599380493, &apos;x&apos;: 0.163504496216774, &apos;z&apos;: 0.4767734408378601&#125;</div></pre></td></tr></table></figure><h2 id="get-accelerometer"><a href="#get-accelerometer" class="headerlink" title="get_accelerometer"></a>get_accelerometer</h2><p>调用set_imu_config来禁用磁力仪和陀螺仪，然后从加速度计得到当前的方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">accel_only = sense.get_accelerometer()</div><div class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**accel_only))</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.accel)</div><div class="line">print(sense.accelerometer)</div><div class="line"></div><div class="line"># p: 3.76471788135, r: 10.0814548376, y: 0.0</div><div class="line"># &#123;&apos;yaw&apos;: 4.5454772552392335e-07, &apos;roll&apos;: 10.082596332952239, &apos;pitch&apos;: 3.7639588765826475&#125;</div><div class="line"># &#123;&apos;yaw&apos;: 4.5454772552392335e-07, &apos;roll&apos;: 10.082596332952239, &apos;pitch&apos;: 3.7639588765826475&#125;</div></pre></td></tr></table></figure><h2 id="get-accelerometer-raw"><a href="#get-accelerometer-raw" class="headerlink" title="get_accelerometer_raw"></a>get_accelerometer_raw</h2><p>获取原始x、y和z轴加速度计数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">一个由字符串x、y和z索引的字典对象。这些值代表了在Gs中轴的加速度强度。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">raw = sense.get_accelerometer_raw()</div><div class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw))</div><div class="line"></div><div class="line"># alternatives</div><div class="line">print(sense.accel_raw)</div><div class="line">print(sense.accelerometer_raw)</div><div class="line"></div><div class="line"># x: -0.0634367614985, y: 0.172625526786, z: 0.974787354469</div><div class="line"># &#123;&apos;y&apos;: 0.1738394945859909, &apos;x&apos;: -0.06516461074352264, &apos;z&apos;: 0.9757621884346008&#125;</div><div class="line"># &#123;&apos;y&apos;: 0.17286831140518188, &apos;x&apos;: -0.06565827876329422, &apos;z&apos;: 0.9735689163208008&#125;</div></pre></td></tr></table></figure><h1 id="Joystick-操纵杆"><a href="#Joystick-操纵杆" class="headerlink" title="Joystick 操纵杆"></a>Joystick 操纵杆</h1><h2 id="操纵事件"><a href="#操纵事件" class="headerlink" title="操纵事件"></a>操纵事件</h2><p>描述操纵杆事件的元组。包含三个命名参数:</p><ul><li>时间戳—事件发生的时间，作为秒数(与内置时间函数相同的格式)</li><li>方向-操纵杆移动的方向，作为一个字符串(“向上”，“向下”，“左”，“右”，“中间”)</li><li>动作—发生的动作，作为一个字符串(“按压”，“释放”，“持有”)</li></ul><p>这个tuple类型被一些joystick方法使用，要么作为返回类型，要么是参数的类型。</p><h2 id="wait-for-event"><a href="#wait-for-event" class="headerlink" title="wait_for_event"></a>wait_for_event</h2><p>在发生<code>joystick</code>事件之前阻止执行，然后返回一个表示发生的事件的<code>InputEvent</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line">from time import sleep</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">event = sense.stick.wait_for_event()</div><div class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</div><div class="line">sleep(0.1)</div><div class="line">event = sense.stick.wait_for_event()</div><div class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</div></pre></td></tr></table></figure></p><p>在上面的例子中，如果你将操纵杆简单地推到一个单一的方向，你就会看到两个事件输出:一个被压的动作和一个释放的动作。可选的emptybuffer可以用于在等待新事件之前刷新任何未决事件。试试下面的脚本，看看有什么不同:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line">from time import sleep</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">event = sense.stick.wait_for_event()</div><div class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</div><div class="line">sleep(0.1)</div><div class="line">event = sense.stick.wait_for_event(emptybuffer=True)</div><div class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</div></pre></td></tr></table></figure></p><h2 id="get-events"><a href="#get-events" class="headerlink" title="get_events"></a>get_events</h2><p>返回自最后一次调用<code>get_events</code>或<code>wait_for_event</code>之后发生的所有事件的<code>InputEvent</code> tuple的列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line">while True:</div><div class="line">    for event in sense.stick.get_events():</div><div class="line">        print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</div></pre></td></tr></table></figure></p><h2 id="direction-up-direction-left-direction-right-direction-down-direction-middle-direction-any"><a href="#direction-up-direction-left-direction-right-direction-down-direction-middle-direction-any" class="headerlink" title="direction_up, direction_left, direction_right, direction_down, direction_middle, direction_any"></a>direction_up, direction_left, direction_right, direction_down, direction_middle, direction_any</h2><p>这些属性可以被分配一个函数，当操纵杆按在相关的方向(或者在<code>direction_any</code>的任何方向上)时，它就会被调用。分配的函数要么不接受参数，要么必须接受一个参数，该参数将传递给相关的<code>InputEvent</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from sense_hat import SenseHat, ACTION_PRESSED, ACTION_HELD, ACTION_RELEASED</div><div class="line">from signal import pause</div><div class="line"></div><div class="line">x = 3</div><div class="line">y = 3</div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">def clamp(value, min_value=0, max_value=7):</div><div class="line">    return min(max_value, max(min_value, value))</div><div class="line"></div><div class="line">def pushed_up(event):</div><div class="line">    global y</div><div class="line">    if event.action != ACTION_RELEASED:</div><div class="line">        y = clamp(y - 1)</div><div class="line"></div><div class="line">def pushed_down(event):</div><div class="line">    global y</div><div class="line">    if event.action != ACTION_RELEASED:</div><div class="line">        y = clamp(y + 1)</div><div class="line"></div><div class="line">def pushed_left(event):</div><div class="line">    global x</div><div class="line">    if event.action != ACTION_RELEASED:</div><div class="line">        x = clamp(x - 1)</div><div class="line"></div><div class="line">def pushed_right(event):</div><div class="line">    global x</div><div class="line">    if event.action != ACTION_RELEASED:</div><div class="line">        x = clamp(x + 1)</div><div class="line"></div><div class="line">def refresh():</div><div class="line">    sense.clear()</div><div class="line">    sense.set_pixel(x, y, 255, 255, 255)</div><div class="line"></div><div class="line">sense.stick.direction_up = pushed_up</div><div class="line">sense.stick.direction_down = pushed_down</div><div class="line">sense.stick.direction_left = pushed_left</div><div class="line">sense.stick.direction_right = pushed_right</div><div class="line">sense.stick.direction_any = refresh</div><div class="line">refresh()</div><div class="line">pause()</div></pre></td></tr></table></figure></p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><blockquote><p><a href="http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/">博客原文</a><br><a href="https://pythonhosted.org/sense-hat/api/" target="_blank" rel="external">api 原文</a><br><a href="https://projects.raspberrypi.org/en/projects/sense-hat-advent-calendar" target="_blank" rel="external">树莓派+senseHAT 的一个入门项目</a><br><a href="https://www.raspberrypi.org/learning/astro-pi-guide/" target="_blank" rel="external">来自官方的 astro-pi 简介</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从官方给的 api 文档中硬翻的…&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3安装 Sense HAT</title>
    <link href="http://blog.justwe.site/2017/11/29/Raspberry-pi3-install-sense-HAT/"/>
    <id>http://blog.justwe.site/2017/11/29/Raspberry-pi3-install-sense-HAT/</id>
    <published>2017-11-29T05:21:26.000Z</published>
    <updated>2017-11-29T05:50:31.198Z</updated>
    
    <content type="html"><![CDATA[<p>因为感觉各种感应器的 GPIO 有点乱,干脆买了一个官方提供的集成板来玩,这样看着也整体一些…<br><a id="more"></a></p><p>英文不错的同学出门右转:</p><blockquote><p><a href="https://www.raspberrypi.org/documentation/hardware/sense-hat/" target="_blank" rel="external">官方提供的一个说明</a><br><a href="https://pythonhosted.org/sense-hat/" target="_blank" rel="external">一个 sense-hat 的接口文档</a><br><a href="https://www.raspberrypi.org/documentation/hardware/sense-hat/images/Sense-HAT-V1_0.pdf" target="_blank" rel="external">各感应模块的针脚示意图</a></p></blockquote><h2 id="更新系统-Rasbian"><a href="#更新系统-Rasbian" class="headerlink" title="更新系统(Rasbian)"></a>更新系统(Rasbian)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt update &amp;&amp; sudo apt upgrade -y</div></pre></td></tr></table></figure><p>可能得等一大会儿….</p><h2 id="安装扩展模块"><a href="#安装扩展模块" class="headerlink" title="安装扩展模块"></a>安装扩展模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install sense-hat</div><div class="line">$ sudo reboot</div></pre></td></tr></table></figure><p>运行一个 demo,</p><blockquote><p><a href="https://github.com/RPi-Distro/python-sense-hat/tree/master/examples" target="_blank" rel="external">官方提供的一些 demo</a></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> sense_hat <span class="keyword">import</span> SenseHat</div><div class="line"></div><div class="line">sense = SenseHat()</div><div class="line"></div><div class="line">r = <span class="number">255</span></div><div class="line">g = <span class="number">0</span></div><div class="line">b = <span class="number">0</span></div><div class="line"></div><div class="line">msleep = <span class="keyword">lambda</span> x: time.sleep(x / <span class="number">1000.0</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_colour</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> r</div><div class="line">    <span class="keyword">global</span> g</div><div class="line">    <span class="keyword">global</span> b</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r == <span class="number">255</span> <span class="keyword">and</span> g &lt; <span class="number">255</span> <span class="keyword">and</span> b == <span class="number">0</span>):</div><div class="line">        g += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (g == <span class="number">255</span> <span class="keyword">and</span> r &gt; <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>):</div><div class="line">        r -= <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (g == <span class="number">255</span> <span class="keyword">and</span> b &lt; <span class="number">255</span> <span class="keyword">and</span> r == <span class="number">0</span>):</div><div class="line">        b += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (b == <span class="number">255</span> <span class="keyword">and</span> g &gt; <span class="number">0</span> <span class="keyword">and</span> r == <span class="number">0</span>):</div><div class="line">        g -= <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (b == <span class="number">255</span> <span class="keyword">and</span> r &lt; <span class="number">255</span> <span class="keyword">and</span> g == <span class="number">0</span>):</div><div class="line">        r += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r == <span class="number">255</span> <span class="keyword">and</span> b &gt; <span class="number">0</span> <span class="keyword">and</span> g == <span class="number">0</span>):</div><div class="line">        b -= <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    sense.clear([r, g, b])</div><div class="line">    msleep(<span class="number">2</span>)</div><div class="line">    next_colour()</div></pre></td></tr></table></figure><p>如果运行是出现下列报错的话:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;demo1.py&quot;, line 38, in &lt;module&gt;</div><div class="line">    sense.clear([r, g, b])</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/sense_hat/sense_hat.py&quot;, line 413, in clear</div><div class="line">    self.set_pixels([colour] * 64)</div><div class="line">  File &quot;/usr/lib/python2.7/dist-packages/sense_hat/sense_hat.py&quot;, line 294, in set_pixels</div><div class="line">    f.seek(map[index // 8][index % 8] * 2)  # row, column</div></pre></td></tr></table></figure></p><p>还是比较好解决的,更改配置就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /boot/config.txt</div><div class="line">//找到 dtoverlay 这一行修改成</div><div class="line">dtoverlay=rpi-sense</div><div class="line">//然后 wq 退出</div><div class="line">$ sudo reboot</div></pre></td></tr></table></figure></p><p>这是我第一次安装时碰到的问题</p><blockquote><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;t=173113" target="_blank" rel="external">解决方案来源</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为感觉各种感应器的 GPIO 有点乱,干脆买了一个官方提供的集成板来玩,这样看着也整体一些…&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派的一些报错问题</title>
    <link href="http://blog.justwe.site/2017/11/28/Raspberry-pi3-local-lang/"/>
    <id>http://blog.justwe.site/2017/11/28/Raspberry-pi3-local-lang/</id>
    <published>2017-11-28T06:50:49.000Z</published>
    <updated>2017-11-29T05:23:22.197Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派出现本地语言出现问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">perl: warning: Setting locale failed.</div><div class="line">perl: warning: Please check that your locale settings:</div><div class="line">LANGUAGE = <span class="string">"en_US.UTF-8"</span>,</div><div class="line">LC_ALL = <span class="string">"en_US.UTF-8"</span>,</div><div class="line">LC_CTYPE = <span class="string">"zh_CN.UTF-8"</span>,</div><div class="line">LANG = <span class="string">"en_US.UTF-8"</span></div><div class="line">    are supported and installed on your system.</div><div class="line">perl: warning: Falling back to the standard locale (<span class="string">"C"</span>).</div><div class="line">locale: Cannot <span class="built_in">set</span> LC_CTYPE to default locale: No such file or directory</div><div class="line">locale: Cannot <span class="built_in">set</span> LC_MESSAGES to default locale: No such file or directory</div><div class="line">locale: Cannot <span class="built_in">set</span> LC_ALL to default locale: No such file or directory</div><div class="line">/usr/sbin/dpkg-reconfigure must be run as root</div></pre></td></tr></table></figure></p><p>解决方法其实已经给出<br>运行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg-reconfigure locales</div></pre></td></tr></table></figure></p><p>设置 utf8 就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树莓派出现本地语言出现问题&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div
      
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上安装 Golang</title>
    <link href="http://blog.justwe.site/2017/11/22/Raspberry-Pi3-golang-env/"/>
    <id>http://blog.justwe.site/2017/11/22/Raspberry-Pi3-golang-env/</id>
    <published>2017-11-22T02:30:03.000Z</published>
    <updated>2017-11-22T03:27:46.208Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包,<br>在树莓派上一定要选<strong>linux-armv61</strong>这个版本啊</p><blockquote><p><a href="https://golang.org/dl/" target="_blank" rel="external">golang 各版本的下载列表</a></p></blockquote><a id="more"></a><p><code>$</code> 开头的都是在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-armv6l.tar.gz</div><div class="line">$ tar -C /usr/local -zvxf go1.8.3.linux-armv6l.tar.gz</div><div class="line">$cd / &amp;&amp; mkdir -p /data/www/go</div><div class="line">$ sudo vim /etc/profile</div><div class="line"></div><div class="line"># 在文件末尾添加如下内容</div><div class="line">export PATH=$PATH:/usr/local/go/bin</div><div class="line"># 添加如下设置项</div><div class="line">export GOROOT=/usr/local/go</div><div class="line">export GOPATH=/data/www/go</div><div class="line">export PATH=$GOROOT/bin:$PATH</div><div class="line"></div><div class="line">//保存退出后让环境变量立即生效</div><div class="line">$ source /etc/profile</div><div class="line">$ go version</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包,&lt;br&gt;在树莓派上一定要选&lt;strong&gt;linux-armv61&lt;/strong&gt;这个版本啊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;golang 各版本的下载列表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>用树莓派3搞一个信号灯输出</title>
    <link href="http://blog.justwe.site/2017/11/21/Raspberry-Pi3-traffic-light/"/>
    <id>http://blog.justwe.site/2017/11/21/Raspberry-Pi3-traffic-light/</id>
    <published>2017-11-21T06:26:24.000Z</published>
    <updated>2017-11-22T08:10:20.125Z</updated>
    
    <content type="html"><![CDATA[<p>通过一个<code>python</code>脚本跑一个监控 cpu 的交通信号灯,运行环境是官方的系统 <code>Raspbian</code></p><a id="more"></a><h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><p>有编程基础的同学就直接上手好了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># to use with Pi Traffic Light</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</div><div class="line"><span class="keyword">import</span> psutil</div><div class="line"></div><div class="line">GREEN = <span class="number">13</span></div><div class="line">YELLOW = <span class="number">19</span></div><div class="line">RED = <span class="number">26</span></div><div class="line"></div><div class="line"><span class="comment"># Pin Setup:</span></div><div class="line">GPIO.setmode(GPIO.BCM)   <span class="comment"># Broadcom pin-numbering scheme.</span></div><div class="line">GPIO.setwarnings(<span class="keyword">False</span>)</div><div class="line">GPIO.setup(GREEN, GPIO.OUT)</div><div class="line">GPIO.setup(YELLOW, GPIO.OUT)</div><div class="line">GPIO.setup(RED, GPIO.OUT)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">   <span class="keyword">while</span> (<span class="number">1</span>):</div><div class="line">      cpu_pc = psutil.cpu_percent(interval=<span class="number">2</span>)</div><div class="line">      <span class="keyword">print</span> <span class="string">'CPU: %d%%'</span> % (cpu_pc)</div><div class="line">      <span class="keyword">if</span> cpu_pc &lt;= <span class="number">50</span>:</div><div class="line">         GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(GREEN, <span class="keyword">True</span>)</div><div class="line">      <span class="keyword">if</span> <span class="number">50</span> &lt; cpu_pc &lt; <span class="number">90</span>:</div><div class="line">         GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(YELLOW, <span class="keyword">True</span>)</div><div class="line">      <span class="keyword">if</span> cpu_pc &gt;=<span class="number">90</span> :</div><div class="line">         GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">         GPIO.output(RED, <span class="keyword">True</span>)</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Good bye"</span></div><div class="line">    GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">    GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">    GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">    GPIO.cleanup()</div></pre></td></tr></table></figure><ul><li>如果出现提示<code>****line 5, in &lt;module&gt; import psutil*****</code> 提示缺少<code>psutil</code>模块,就按照下面的<br>方法安装:<blockquote><p><a href="http://m.blog.csdn.net/ronsarah/article/details/74629950" target="_blank" rel="external">代码原文</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://pypi.python.org/packages/source/p/psutil/psutil-3.2.2.tar.gz</div><div class="line">cd psutil-3.2.2</div><div class="line">python setup.py install</div></pre></td></tr></table></figure></blockquote></li></ul><p>如果报错检查 gcc,python-devel 是否安装(官方系统的话会把这些环境默认安装好,不用管的)</p><h1 id="针脚怎么插"><a href="#针脚怎么插" class="headerlink" title="针脚怎么插?"></a>针脚怎么插?</h1><p>软件方面的搞定了,接下来需要搞明白怎么配置硬件了,这是树莓派系列的针脚图(咱们这是3代,最右边的那个):<br><img src="http://blog-image.onlyoneip.com/20160807030334648" alt="树莓派针脚"><br>我又从网上找的一张实物图<br><img src="http://blog-image.onlyoneip.com/WX20171121-153100@2x.png" alt="树莓派实物图"><br>这是我淘来的信号灯<br><img src="http://blog-image.onlyoneip.com/WechatIMG567.jpeg" alt="信号灯"><br>这两个都是针脚型的,但是我有一个40针脚的扁平线可以用来对接,按照信号灯指定的端口插就行</p><p>插好以后就直接运行脚本就行比如这个脚本叫做 <code>traffic.py</code>,就运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python ./traffic.py</div></pre></td></tr></table></figure></p><p>就能看到效果</p><h1 id="代码都做了什么"><a href="#代码都做了什么" class="headerlink" title="代码都做了什么?"></a>代码都做了什么?</h1><ol><li><p>引入需要用到的模块, <code>RPi.GPIO</code>针脚输出,<code>psutil</code>用于系统监控</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># to use with Pi Traffic Light</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</div><div class="line"><span class="keyword">import</span> psutil</div></pre></td></tr></table></figure></li><li><p>定义三个灯输出的针脚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GREEN = <span class="number">13</span></div><div class="line">YELLOW = <span class="number">19</span></div><div class="line">RED = <span class="number">26</span></div></pre></td></tr></table></figure></li><li><p>对指定的针脚进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Pin Setup:</span></div><div class="line">GPIO.setmode(GPIO.BCM)   </div><div class="line">GPIO.setwarnings(<span class="keyword">False</span>)</div><div class="line">GPIO.setup(GREEN, GPIO.OUT)</div><div class="line">GPIO.setup(YELLOW, GPIO.OUT)</div><div class="line">GPIO.setup(RED, GPIO.OUT)</div></pre></td></tr></table></figure><ul><li>这里的 <code>GPIO.setmode(GPIO.BCM)</code>就是指定了输出模式为按照信道编号,就是上图中的<code>GPIO2,GPIO3...</code>这类<br>如果<code>GPIO.setmode(GPIO.BOARD)</code>就是<code>Pin No.1 =&gt; GPIO1</code>,使用物理针脚的编号作为输出信道</li><li><code>GPIO.setwarnings(False)</code> 关闭warning 提示</li><li><code>GPIO.setup(GREEN, GPIO.OUT)</code> 将对应的信道设置为输出信道</li></ul></li><li><p>通过 while 循环检索 cpu 的使用情况并输出,且根据所占百分比显示相应的灯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="number">1</span>):</div><div class="line">   cpu_pc = psutil.cpu_percent(interval=<span class="number">2</span>)</div><div class="line">   <span class="keyword">print</span> <span class="string">'CPU: %d%%'</span> % (cpu_pc)</div><div class="line">   <span class="keyword">if</span> cpu_pc &lt;= <span class="number">50</span>:</div><div class="line">      GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(GREEN, <span class="keyword">True</span>)</div><div class="line">   <span class="keyword">if</span> <span class="number">50</span> &lt; cpu_pc &lt; <span class="number">90</span>:</div><div class="line">      GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(YELLOW, <span class="keyword">True</span>)</div><div class="line">   <span class="keyword">if</span> cpu_pc &gt;=<span class="number">90</span> :</div><div class="line">      GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">      GPIO.output(RED, <span class="keyword">True</span>)</div></pre></td></tr></table></figure><ul><li><code>GPIO.output(GREEN, False)</code>和<code>GPIO.output(GREEN, True)</code>猜都能猜到是控制输出的啦</li></ul></li><li><p>对于程序退出的操作:把灯全关了,再调用<code>GPIO.cleanup()</code>释放资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line"></div><div class="line">    // some code....</div><div class="line"></div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Good bye"</span></div><div class="line">    GPIO.output(GREEN, <span class="keyword">False</span>)</div><div class="line">    GPIO.output(YELLOW, <span class="keyword">False</span>)</div><div class="line">    GPIO.output(RED, <span class="keyword">False</span>)</div><div class="line">    GPIO.cleanup()</div></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个 demo 只是对 GPIO 的输出进行展示,还没涉及到信号输入,接下来<strong>如果有空</strong>的话我会做一个输入的 demo</p><p><a href="http://itindex.net/detail/55339-%E6%9E%81%E5%AE%A2-%E6%89%8B%E6%8A%8A-%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="external">相关-极客大讲堂：手把手教你用树莓派控制红绿灯</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一个&lt;code&gt;python&lt;/code&gt;脚本跑一个监控 cpu 的交通信号灯,运行环境是官方的系统 &lt;code&gt;Raspbian&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>转 烧录树莓派系统(新手版)</title>
    <link href="http://blog.justwe.site/2017/11/21/Raspberry-Pi3-install/"/>
    <id>http://blog.justwe.site/2017/11/21/Raspberry-Pi3-install/</id>
    <published>2017-11-21T06:24:29.000Z</published>
    <updated>2017-11-22T09:07:59.308Z</updated>
    
    <content type="html"><![CDATA[<p>怎么在 mac 上给 TF 卡烧录一个树莓派系统(为什么没有 win 的?因为 win 上的烧录软件很好用啊!混蛋!)</p><a id="more"></a><h1 id="下载树莓派镜像"><a href="#下载树莓派镜像" class="headerlink" title="下载树莓派镜像"></a>下载树莓派镜像</h1><p>首先需要下载个系统镜像</p><blockquote><p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">官方镜像列表</a></p></blockquote><ul><li>RASPBIAN :这是树莓派为自己定制的系统,基于 Debian,原生支持最好,新手强烈推荐桌面版的</li><li>UBUNTU MATE :ubuntu 的 mate 版本,习惯使用 ubuntu 的选这个</li><li>SNAPPY UBUNTU CORE :仅包含 ubuntu 16.04 内核的版本,如果做 IoT 的据说用这个很不错,但是如果做网络服务器不咋好用<br>其他的比如 WIN10 的这种有需要的自取</li></ul><h1 id="格式化-TF-卡"><a href="#格式化-TF-卡" class="headerlink" title="格式化 TF 卡"></a>格式化 TF 卡</h1><p>先用读卡机器插到 mac 上,用系统自带的 <code>磁盘工具</code> 格式化一下 tf 卡,选择抹掉,格式为<code>MS-DOS(FAT)</code>,名字随便,写完系统就没用了</p><p>打开 <code>终端</code> 使用<code>df</code>名称查看当前已挂载的卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ df</div><div class="line">Filesystem    512-blocks      Used Available Capacity  iused   ifree %iused  Mounted on</div><div class="line">/dev/disk1     233269248 218788512  13968736    94% 27412562 1746092   94%   /</div><div class="line">devfs                374       374         0   100%      648       0  100%   /dev</div><div class="line">map -hosts             0         0         0   100%        0       0  100%   /net</div><div class="line">map auto_home          0         0         0   100%        0       0  100%   /home</div><div class="line">/dev/disk2s1    31100416      4992  31095424     1%        0       0  100%   /Volumes/Pi</div></pre></td></tr></table></figure></p><p>基本商最后一行就是你的 tf 卡,/Volumes/Pi 这个 Pi 就是刚才格式化 tf 卡的时候输入的名字</p><p>使用diskutil unmount卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ diskutil unmount /dev/disk2s1</div><div class="line">Volume Pi on disk2s1 unmounted</div></pre></td></tr></table></figure></p><p>diskutil list 确认设备,这里是 16G 的卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ diskutil list</div><div class="line">/dev/disk2</div><div class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</div><div class="line">   0:     FDisk_partition_scheme                        *15.9 GB    disk2</div><div class="line">   1:                 DOS_FAT_32 Pi                      15.9 GB    disk2s1</div></pre></td></tr></table></figure></p><p>进入你下载好镜像文件的目录下,使用 <code>dd</code> 命令将镜像写入</p><blockquote><p>PS /dev/disk2s1是分区，/dev/disk2是块设备，/dev/rdisk2是原始字符设备</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ dd bs=4m if=2017-09-07-raspbian-stretch.img of=/dev/rdisk2</div><div class="line">781+1 records in</div><div class="line">781+1 records out</div><div class="line">3276800000 bytes transferred in 194.134151 secs (16879050 bytes/sec)</div></pre></td></tr></table></figure><p><code>if</code>后是镜像的地址,如果是当前目录地址的话直接输入文件名就行, <code>of</code>就是要写入的设备,执行的时候会感觉卡一会,大概30s,正常现象<br>这时候这张 tf 卡就算是烧录好系统了,插到派上启动就行</p><p>这个时候你需要鼠标,键盘,有 hdmi 的显示器,插上 pi 就能启动了,可以在左上角菜单中<code>preference</code>中进行各种设置了,在界面可以很方便的设置 wifi<br>使用网线插入路由器的话,可以在路由器的管理界面中找到设备名,默认设备名为<code>raspberry</code><br>进行 ssh 链接,用户命是 <code>pi</code>,密码 <code>raspberry</code>,或者你自己设置的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@192.168.66.207</div></pre></td></tr></table></figure></p><p><a href="https://github.com/ccforward/cc/issues/25" target="_blank" rel="external">转载原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怎么在 mac 上给 TF 卡烧录一个树莓派系统(为什么没有 win 的?因为 win 上的烧录软件很好用啊!混蛋!)&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>转 Json移除非法 Utf8字符串</title>
    <link href="http://blog.justwe.site/2017/11/08/php-json-error/"/>
    <id>http://blog.justwe.site/2017/11/08/php-json-error/</id>
    <published>2017-11-08T03:17:21.000Z</published>
    <updated>2017-11-08T03:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>当 json_decode 解析为 <code>null</code> 的时候怎么处理</li><li>当 json 中出现非法 utf8 时怎么处理</li></ul><a id="more"></a><h3 id="失败时返回NULL"><a href="#失败时返回NULL" class="headerlink" title="失败时返回NULL"></a>失败时返回NULL</h3><p>当返回 <code>null</code> 的时候,可以用<code>json_last_error()</code>根据返回码来判断</p><p><strong>如果 php 版本过低的话将会出现错误码反馈不全的问题</strong>,返回值是<code>JSON_ERROR_NONE (0)</code><br>这是示例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//  $json = '&#123;"a":1,"b":2,"c":3,"d":4,"e":5, "name":"Corwien"&#125;';</span></div><div class="line">$json = <span class="string">'&#123;"a":1,"b":2,"c":3,"d":4,"e":5, "name":&#125;'</span>;  <span class="comment">//错误的json格式</span></div><div class="line">$result = json_decode($json, <span class="keyword">true</span>);</div><div class="line"> <span class="keyword">if</span>(!$result)</div><div class="line"> &#123;</div><div class="line">       <span class="comment">//error handle ,错误处理</span></div><div class="line">       $ret = json_last_error();</div><div class="line">       print_r($ret);   <span class="comment">//打印为： 4,查错误信息表，可知是语法错误</span></div><div class="line"></div><div class="line"> &#125;   </div><div class="line"></div><div class="line">json_last_error错误msg对照表：</div><div class="line"><span class="number">0</span> = JSON_ERROR_NONE</div><div class="line"><span class="number">1</span> = JSON_ERROR_DEPTH</div><div class="line"><span class="number">2</span> = JSON_ERROR_STATE_MISMATCH</div><div class="line"><span class="number">3</span> = JSON_ERROR_CTRL_CHAR</div><div class="line"><span class="number">4</span> = JSON_ERROR_SYNTAX</div><div class="line"><span class="number">5</span> = JSON_ERROR_UTF8</div></pre></td></tr></table></figure></p><h3 id="如何处理json中的非法utf8字符"><a href="#如何处理json中的非法utf8字符" class="headerlink" title="如何处理json中的非法utf8字符"></a>如何处理json中的非法utf8字符</h3><p>如果出现 <code>JSON_ERROR_SYNTAX</code> 这个错误码的时候,常见的要么是其中的双引号单引号问题,要么是<br>出现了 <code>/r/n</code>之类的结尾问题,还有一种比较烦的情况就是错误的 utf8编码</p><p>解决问题:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reject overly long 2 byte sequences, as well as characters above U+10000 and replace with ?</span></div><div class="line">$some_string = preg_replace(<span class="string">'/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]'</span>.</div><div class="line"> <span class="string">'|[\x00-\x7F][\x80-\xBF]+'</span>.</div><div class="line"> <span class="string">'|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*'</span>.</div><div class="line"> <span class="string">'|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]&#123;2,&#125;)'</span>.</div><div class="line"> <span class="string">'|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]&#123;2&#125;)|[\x80-\xBF]&#123;3,&#125;)/S'</span>,</div><div class="line"> <span class="string">'?'</span>, $some_string );</div><div class="line"></div><div class="line"><span class="comment">//reject overly long 3 byte sequences and UTF-16 surrogates and replace with ?</span></div><div class="line">$some_string = preg_replace(<span class="string">'/\xE0[\x80-\x9F][\x80-\xBF]'</span>.</div><div class="line"> <span class="string">'|\xED[\xA0-\xBF][\x80-\xBF]/S'</span>,<span class="string">'?'</span>, $some_string );</div></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000006154011" target="_blank" rel="external">原文</a><br><a href="https://magp.ie/2011/01/06/remove-non-utf8-characters-from-string-with-php/" target="_blank" rel="external">utf8代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;当 json_decode 解析为 &lt;code&gt;null&lt;/code&gt; 的时候怎么处理&lt;/li&gt;
&lt;li&gt;当 json 中出现非法 utf8 时怎么处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Js Promise 对象</title>
    <link href="http://blog.justwe.site/2017/10/31/js-promise/"/>
    <id>http://blog.justwe.site/2017/10/31/js-promise/</id>
    <published>2017-10-31T15:11:45.000Z</published>
    <updated>2017-11-05T13:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们本次要了解一下 es6 中的 Promise 对象</p><a id="more"></a><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><p>在 ES6 中函数有一个很明显的区别就是一些异步函数中不再是使用回调函数<code>callback()</code>,而是<code>then()</code><br>方法来进行回调后的处理,这里<code>then()</code>就是我们今天要说的<code>Promise()</code>对象所包含的方法<br>举个例子:<br>使用回调函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"It succeeded with "</span> + result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">failureCallback</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"It failed with "</span> + error);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">success,error</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'result is :'</span> + num);</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(num &gt; <span class="number">5</span>)&#123;</div><div class="line">    success(<span class="string">'yes'</span>);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    error(<span class="string">'no'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething(successCallback, failureCallback);</div></pre></td></tr></table></figure></p><p>使用 Promise 对象:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"It succeeded with "</span> + result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">failureCallback</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"It failed with "</span> + error);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">standard</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'result is :'</span> + num);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(num &gt; standard)&#123;</div><div class="line">      resolve(<span class="string">'yes'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      reject(<span class="string">'no'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">doSomething(<span class="number">5</span>).then(successCallback).catch(failureCallback);</div></pre></td></tr></table></figure></p><p><code>resolve</code> 和 <code>reject</code> 这两个函数是系统提供的内置函数,负责改变<code>Promise</code>的状态<br>这样的写法和之前没什么大变化,但是代码的表达方式更清晰了,而不是在一层层的 callback 中寻找执行<br>的节点, <code>then()</code>方法也可以有第二个参数,第二个参数代表着失败时要执行的函数,以上面的例子来说:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doSomething(<span class="number">5</span>).then(successCallback,failureCallback);</div></pre></td></tr></table></figure></p><p>这样写也是没差,但是使用 <code>catch()</code> 我感觉是一种更优的选择,原因我后面再说</p><p>这里是一个图片异步加载的例子:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">  <span class="keyword">let</span> url = <span class="string">'http://wx3.sinaimg.cn/thumb150/9ccb8305ly1fd09eeednzg208q07wh0l.gif'</span>;</div><div class="line">  loadImageAsync(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</div><div class="line">    content.appendChild(res);</div><div class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</div><div class="line">    content.innerHTML = error;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line"></div><div class="line">      image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'图片已加载'</span>);</div><div class="line">        resolve(image);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'图片加载失败'</span>);</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'load image :'</span> + url + <span class="string">' false'</span>))</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'加载图片'</span>);</div><div class="line">      image.src = url;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接下来是一个实现了 ajax 请求的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里.then()中可以返回一个全新的 Promise 对象,从而可以链式调用</span></div><div class="line">getMethod(<span class="string">"/test.json"</span>)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json1"</span>,response);</div><div class="line">  <span class="keyword">return</span> getMethod(<span class="string">"/test.json"</span>);</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json2"</span>,response);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">"请求错误"</span>,error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMethod</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    client.open(<span class="string">"GET"</span>,url);</div><div class="line">    client.onreadystatechange =  handler;</div><div class="line">    client.responseType = <span class="string">"json"</span>;</div><div class="line">    client.setRequestHeader(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</div><div class="line">    client.send();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.readyState !== <span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</div><div class="line">        resolve(<span class="keyword">this</span>.response);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> promise</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="&#39;https://github.com/axios/axios/blob/master/lib/core/Axios.js#L26&#39;">axios</a>也是支持 <code>promise</code> 的 API,它的解耦做的很不错,看它的源码也给我带来了很大的收获</p><p>当运行完这三个例子以后现在可以对 <code>Promise</code> 对象有一个大体的印象:</p><ul><li>Promise 中有两个自带的函数<code>resolve</code>和<code>reject</code>,分别代表该对象成功和失败两个结果需要处理的状态</li><li>在 Promise 中,只有三种状态<code>Pending</code>,<code>Resolved</code>,<code>Rejected</code>,而且同一时间只会出于一种状态中</li><li>Promise 中的状态改变不可逆,一旦发生就不能再修改</li><li>在 Promise 中的 <code>resolve(param)</code> 中的参数将传到 <code>catch(resolve[,reject])</code>中,<code>reject(param)</code>同理</li><li><code>then()</code>代表着 Promise 的回调处理,而且返回一个新的 promise 对象,和原来的不是同一个</li></ul><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><p>还是刚才 ajax 的运行例子,不过这次我们修改点东西<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> allow = <span class="literal">false</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMethod</span>(<span class="params">url</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(allow)&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'第二次执行'</span>);</div><div class="line">      allow = !allow;</div><div class="line">      reject(<span class="string">"第二次执行被拒"</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'第一次执行'</span>);</div><div class="line">      allow = !allow;</div><div class="line">      reject(<span class="string">"第一次执行被拒"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    client.open(<span class="string">"GET"</span>,url);</div><div class="line">    client.onreadystatechange =  handler;</div><div class="line">    client.responseType = <span class="string">"json"</span>;</div><div class="line">    client.setRequestHeader(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</div><div class="line">    client.send();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.readyState !== <span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line"></div><div class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</div><div class="line">        resolve(<span class="keyword">this</span>.response);</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> promise</div><div class="line">&#125;</div><div class="line"></div><div class="line">getMethod(<span class="string">"/test.json"</span>)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json1"</span>,response);</div><div class="line">  <span class="keyword">return</span> getMethod(<span class="string">"/test.json"</span>);</div><div class="line">&#125;)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json2"</span>,response);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"请求错误"</span>,error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>通过一个变量来控制是否进行 ajax 请求</p><p>从这个例子我们可以看出来<code>reject</code>抛出的错误是有冒泡性质的,可以统一通过最后的<code>.catch()</code>一起捕获,<br>这也是为什么我刚才说不推荐在<code>then(reslve,reject)</code>中使用错误的回调处理,集中在最后的<code>catch()</code>中进行处理<br>这样也让代码看起来更直白一点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们本次要了解一下 es6 中的 Promise 对象&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="ES6" scheme="http://blog.justwe.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用Vultr来搭建梯子</title>
    <link href="http://blog.justwe.site/2017/09/20/vultr-shadowsocks/"/>
    <id>http://blog.justwe.site/2017/09/20/vultr-shadowsocks/</id>
    <published>2017-09-20T06:16:47.000Z</published>
    <updated>2017-09-20T09:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为<del>坑爹的GFW</del>某些问题,导致一些浏览器的默认搜索长期404,为了解决这个问题之前试过<a href="https://getlantern.org/en_US/" target="_blank" rel="external">lantern</a><br>也试过一些 vpn,但是都不好用啊,vpn 要面对商家跑路的危险(和去理发店找 tony 老师办卡一样),lantern<br>虽然好用但是免费版有流量限制,只能自己动手丰衣足食了</p><a id="more"></a><h3 id="首先选一个国外的服务器"><a href="#首先选一个国外的服务器" class="headerlink" title="首先选一个国外的服务器"></a>首先选一个国外的服务器</h3><p>国内的服务厂商就不用想了,哪怕是有国外的服务器也是死贵死贵的,然后如果没有办过 <a href="https://amazonaws-china.com/cn/" target="_blank" rel="external">aws</a> 的话,这个是<br><strong>最佳</strong> 选择,因为初次注册并绑定信用卡就能免费使用一年的 vps,用来做 shadowsocks 服务器完全没<br>问题啊!具体开那个服务器其实都是那一套流程了,现在进入主题:买一个 <a href="https://my.vultr.com/" target="_blank" rel="external">vultr</a>服务器.</p><p>我认为 vultr 的优势</p><ul><li>国外服务器,可以做翻墙用</li><li>价格便宜,每月最低2.5$,丰俭由人,<strong>计价方式是按小时计费哟!</strong></li><li>如果是个人使用有用不完的流量(1T+)</li><li>主要是我还想用它做网站服务器,配置和价格比国内有强</li></ul><p>去<a href="https://my.vultr.com/" target="_blank" rel="external">官网</a>注册一个账户就可以开始选择服务器了,配置选<code>东京服务器&gt;centos7&gt;1cpu&amp;1GMery&amp;1TBandwidth</code>,<br>点完这三项就什么都不用点了, deploy now</p><p>这时应该是有一个ip,一个密码了,可以登录服务器了<br>如果你是 windows 环境,下载一个 <a href="http://rj.baidu.com/soft/detail/15201.html" target="_blank" rel="external">xshell</a><br>如果你是 macOS 就用终端或者 <a href="https://www.iterm2.com/" target="_blank" rel="external">item2</a><br>接下来的操作两个平台都是一样的,就是用 ssh 去链接远程服务器<br>比如你的 ip 是<code>120.0.0.1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@120.0.0.1</div></pre></td></tr></table></figure></p><p>回车后输入密码就能登录上去了</p><h3 id="在服务器搭建-shadowsocks"><a href="#在服务器搭建-shadowsocks" class="headerlink" title="在服务器搭建 shadowsocks"></a>在服务器搭建 shadowsocks</h3><ol><li><p>最简单的就是通过脚本搭建,按以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 下载脚本</div><div class="line">wget -O ss.sh http://zhangdanyang.com/file/ss.sh</div><div class="line"># 执行脚本</div><div class="line">bash ss.sh</div><div class="line"></div><div class="line"># 设置端口号并回车，直接回车是设置为1225</div><div class="line">Please enter PORT(1225 default):</div><div class="line"># 设置密码并回车，直接回车是设置为123456</div><div class="line">Please enter PASSWORD(123456 default):</div><div class="line"></div><div class="line"># 等待一会……就完成了（初次执行约2-5min）</div></pre></td></tr></table></figure><p>脚本源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">#! /bin/bash</div><div class="line"># log路径</div><div class="line">export log_path=/etc/ss.log</div><div class="line"># 设置端口号</div><div class="line">echo -n -e &apos;\033[36mPlease enter PORT(1225 default): \033[0m&apos;</div><div class="line"># echo -n &quot;please enter port(1225 default):&quot;</div><div class="line">read port</div><div class="line">if [ ! -n &quot;$port&quot; ];then</div><div class="line">        echo &quot;port will be set to 1225&quot;</div><div class="line">        port=1225</div><div class="line">else</div><div class="line">        echo &quot;port will be set to $port&quot;</div><div class="line">fi</div><div class="line"># 设置密码</div><div class="line">echo -n -e &apos;\033[36mPlease enter PASSWORD(123456 default): \033[0m&apos;</div><div class="line"># echo -n &quot;please enter password(123456 default):&quot;</div><div class="line">read pwd</div><div class="line">if [ ! -n &quot;$pwd&quot; ];then</div><div class="line">        echo &quot;password will be set to 123456&quot;</div><div class="line">        pwd=123456</div><div class="line">else</div><div class="line">        echo &quot;password will be set to $pwd&quot;</div><div class="line">fi</div><div class="line"># 写shadowsocks.json配置文件</div><div class="line">cat&gt;/etc/shadowsocks.json&lt;&lt;EOF</div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:$port,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;$pwd&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line"># 安装 shadowsocks 防火墙等</div><div class="line">ret=`yum install -y m2crypto python-setuptools &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`easy_install pip &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`pip install shadowsocks &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`yum install -y firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`systemctl start firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line"># 开启端口</div><div class="line">ret=`firewall-cmd --permanent --zone=public --add-port=22/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`firewall-cmd --permanent --zone=public --add-port=$port/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line">ret=`firewall-cmd --reload &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</div><div class="line"># 如果有相同功能的进程则杀死</div><div class="line">ps -ef|grep ssserver|grep shadowsocks|awk &apos;&#123; print $2 &#125;&apos;|xargs kill -9</div><div class="line">nohup /usr/bin/ssserver -c /etc/shadowsocks.json &amp;</div><div class="line"># 成功</div><div class="line">if [ $? -eq 0 ];then</div><div class="line">clear</div><div class="line">cat&lt;&lt;EOF</div><div class="line">***************Congratulation!*************</div><div class="line">Shadowsocks installed successfully!</div><div class="line"></div><div class="line">PORT: $port</div><div class="line">PASSWORD: $pwd</div><div class="line">METHOD: aes-256-cfb</div><div class="line"></div><div class="line">***************JUST ENJOY IT!**************</div><div class="line">EOF</div><div class="line"># 失败</div><div class="line">else</div><div class="line">clear</div><div class="line">cat&lt;&lt;EOF</div><div class="line">************Failed,retry please!***********</div><div class="line"></div><div class="line">cat /etc/ss.log to get something you need…</div><div class="line"></div><div class="line">************Failed,retry please!***********</div><div class="line">EOF</div><div class="line">fi</div></pre></td></tr></table></figure><p>需要记住 <strong>端口号</strong> 和 <strong>密码</strong> 一会儿会用到</p></li></ol><p>如果是用脚本搭建的就没必要看这一部分了,直接看客户端部分就行<br>手动搭建 shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 安装 pip 工具且安装 shadowsocks</div><div class="line">$ yum install m2crypto python-setuptools</div><div class="line">$ easy_install pip</div><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure></p><p>编辑启动配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi  /etc/shadowsocks.json</div></pre></td></tr></table></figure></p><p>文件内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:443,  //对外的端口</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;123456&quot;,//你的链接密码</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果是多端口配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;port_password&quot;: &#123;</div><div class="line">         &quot;443&quot;: &quot;443&quot;,</div><div class="line">         &quot;8888&quot;: &quot;8888&quot;</div><div class="line">     &#125;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>配置防火墙,centos7默认的防火墙是 <code>firewalld</code> 和 centos6的 <code>iptables</code> 稍有区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 安装防火墙</div><div class="line">$ yum install firewalld</div><div class="line"># 启动防火墙</div><div class="line">$ systemctl start firewalld</div></pre></td></tr></table></figure></p><p>开启对应的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 端口号是你自己设置的端口(上文中的配置,443端口)</div><div class="line">$ firewall-cmd --permanent --zone=public --add-port=443/tcp</div><div class="line"># 新增防火墙规则后一定要执行,这一步很重要</div><div class="line">$ firewall-cmd --reload</div></pre></td></tr></table></figure></p><p>启动 shadowsocks 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssserver -c /etc/shadowsocks.json</div><div class="line">//如果改成常驻后台的模式</div><div class="line">$ nohup ssserver -c /etc/shadowsocks.json &amp;</div></pre></td></tr></table></figure></p><p>将它设置成开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/systemd/system/shadowsocks.service</div></pre></td></tr></table></figure></p><p>输入内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Shadowsocks</div><div class="line"></div><div class="line">[Service]</div><div class="line">TimeoutStartSec=0</div><div class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p><p>添加进服务中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ systemctl enable shadowsocks</div><div class="line">//启动服务(如果执行过之前的流程的话就不用执行这一步,因为已经启动了)</div><div class="line">$ systemctl start shadowsocks</div><div class="line">//查看启动状态</div><div class="line">$ systemctl status shadowsocks -l</div></pre></td></tr></table></figure></p><p>如果启动没问题和防火墙没问题那么服务器这块就没问题了</p><h3 id="通过客户端连接远程-ss-服务"><a href="#通过客户端连接远程-ss-服务" class="headerlink" title="通过客户端连接远程 ss 服务"></a>通过客户端连接远程 ss 服务</h3><p>下载一个 <a href="https://www.shadowsocks.company/download-mac.html" target="_blank" rel="external">shadowsocks 客户端下载</a></p><p><a href="https://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="external">各个平台版本列表</a></p><p>软件下载安装后,点击 <code>服务器&gt;服务器设定</code>,<br>地址就是你的服务器 ip,后面的端口是 <code>shadowsocks.json</code>中设置的 <code>server_port</code>,也就是脚本设置时的第一个参数<br>密码是配置文件中的密码,加密方式如果用的脚本就是默认 <code>aes-256-cfb</code> 如果是独立安装就参考<code>shadowsocks.json</code>中<br>的<code>method</code><br>设置好点选这个服务器再打开 shadowsocks 就好</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我用的是 mac,之前也是用同样的程序链接的 aws 的服务,后来到期后改用的 vultr,结果搭建的服务器在 mac 上<br>连接不上了,但是同样的地址用手机就能连上!折腾了半天发现是电脑中有之前的配置缓存,索性我就把当前的<br>shadowsocks 删了重装一下,用 cleanMyMac 给它卸载干净,卸载的时候就能发现它究竟有哪些配置存在<br>统统删掉删掉,再重装一下就一切正常了</p><p><a href="http://blog.csdn.net/boxuerixin/article/details/72393518" target="_blank" rel="external">以上代码出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为&lt;del&gt;坑爹的GFW&lt;/del&gt;某些问题,导致一些浏览器的默认搜索长期404,为了解决这个问题之前试过&lt;a href=&quot;https://getlantern.org/en_US/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lantern&lt;/a&gt;&lt;br&gt;也试过一些 vpn,但是都不好用啊,vpn 要面对商家跑路的危险(和去理发店找 tony 老师办卡一样),lantern&lt;br&gt;虽然好用但是免费版有流量限制,只能自己动手丰衣足食了&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
      <category term="shadowsocks" scheme="http://blog.justwe.site/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>关于 elementUI 中的 Intput 框的Enter 事件</title>
    <link href="http://blog.justwe.site/2017/09/15/elementui-form-event/"/>
    <id>http://blog.justwe.site/2017/09/15/elementui-form-event/</id>
    <published>2017-09-15T03:42:23.000Z</published>
    <updated>2017-09-15T03:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文档中没有出现相关的说明,但是在实际使用中确实需要用到,怎么办呢?</p><a id="more"></a><p>这里有一个示例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-form</span></span></div><div class="line"><span class="attr">:inline</span>=<span class="string">"true"</span></div><div class="line"><span class="attr">:model</span>=<span class="string">"price_form"</span></div><div class="line"><span class="attr">:rules</span>=<span class="string">"price_rules"</span></div><div class="line"><span class="attr">ref</span>=<span class="string">"priceForm"</span></div><div class="line">@<span class="attr">submit.native.prevent</span></div><div class="line"><span class="attr">v-if</span>=<span class="string">"scope.row.edit_deposit"</span></div><div class="line">&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">style</span>=<span class="string">"margin-top: 22px;"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label-width</span>=<span class="string">"0"</span> <span class="attr">prop</span>=<span class="string">"price"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-input</span></span></div><div class="line">               <span class="attr">placeholder</span>=<span class="string">"请输入价格"</span></div><div class="line">               <span class="attr">:icon</span>=<span class="string">"price_loading ?  'loading' : 'edit' "</span></div><div class="line">               <span class="attr">v-model</span>=<span class="string">"price_form.price"</span></div><div class="line">               @<span class="attr">keyup.native.enter</span>=<span class="string">"storePrice"</span></div><div class="line">               <span class="attr">:on-icon-click</span>=<span class="string">"storePrice"</span>&gt;</div><div class="line">           <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这里需要在input 中加入 <code>@keyup.native.enter=&quot;&quot;</code> 事件,只加这个还不完整,因为回车的时候会<br>出现表单默认提交的情况,有些时候是我们不需要的,因此,需要在 <code>el-form</code>中添加<code>@submit.native.prevent</code><br>来阻止 form 的默认提交行为</p><p><a href="https://github.com/ElemeFE/element/issues/3625" target="_blank" rel="external">资料来源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文档中没有出现相关的说明,但是在实际使用中确实需要用到,怎么办呢?&lt;/p&gt;
    
    </summary>
    
      <category term="elementUI" scheme="http://blog.justwe.site/categories/elementUI/"/>
    
    
      <category term="elementUI" scheme="http://blog.justwe.site/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>转 做一枚全栈工程师</title>
    <link href="http://blog.justwe.site/2017/08/22/be-a-fullstack-engineer/"/>
    <id>http://blog.justwe.site/2017/08/22/be-a-fullstack-engineer/</id>
    <published>2017-08-22T03:57:09.000Z</published>
    <updated>2017-08-22T03:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>这篇热门文章在 2017 年 6 月更新过，引入了更多新技术。</em><br><a id="more"></a></p><hr><p><img src="http://p0.qhimg.com/t012ae25b10db646f23.jpg" alt="Jack of all trades"></p><p>如果一个全栈工程师能够根据<a href="https://www.sitepoint.com/premium/books/the-ultimate-guide-to-prototyping?aref=bskvorc" target="_blank" rel="external">原型</a>实现一个完整的MVP（minimum viable product，至少可行的产品），我们通常会认为他十八般武艺样样精通，而且有足够的理由来证明这一点。为了给全栈工程师一个最新鲜的定义，我们首先来关注一下全栈工程师以前是搞什么的。</p><h2 id="以前的全栈工程师"><a href="#以前的全栈工程师" class="headerlink" title="以前的全栈工程师"></a>以前的全栈工程师</h2><p>很久以前，大约在 2000 年(在互联网的次元里，17年可以说是一个非常长的时间了)，一个全栈工程师必须掌握下面的本领：</p><ul><li><p>用 Adobe 公司的 Photoshop 或者 Fireworks 工具设计出一个网页</p></li><li><p>将设计稿变成 HTML, CSS 还有热点图(额，还记得那些吗？)</p></li><li><p>写一些基本的 PHP 4.0 脚本(非面向对象的 PHP 即将成为历史)来处理服务端逻辑</p></li><li><p>保存所有的动态数据到 MySQL 中，也可能会做一些小优化</p></li><li><p>用 FTP 上传所有代码、数据库什么的到一台服务器，然后就可以领取报酬啦</p></li></ul><p>注意我们在这里只讨论 PHP —— 一个全栈 Flash 或者 Coldfusion (一种 Web 服务器) 开发者可能有不同的工作方式(但是也仅仅是细微的差别)。</p><p>在那个单纯的时代，生活是如此的美好。个人开发者一抓一大把，而且程序猿工作完还有大把的时间陪伴自己的家人。</p><p>那现在呢？</p><h2 id="现在的全栈工程师需要自带什么技能呢"><a href="#现在的全栈工程师需要自带什么技能呢" class="headerlink" title="现在的全栈工程师需要自带什么技能呢"></a>现在的全栈工程师需要自带什么技能呢</h2><p>最近，我们也会产生<a href="http://www.businessinsider.com/apple-planet-of-the-apps-ad-developer-rarely-saw-his-kids-2017-6" target="_blank" rel="external">这些</a>恐慌——为什么工程师的生活会变成这样？</p><p><img src="http://p0.qhimg.com/t017e6e6e710405c644.jpg" alt="App developer doesn&#39;t see his kids due to schedule"></p><p>为了在这个牛逼的市场里获得成功，我们这些开发者——通常都是完美主义者——应经常把“如果你想做正确的事”当做自己的座右铭，并经常质问自己。这会强迫我们自己集中精力在一处，而且必须学习<em>所有东西</em>，所以做一个全栈工程师往往要学会以下技能：</p><h3 id="服务管理-运维"><a href="#服务管理-运维" class="headerlink" title="服务管理/运维"></a>服务管理/运维</h3><p>一个开发者<strong>必须</strong>了解基础的服务器管理知识。包括当不限于以下知识：</p><ul><li><p>通过终端或其他没有用户界面的环境来远程连接服务器</p></li><li><p>会写基本的 shell 脚本</p></li><li><p>服务器上的用户和群组管理</p></li><li><p>管理像 Apache 和 Nginx 这样的服务器程序来提供应用</p></li><li><p>防火墙管理和权限管理</p></li><li><p>安装和更新软件</p></li></ul><p><img src="http://p6.qhimg.com/t01001f7d645b2147e5.gif" alt="运维"></p><p><a href="https://giphy.com/gifs/richard-ayoade-it-crowd-maurice-moss-dbtDDSvWErdf2" target="_blank" rel="external">图片来自GIPHY</a></p><p>除了这些基础技能，开发者必须懂得怎样去创建一个好的、健康的、分离的开发环境，在 Docker 或者像  <a href="http://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/" target="_blank" rel="external">Vagrant</a> 这样的虚拟机环境中。 如果上面所有的技术你都不熟悉，那我必须给你推荐一本超棒的书，<a href="http://bit.ly/phpenv-sp" target="_blank" rel="external">点这里购买</a>。</p><p>开发者必须对版本控制系统非常熟练，为了让开发有靠谱的生产备份和可分享、可协同的代码库，这些代码库能够根据时间来跟踪代码变化。现在已经没有开发者的工作流是完全离开版本控制的了。我们有一个非常棒的关于版本控制的视频教程，<a href="https://www.sitepoint.com/premium/courses/introduction-to-git-2902?aref=bskvorc" target="_blank" rel="external">点这里购买</a>。</p><h3 id="云"><a href="#云" class="headerlink" title="云"></a>云</h3><p>和实际管理或者虚拟服务器不同，一个开发者也许要知道云主机平台，比如<a href="https://www.sitepoint.com/deploying-to-heroku-an-introduction/" target="_blank" rel="external">Heroku</a>, Google Cloud, Azure, AWS等等。</p><p><img src="http://p1.qhimg.com/t011d26a34c4d9aa8d4.gif" alt="云"></p><p><a href="https://giphy.com/gifs/animation-artists-on-tumblr-internet-fnjzX4eGNUglq" target="_blank" rel="external">图片来自GIPHY</a></p><p>有一点必须说明的是，平台和工具更多的是<a href="https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb" target="_blank" rel="external">为了炒作而不是其实用性</a>。尽管有很多平台和工具的实用性并不如宣传的那么好，但是了解这些大家都在谈论的服务，从长远来看会很有用——客户可能会随时要求更换服务提供商。幸运的是，我们拥有这些<a href="https://www.sitepoint.com/ultimate-guide-deploying-php-apps-cloud/" target="_blank" rel="external">云主机部署权威指南</a>。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>在后端，除了要懂选择什么语言以外，比如 PHP 和众多的<a href="https://www.sitepoint.com/tag/php-frameworks/" target="_blank" rel="external">框架</a> and <a href="https://www.sitepoint.com/tag/cms/" target="_blank" rel="external">CMSes</a>，一个全栈开发者必须熟悉：</p><ul><li><p>Web 服务器，比如 <a href="https://www.sitepoint.com/tag/nginx/" target="_blank" rel="external">Nginx</a> 和 Apache ，和运维紧密相关</p></li><li><p>不幸的是，NodeJS 已经可以将 JS、CSS 和其他资源文件编译成静态可以方便缓存的文件了。幸运的是，也有办法避免学习 NodeJS，<a href="https://www.sitepoint.com/look-ma-no-nodejs-a-php-front-end-workflow-without-node/" target="_blank" rel="external">用PHP</a>也是可以的</p></li><li><p>像<a href="https://www.sitepoint.com/re-introducing-composer/" target="_blank" rel="external">Composer</a>这样的 PHP 包管理工具在现代化的开发环境中已经离不开了</p></li><li><p>好的<a href="https://www.sitepoint.com/tag/api+php/" target="_blank" rel="external">API 设计</a>，自从大部分新型网页都基于 API 而且仅仅为前端服务（下面会详细描述）</p></li><li><p>ElasticSearch (<a href="https://www.sitepoint.com/introduction-to-elasticsearch-in-php/" target="_blank" rel="external">introduction here</a>) 这样的搜索引擎对于网站性能的提高是非常重要的</p></li><li><p><a href="https://www.sitepoint.com/a-comprehensive-crash-course-into-cronjobs/" target="_blank" rel="external">cronjobs</a> 和后端的工作，使用<a href="https://www.sitepoint.com/introduction-gearman-multi-tasking-php/" target="_blank" rel="external">Gearman</a> 或者  <a href="https://www.sitepoint.com/framework-agnostic-php-cronjobs-made-easy-with-crunz/" target="_blank" rel="external">Crunz</a> 这类的库</p></li><li><p>了解缓存， <a href="https://www.sitepoint.com/getting-started-with-varnish/" target="_blank" rel="external">Varnish</a>, <a href="https://www.sitepoint.com/speeding-up-existing-apps-with-a-redis-cache/" target="_blank" rel="external">Redis</a> 等牛B的工具可以分片存储数据，这样可以将一个项目部署的多个主机上</p></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库是一个单独的部分，因为除了很好地掌握我们基本上不会有结构变化的关系数据库(<a href="https://www.sitepoint.com/php-mysql-tutorial/" target="_blank" rel="external">MySQL</a> 或者 PostgreSQL)的数据模式之外，一个全栈工程师应该对非关系型数据库有所了解，如<a href="https://www.sitepoint.com/building-simple-blog-app-mongodb-php/" target="_blank" rel="external">MongoDB</a>, Redis, 或 <a href="https://www.sitepoint.com/a-quick-introduction-to-apache-cassandra/" target="_blank" rel="external">Cassandra</a> ，更不用说像 <a href="https://www.sitepoint.com/discover-graph-databases-neo4j-php/" target="_blank" rel="external">Neo4j</a> 这样的图形数据库了。</p><p><img src="http://p0.qhimg.com/t01598768094b450302.png" alt="Database illustration"></p><p>不幸的是，这些都是服务器上的东西，都在全栈工程师的控制下。也有几个类似 Mongo 的远程解决方案，像<a href="https://www.sitepoint.com/how-to-build-a-twitter-follower-farmer-detection-app-with-restdb/" target="_blank" rel="external">RestDB</a>或者 Google-owned <a href="https://www.sitepoint.com/tag/firebase/" target="_blank" rel="external">Firebase</a> 等。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>说到前端，真的很蛋疼。</p><p><img src="http://p1.qhimg.com/t0185b6f3475a9a5a03.gif" alt="前端"></p><p><a href="https://giphy.com/gifs/cheezburger-cars-chaoshour-mciMfMijRXIfm" target="_blank" rel="external">图片来自GIPHY</a></p><p>想知道一个正常的前端知识图谱是怎么样的，可以在JavaScript 版块看  <a href="https://www.sitepoint.com/anatomy-of-a-modern-javascript-application/" target="_blank" rel="external">这篇绝世好文</a> 。但是作为一个全栈工程师，你需要了解</p><ul><li><p>NodeJS and NPM</p></li><li><p>Yarn</p></li><li><p>预处理器和编译器(如Babel)，用来编译 Typescript, ES6, LESS, SCSS, SaSS</p></li><li><p>构建工具，如 Grunt 和 Gulp</p></li><li><p>框架，如 VueJS、React、Angular</p></li><li><p>模块打包工具，如 Webpack、Browserify、Rollup</p></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>在设计方面，全栈开发者需要了解怎样在一个产品变成真正可用的 HTML 、CSS 代码之前，画一个 <a href="https://www.sitepoint.com/premium/books/the-ultimate-guide-to-prototyping?aref=bskvorc" target="_blank" rel="external">原型图</a> 。然后就可以去用 JS 写交互、后端也可以用假数据来模拟生产环境。只有这个关键的原型图完成，用户体验设计和接口设计就绪，真正的开发才能开始。这本身就是一项艰巨的任务，需要一套特殊的工具：</p><ul><li><p>Photoshop 和 Illustrator 或者一些开源的工具比如 Gimp / Inkscape。访问 <a href="https://www.sitepoint.com/design-ux/" target="_blank" rel="external">Design channel</a> 来了解更多这样的工具。</p></li><li><p>一个牛B的、快速的编辑器，比如 <a href="https://www.sitepoint.com/10-essential-atom-add-ons/" target="_blank" rel="external">Atom</a> 或 Sublime Text (这儿有<a href="https://www.sitepoint.com/10-essential-sublime-text-plugins-full-stack-developer/" target="_blank" rel="external">十种好用的 sublime插件</a>)</p></li><li><p>像 Subtlepatterns 的背景选择器和颜色选择器能够搭配一些颜色</p></li><li><p>CSS  的<a href="https://www.sitepoint.com/understanding-css-grid-systems/" target="_blank" rel="external">栅格系统</a></p></li><li><p>上面所说的前端所需要了解的所有知识和 JS 数据模拟</p></li><li><p>将原型图发表到网上供大家浏览并给于反馈，<a href="https://www.sitepoint.com/use-ngrok-test-local-site/" target="_blank" rel="external">Ngrok</a> 就非常好用</p></li></ul><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><p>为了高效监控应用的健康度，全栈开发者必须能够追踪错误，找到错误日志然后从中提取出有用的信息。全栈开发者也需要从日志中预测一些趋势，比如 CPU 或者 I/O 占用率的上涨，以防应用不知道什么时候就挂了。这部分和运维也有一些关系，但是需要一些特别的技能：</p><p><img src="http://p1.qhimg.com/t0167564fdeb0c3ffdd.gif" alt="日志"></p><p><a href="https://giphy.com/gifs/screen-8mpct5wMjdXnW" target="_blank" rel="external">图片来自GIPHY</a></p><p>推荐一篇<a href="https://www.sitepoint.com/how-can-the-elk-stack-be-used-to-monitor-php-apps/" target="_blank" rel="external">非常棒的 ELK stack 的文章</a>，这会帮助你了解做日志系统所需要的知识。里面包括了查找日志的 ElasticSearch ，收集日志的 Logstash，把日志用非常棒的图表展现出来的的 Kibana，甚至还有提供解决方案的 <a href="http://logz.io?utm_source=sitepoint" target="_blank" rel="external">Logz.io</a>。</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>最后，我们该说说移动端了。随着 iOS 和安卓上的的 webview 变得越来越高效，还有 PWA(<a href="https://blog.tighten.co/a-brief-introduction-to-progressive-web-apps-or-pwas" target="_blank" rel="external">渐进式web应用</a>) 的到来，native 应用正在变得黯淡，因为他们开发起来实在是太复杂了。所以一个全栈工程师必须了解 PWA 或者 <a href="https://www.sitepoint.com/build-android-app-react-native/" target="_blank" rel="external">React Native</a>，或者像NativeScript, Tabris, Cordova, Phonegap或者其他 <a href="https://www.sitepoint.com/understanding-android-webviews/" target="_blank" rel="external">webview</a> 来让客户端应用调用 API 跑起来（如上一章最后说的那样）。</p><h2 id="做一个全栈工程师值得吗？"><a href="#做一个全栈工程师值得吗？" class="headerlink" title="做一个全栈工程师值得吗？"></a>做一个全栈工程师值得吗？</h2><p>所以最后只有一个问题，值不值？</p><p>首先，应该注意到很少的全栈工程师称得上真正的全栈，大部分全栈工程师关注了上面技术的某些方面，而不是所有的，仅仅因为不可能有那么多精力放在上面所有方面。</p><p>其次，对所有方面都了解一点也许不会让你在具体方面成为大师，但是说实在的，这会让你在更好地理解项目的流程，和项目确实都需要用到的技术。当作为乙方、开一个外包公司或者给一个迷茫的团队指一条明路方面是无价的技术。</p><p>我可能不是一个“JavaScript 巨星”，“Elasticsearch 忍者”，“MySQL 大师”，“运维狂人”，或者“移动端老司机”，我不想被奉承，但是我觉得，做一个全栈工程师让我张开了翅膀，测试不同的技术，作为自由职业者给我的客户提供与众不同的解决方案。我可以有各种各样的赚钱方式，也能拿到从服务端工作到 WordPress 插件开发等不同的订单，因为我对所有的这些都有很多了解（迟早的事）。对于我来说，做一个全栈工程师是非常值得的，对比我以前只做 Flash 的日子，我现在更喜欢我的工作，当时工作多而且工资低（没有 JavaScript）。</p><p>你呢，你是全栈还是也精于专呢？不管你是不是全栈，你觉得做的事情值吗？</p><blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@lzhbupt" target="_blank" rel="external">弈晨</a><br>链接：<a href="http://www.zcfy.cc/article/3548" target="_blank" rel="external">http://www.zcfy.cc/article/3548</a><br>原文：<a href="https://www.sitepoint.com/full-stack-developer/" target="_blank" rel="external">https://www.sitepoint.com/full-stack-developer/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;这篇热门文章在 2017 年 6 月更新过，引入了更多新技术。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue的一个拖动插件</title>
    <link href="http://blog.justwe.site/2017/08/21/vue-dnd/"/>
    <id>http://blog.justwe.site/2017/08/21/vue-dnd/</id>
    <published>2017-08-21T09:11:28.000Z</published>
    <updated>2017-08-21T13:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍一个拿来即用的拖动插件<br>这里只是一个 es5 的 demo<br><a id="more"></a><br>先上代码:</p><h2 id="简单的拖动排序示例"><a href="#简单的拖动排序示例" class="headerlink" title="简单的拖动排序示例"></a>简单的拖动排序示例</h2><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/92dcvg1u/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><h2 id="拖动-clone-示例"><a href="#拖动-clone-示例" class="headerlink" title="拖动 clone 示例"></a>拖动 clone 示例</h2><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/ebemtLz6/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe><p>这里用上了 option 中的 group配置,<br><code>group:{ name:&#39;people&#39;,  pull: &#39;clone&#39;, put:false}</code><br>name: 所有可互相拖动的列表必须同一个 name 下<br>pull: true|false|’clone’  开启|关闭|复制 拖动时的元素, 当为 true 的时候拖动会把该元素从列表中移除<br>put: true|false|array  允许|禁止|数组中指定的值 添加到当前数组列当中<br>这样的话当两边的option 都是 <code>{group:{ name:&#39;people&#39;,  pull: true, put:true }}</code>的时候就运行两个列表互相拖动了<br>如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List 1 Draggable<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">draggable</span> <span class="attr">v-model</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"dragArea"</span> <span class="attr">:options</span>=<span class="string">"&#123;group:&#123; name:'people',  pull: true, put:true &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(element, index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;element.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List 2 Draggable<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">draggable</span> <span class="attr">v-model</span>=<span class="string">"list2"</span> <span class="attr">class</span>=<span class="string">"dragArea"</span> <span class="attr">:options</span>=<span class="string">"&#123;group:&#123; name:'people',  pull: true, put:true &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(element, index) in list2"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;element.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>更多的配置在 <a href="https://github.com/RubaXa/Sortable" target="_blank" rel="external">这里</a>,有时间的话我就都试一下</p><p><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="external">github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里介绍一个拿来即用的拖动插件&lt;br&gt;这里只是一个 es5 的 demo&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>我还活着</title>
    <link href="http://blog.justwe.site/2017/08/14/i-am-alive/"/>
    <id>http://blog.justwe.site/2017/08/14/i-am-alive/</id>
    <published>2017-08-14T01:42:55.000Z</published>
    <updated>2017-08-14T01:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近这两个月工作忙到飞起,等10月份再玩点儿新东西</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近这两个月工作忙到飞起,等10月份再玩点儿新东西&lt;/p&gt;

      
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
  </entry>
  
  <entry>
    <title>Js生成笛卡尔积数组</title>
    <link href="http://blog.justwe.site/2017/07/18/js-decartes/"/>
    <id>http://blog.justwe.site/2017/07/18/js-decartes/</id>
    <published>2017-07-18T02:36:50.000Z</published>
    <updated>2017-07-18T02:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下转载了来自 <a href="https://segmentfault.com/q/1010000002696523" target="_blank" rel="external">segmentfault</a>的一个回答</p><a id="more"></a><ol><li><p>第一种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</div><div class="line">        <span class="keyword">var</span> result = [];</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">descartes</span>(<span class="params">arrIndex, aresult</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (arrIndex &gt;= data.length) &#123;</div><div class="line">                result.push(aresult);</div><div class="line">                <span class="keyword">return</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> aArr = data[arrIndex];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aArr.length; ++i) &#123;</div><div class="line">                <span class="keyword">var</span> theResult = aresult.slice(<span class="number">0</span>, aresult.length);</div><div class="line">                theResult.push(aArr[i]);</div><div class="line">                descartes(arrIndex + <span class="number">1</span>, theResult);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        descartes(<span class="number">0</span>, []);</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">descartes</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( <span class="built_in">arguments</span>.length &lt; <span class="number">2</span> ) <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] || [];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [].reduce.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">col, set</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> res = [];</div><div class="line">        col.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;set.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> t = [].concat( <span class="built_in">Array</span>.isArray(c) ? c : [c] );</div><div class="line">            t.push(s);</div><div class="line">            res.push(t);</div><div class="line">        &#125;)&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">descartes([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]);</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下转载了来自 &lt;a href=&quot;https://segmentfault.com/q/1010000002696523&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;segmentfault&lt;/a&gt;的一个回答&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="decartes" scheme="http://blog.justwe.site/tags/decartes/"/>
    
  </entry>
  
  <entry>
    <title>Element-Dialog</title>
    <link href="http://blog.justwe.site/2017/07/11/element-dialog/"/>
    <id>http://blog.justwe.site/2017/07/11/element-dialog/</id>
    <published>2017-07-11T11:50:33.000Z</published>
    <updated>2017-07-11T11:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <a href="http://element.eleme.io/#/zh-CN/component/dialog" target="_blank" rel="external">elementui 的对话框示例</a>出现问题,esc 或者点击右上的 X 没反应,目前的规避方式就是把 <code>:visible.sync=&quot;dialogFormVisible&quot;</code><br>用 <code>v-model=&quot;dialogFormVisible&quot;</code> 代替,如果下<br><a id="more"></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"批量修改"</span>  <span class="attr">v-model</span>=<span class="string">"dialogFormVisible"</span> <span class="attr">size</span>=<span class="string">"tiny"</span> <span class="attr">close-on-press-escape</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"border-radius: 5px;"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"batch_form"</span> <span class="attr">label-position</span>=<span class="string">"left"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">"batch_form.label"</span> &gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"batch_form.value"</span> <span class="attr">auto-complete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisible = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"batchChange()"</span>&gt;</span>修 改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></div></pre></td></tr></table></figure><p>其他的部分照常</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;a href=&quot;http://element.eleme.io/#/zh-CN/component/dialog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elementui 的对话框示例&lt;/a&gt;出现问题,esc 或者点击右上的 X 没反应,目前的规避方式就是把 &lt;code&gt;:visible.sync=&amp;quot;dialogFormVisible&amp;quot;&lt;/code&gt;&lt;br&gt;用 &lt;code&gt;v-model=&amp;quot;dialogFormVisible&amp;quot;&lt;/code&gt; 代替,如果下&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="element-ui" scheme="http://blog.justwe.site/tags/element-ui/"/>
    
      <category term="vuejs" scheme="http://blog.justwe.site/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Hexo 报错经历</title>
    <link href="http://blog.justwe.site/2017/06/29/hexo-error-reinstall/"/>
    <id>http://blog.justwe.site/2017/06/29/hexo-error-reinstall/</id>
    <published>2017-06-29T07:49:58.000Z</published>
    <updated>2017-06-29T08:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>就在今天,吾心中忽有所感,心想不如升级一发环境版本?结果就立马受到了环境的制裁….</p><a id="more"></a><p>报错信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 51. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 57. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using `npm rebuild` or `npm install`).</div><div class="line">    at Object.Module._extensions..node (module.js:598:18)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">(node:7992) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure></p><p>唔…之前报过<code>dtrace-provider</code>的错误,翻了一下以前的记录就直接无脑的<code>sudo npm install dtrace-provider</code> 但是该怎么报错还是怎么报错….</p><p>后来再粗暴点就删了<code>package-lock.json</code>和<code>node_modules</code>目录重新来了一遍<code>npm install</code>,结果还是不行…</p><p>有点绝望的我在想:难道我以后就不能用新版本了吗? 后来开始仔细看一下报错信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 51. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 57. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using `npm rebuild` or `npm install`).</div></pre></td></tr></table></figure></p><p>看到这我意识到之前<strong>全局安装的文件</strong>都没更新过!<br>于是乎执行<code>sudo npm install -g hexo-cli</code> 好了,解决了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就在今天,吾心中忽有所感,心想不如升级一发环境版本?结果就立马受到了环境的制裁….&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.justwe.site/tags/hexo/"/>
    
      <category term="error" scheme="http://blog.justwe.site/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>转 my.cnf 文件注释信息</title>
    <link href="http://blog.justwe.site/2017/06/29/mysql-config/"/>
    <id>http://blog.justwe.site/2017/06/29/mysql-config/</id>
    <published>2017-06-29T07:17:52.000Z</published>
    <updated>2017-06-29T08:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL配置文件my.cnf 例子最详细翻译,可以保存做笔记用。<br><a id="more"></a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div></pre></td><td class="code"><pre><div class="line">#BEGIN CONFIG INFO</div><div class="line">#DESCR: 4GB RAM, 只使用InnoDB, ACID, 少量的连接, 队列负载大</div><div class="line">#TYPE: SYSTEM</div><div class="line">#END CONFIG INFO</div><div class="line"></div><div class="line">#</div><div class="line"># 此mysql配置文件例子针对4G内存。</div><div class="line"># 主要使用INNODB</div><div class="line">#处理复杂队列并且连接数量较少的mysql服务器</div><div class="line">#</div><div class="line"># 将此文件复制到/etc/my.cnf 作为全局设置,</div><div class="line"># mysql-data-dir/my.cnf 作为服务器指定设置</div><div class="line"># (@localstatedir@ for this installation) 或者放入</div><div class="line"># ~/.my.cnf 作为用户设置.</div><div class="line">#</div><div class="line"># 在此配置文件中, 你可以使用所有程序支持的长选项.</div><div class="line"># 如果想获悉程序支持的所有选项</div><div class="line"># 请在程序后加上"--help"参数运行程序.</div><div class="line">#</div><div class="line"># 关于独立选项更多的细节信息可以在手册内找到</div><div class="line">#</div><div class="line"></div><div class="line">#</div><div class="line"># 以下选项会被MySQL客户端应用读取.</div><div class="line"># 注意只有MySQL附带的客户端应用程序保证可以读取这段内容.</div><div class="line"># 如果你想你自己的MySQL应用程序获取这些值</div><div class="line"># 需要在MySQL客户端库初始化的时候指定这些选项</div><div class="line"></div><div class="line">#</div><div class="line">[client]</div><div class="line">#password = [your_password]</div><div class="line">port = @MYSQL_TCP_PORT@</div><div class="line">socket = @MYSQL_UNIX_ADDR@</div><div class="line"></div><div class="line"># *** 应用定制选项 ***</div><div class="line"></div><div class="line">#</div><div class="line">#  MySQL 服务端</div><div class="line">#</div><div class="line">[mysqld]</div><div class="line"></div><div class="line"># 一般配置选项</div><div class="line">port = @MYSQL_TCP_PORT@</div><div class="line">socket = @MYSQL_UNIX_ADDR@</div><div class="line"></div><div class="line"># back_log 是操作系统在监听队列中所能保持的连接数,</div><div class="line"># 队列保存了在MySQL连接管理器线程处理之前的连接.</div><div class="line"># 如果你有非常高的连接率并且出现"connection refused" 报错,</div><div class="line"># 你就应该增加此处的值.</div><div class="line"># 检查你的操作系统文档来获取这个变量的最大值.</div><div class="line"># 如果将back_log设定到比你操作系统限制更高的值,将会没有效果</div><div class="line">back_log = 50</div><div class="line"></div><div class="line"># 不在TCP/IP端口上进行监听.</div><div class="line"># 如果所有的进程都是在同一台服务器连接到本地的mysqld,</div><div class="line"># 这样设置将是增强安全的方法</div><div class="line"># 所有mysqld的连接都是通过Unix sockets 或者命名管道进行的.</div><div class="line"># 注意在windows下如果没有打开命名管道选项而只是用此项</div><div class="line"># (通过 "enable-named-pipe" 选项) 将会导致mysql服务没有任何作用!</div><div class="line">#skip-networking</div><div class="line"></div><div class="line"># MySQL 服务所允许的同时会话数的上限</div><div class="line"># 其中一个连接将被SUPER权限保留作为管理员登录.</div><div class="line"># 即便已经达到了连接数的上限.</div><div class="line">max_connections = 100</div><div class="line"># 每个客户端连接最大的错误允许数量,如果达到了此限制.</div><div class="line"># 这个客户端将会被MySQL服务阻止直到执行了"FLUSH HOSTS" 或者服务重启</div><div class="line"># 非法的密码以及其他在链接时的错误会增加此值.</div><div class="line"># 查看 "Aborted_connects" 状态来获取全局计数器.</div><div class="line">max_connect_errors = 10</div><div class="line"></div><div class="line"># 所有线程所打开表的数量.</div><div class="line"># 增加此值就增加了mysqld所需要的文件描述符的数量</div><div class="line"># 这样你需要确认在[mysqld_safe]中 "open-files-limit" 变量设置打开文件数量允许至少4096</div><div class="line">table_cache = 2048</div><div class="line"></div><div class="line"># 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响</div><div class="line"># 所以只有在你在同样的文件上运行多个数据库实例时才使用此选项(注意仍会有其他约束!)</div><div class="line"># 或者你在文件层面上使用了其他一些软件依赖来锁定MyISAM表</div><div class="line">#external-locking</div><div class="line"></div><div class="line"># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB字段一起工作时相当必要)</div><div class="line"># 每个连接独立的大小.大小动态增加</div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line"># 在一个事务中binlog为了记录SQL状态所持有的cache大小</div><div class="line"># 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.</div><div class="line"># 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中</div><div class="line"># 如果事务比此值大, 会使用磁盘上的临时文件来替代.</div><div class="line"># 此缓冲在每个连接的事务第一次更新状态时被创建</div><div class="line">binlog_cache_size = 1M</div><div class="line"></div><div class="line"># 独立的内存表所允许的最大容量.</div><div class="line"># 此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源.</div><div class="line">max_heap_table_size = 64M</div><div class="line"></div><div class="line"># 排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序</div><div class="line"># 如果排序后的数据无法放入排序缓冲,</div><div class="line"># 一个用来替代的基于磁盘的合并分类会被使用</div><div class="line"># 查看 "Sort_merge_passes" 状态变量.</div><div class="line"># 在排序发生时由每个线程分配</div><div class="line">sort_buffer_size = 8M</div><div class="line"></div><div class="line"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合).</div><div class="line"># 类似的联合在极大多数情况下有非常糟糕的性能表现,</div><div class="line"># 但是将此值设大能够减轻性能影响.</div><div class="line"># 通过 "Select_full_join" 状态变量查看全联合的数量</div><div class="line"># 当全联合发生时,在每个线程中分配</div><div class="line">join_buffer_size = 8M</div><div class="line"></div><div class="line"># 我们在cache中保留多少线程用于重用</div><div class="line"># 当一个客户端断开连接后,如果cache中的线程还少于thread_cache_size,</div><div class="line"># 则客户端线程被放入cache中.</div><div class="line"># 这可以在你需要大量新连接的时候极大的减少线程创建的开销</div><div class="line"># (一般来说如果你有好的线程模型的话,这不会有明显的性能提升.)</div><div class="line">thread_cache_size = 8</div><div class="line"></div><div class="line"># 此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量.</div><div class="line"># 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris).</div><div class="line"># 你可可以尝试使用 [CPU数量]*(2..4) 来作为thread_concurrency的值</div><div class="line">thread_concurrency = 8</div><div class="line"></div><div class="line"># 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果.</div><div class="line"># 打开查询缓冲可以极大的提高服务器速度, 如果你有大量的相同的查询并且很少修改表.</div><div class="line"># 查看 "Qcache_lowmem_prunes" 状态变量来检查是否当前值对于你的负载来说是否足够高.</div><div class="line"># 注意: 在你表经常变化的情况下或者如果你的查询原文每次都不同,</div><div class="line"># 查询缓冲也许引起性能下降而不是性能提升.</div><div class="line">query_cache_size = 64M</div><div class="line"></div><div class="line"># 只有小于此设定值的结果才会被缓冲</div><div class="line"># 此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.</div><div class="line">query_cache_limit = 2M</div><div class="line"></div><div class="line"># 被全文检索索引的最小的字长.</div><div class="line"># 你也许希望减少它,如果你需要搜索更短字的时候.</div><div class="line"># 注意在你修改此值之后,</div><div class="line"># 你需要重建你的 FULLTEXT 索引</div><div class="line">ft_min_word_len = 4</div><div class="line"></div><div class="line"># 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的mysql在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被swapping out</div><div class="line"># 此选项对于性能有益</div><div class="line">#memlock</div><div class="line"></div><div class="line"># 当创建新表时作为默认使用的表类型,</div><div class="line"># 如果在创建表示没有特别执行表类型,将会使用此值</div><div class="line">default_table_type = MYISAM</div><div class="line"></div><div class="line"># 线程使用的堆大小. 此容量的内存在每次连接时被预留.</div><div class="line"># MySQL 本身常不会需要超过64K的内存</div><div class="line"># 如果你使用你自己的需要大量堆的UDF函数</div><div class="line"># 或者你的操作系统对于某些操作需要更多的堆,</div><div class="line"># 你也许需要将其设置的更高一点.</div><div class="line">thread_stack = 192K</div><div class="line"></div><div class="line"># 设定默认的事务隔离级别.可用的级别如下:</div><div class="line"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE</div><div class="line">transaction_isolation = REPEATABLE-READ</div><div class="line"></div><div class="line"># 内部(内存中)临时表的最大大小</div><div class="line"># 如果一个表增长到比此值更大,将会自动转换为基于磁盘的表.</div><div class="line"># 此限制是针对单个表的,而不是总和.</div><div class="line">tmp_table_size = 64M</div><div class="line"></div><div class="line"># 打开二进制日志功能.</div><div class="line"># 在复制(replication)配置中,作为MASTER主服务器必须打开此项</div><div class="line"># 如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志.</div><div class="line">log-bin=mysql-bin</div><div class="line"></div><div class="line"># 如果你在使用链式从服务器结构的复制模式 (A-&gt;B-&gt;C),</div><div class="line"># 你需要在服务器B上打开此项.</div><div class="line"># 此选项打开在从线程上重做过的更新的日志,</div><div class="line"># 并将其写入从服务器的二进制日志.</div><div class="line">#log_slave_updates</div><div class="line"></div><div class="line"># 打开全查询日志. 所有的由服务器接收到的查询 (甚至对于一个错误语法的查询)</div><div class="line"># 都会被记录下来. 这对于调试非常有用, 在生产环境中常常关闭此项.</div><div class="line">#log</div><div class="line"></div><div class="line"># 将警告打印输出到错误log文件.  如果你对于MySQL有任何问题</div><div class="line"># 你应该打开警告log并且仔细审查错误日志,查出可能的原因.</div><div class="line">#log_warnings</div><div class="line"></div><div class="line"># 记录慢速查询. 慢速查询是指消耗了比 "long_query_time" 定义的更多时间的查询.</div><div class="line"># 如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.</div><div class="line"># 如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,</div><div class="line">log_slow_queries</div><div class="line"></div><div class="line"># 所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.</div><div class="line"># 不要在这里使用"1", 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于MySQL 目前时间的精确度只能达到秒的级别).</div><div class="line">long_query_time = 2</div><div class="line"></div><div class="line"># 在慢速日志中记录更多的信息.</div><div class="line"># 一般此项最好打开.</div><div class="line"># 打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里</div><div class="line">log_long_format</div><div class="line"></div><div class="line"># 此目录被MySQL用来保存临时文件.例如,</div><div class="line"># 它被用来处理基于磁盘的大型排序,和内部排序一样.</div><div class="line"># 以及简单的临时表.</div><div class="line"># 如果你不创建非常大的临时文件,将其放置到 swapfs/tmpfs 文件系统上也许比较好</div><div class="line"># 另一种选择是你也可以将其放置在独立的磁盘上.</div><div class="line"># 你可以使用";"来放置多个路径</div><div class="line"># 他们会按照roud-robin方法被轮询使用.</div><div class="line">#tmpdir = /tmp</div><div class="line"></div><div class="line"></div><div class="line"># ***  复制有关的设置</div><div class="line"></div><div class="line"></div><div class="line"># 唯一的服务辨识号,数值位于 1 到 2^32-1之间.</div><div class="line"># 此值在master和slave上都需要设置.</div><div class="line"># 如果 "master-host" 没有被设置,则默认为1, 但是如果忽略此选项,MySQL不会作为master生效.</div><div class="line">server-id = 1</div><div class="line"></div><div class="line"># 复制的Slave (去掉master段的注释来使其生效)</div><div class="line">#</div><div class="line"># 为了配置此主机作为复制的slave服务器,你可以选择两种方法:</div><div class="line">#</div><div class="line"># 1) 使用 CHANGE MASTER TO 命令 (在我们的手册中有完整描述) -</div><div class="line">#    语法如下:</div><div class="line">#</div><div class="line">#    CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;,</div><div class="line">#    MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ;</div><div class="line">#</div><div class="line">#    你需要替换掉 &lt;host&gt;, &lt;user&gt;, &lt;password&gt; 等被尖括号包围的字段以及使用master的端口号替换&lt;port&gt; (默认3306).</div><div class="line">#</div><div class="line">#    例子:</div><div class="line">#</div><div class="line">#    CHANGE MASTER TO MASTER_HOST='125.564.12.1', MASTER_PORT=3306,</div><div class="line">#    MASTER_USER='joe', MASTER_PASSWORD='secret';</div><div class="line">#</div><div class="line"># 或者</div><div class="line">#</div><div class="line"># 2) 设置以下的变量. 不论如何, 在你选择这种方法的情况下, 然后第一次启动复制(甚至不成功的情况下,</div><div class="line">#     例如如果你输入错密码在master-password字段并且slave无法连接),</div><div class="line">#    slave会创建一个 master.info 文件,并且之后任何对于包含在此文件内的参数的变化都会被忽略</div><div class="line">#    并且由 master.info 文件内的内容覆盖, 除非你关闭slave服务, 删除 master.info 并且重启slave 服务.</div><div class="line">#    由于这个原因,你也许不想碰一下的配置(注释掉的) 并且使用 CHANGE MASTER TO (查看上面) 来代替</div><div class="line">#</div><div class="line"># 所需要的唯一id号位于 2 和 2^32 - 1之间</div><div class="line"># (并且和master不同)</div><div class="line"># 如果master-host被设置了.则默认值是2</div><div class="line"># 但是如果省略,则不会生效</div><div class="line">#server-id = 2</div><div class="line">#</div><div class="line"># 复制结构中的master - 必须</div><div class="line">#master-host = &lt;hostname&gt;</div><div class="line">#</div><div class="line"># 当连接到master上时slave所用来认证的用户名 - 必须</div><div class="line">#master-user = &lt;username&gt;</div><div class="line">#</div><div class="line"># 当连接到master上时slave所用来认证的密码 - 必须</div><div class="line">#master-password = &lt;password&gt;</div><div class="line">#</div><div class="line"># master监听的端口.</div><div class="line"># 可选 - 默认是3306</div><div class="line">#master-port = &lt;port&gt;</div><div class="line"></div><div class="line"># 使得slave只读.只有用户拥有SUPER权限和在上面的slave线程能够修改数据.</div><div class="line"># 你可以使用此项去保证没有应用程序会意外的修改slave而不是master上的数据</div><div class="line">#read_only</div><div class="line"></div><div class="line"></div><div class="line">#*** MyISAM 相关选项</div><div class="line"></div><div class="line"></div><div class="line"># 关键词缓冲的大小, 一般用来缓冲MyISAM表的索引块.</div><div class="line"># 不要将其设置大于你可用内存的30%,</div><div class="line"># 因为一部分内存同样被OS用来缓冲行数据</div><div class="line"># 甚至在你并不使用MyISAM 表的情况下, 你也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.</div><div class="line">key_buffer_size = 32M</div><div class="line"></div><div class="line"># 用来做MyISAM表全表扫描的缓冲大小.</div><div class="line"># 当全表扫描需要时,在对应线程中分配.</div><div class="line">read_buffer_size = 2M</div><div class="line"></div><div class="line"># 当在排序之后,从一个已经排序好的序列中读取行时,行数据将从这个缓冲中读取来防止磁盘寻道.</div><div class="line"># 如果你增高此值,可以提高很多ORDER BY的性能.</div><div class="line"># 当需要时由每个线程分配</div><div class="line">read_rnd_buffer_size = 16M</div><div class="line"></div><div class="line"># MyISAM 使用特殊的类似树的cache来使得突发插入</div><div class="line"># (这些插入是,INSERT  SELECT, INSERT  VALUES (), (), , 以及 LOAD DATA</div><div class="line"># INFILE) 更快. 此变量限制每个进程中缓冲树的字节数.</div><div class="line"># 设置为 0 会关闭此优化.</div><div class="line"># 为了最优化不要将此值设置大于 "key_buffer_size".</div><div class="line"># 当突发插入被检测到时此缓冲将被分配.</div><div class="line">bulk_insert_buffer_size = 64M</div><div class="line"></div><div class="line"># 此缓冲当MySQL需要在 REPAIR, OPTIMIZE, ALTER 以及 LOAD DATA INFILE 到一个空表中引起重建索引时被分配.</div><div class="line"># 这在每个线程中被分配.所以在设置大值时需要小心.</div><div class="line">myisam_sort_buffer_size = 128M</div><div class="line"></div><div class="line"># MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).</div><div class="line"># 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)</div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line"></div><div class="line"># 如果被用来更快的索引创建索引所使用临时文件大于制定的值,那就使用键值缓冲方法.</div><div class="line"># 这主要用来强制在大表中长字串键去使用慢速的键值缓冲方法来创建索引.</div><div class="line">myisam_max_extra_sort_file_size = 10G</div><div class="line"></div><div class="line"># 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.</div><div class="line"># 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.</div><div class="line">myisam_repair_threads = 1</div><div class="line"></div><div class="line"># 自动检查和修复没有适当关闭的 MyISAM 表.</div><div class="line">myisam_recover</div><div class="line"></div><div class="line"></div><div class="line"># 默认关闭 Federated</div><div class="line">skip-federated</div><div class="line"></div><div class="line"># *** BDB 相关选项 ***</div><div class="line"></div><div class="line"># 如果你运行的MySQL服务有BDB支持但是你不准备使用的时候使用此选项. 这会节省内存并且可能加速一些事.</div><div class="line">skip-bdb</div><div class="line"></div><div class="line"></div><div class="line"># *** INNODB 相关选项 ***</div><div class="line"></div><div class="line"># 如果你的MySQL服务包含InnoDB支持但是并不打算使用的话,</div><div class="line"># 使用此选项会节省内存以及磁盘空间,并且加速某些部分</div><div class="line">#skip-innodb</div><div class="line"></div><div class="line"># 附加的内存池被InnoDB用来保存 metadata 信息</div><div class="line"># 如果InnoDB为此目的需要更多的内存,它会开始从OS这里申请内存.</div><div class="line"># 由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值.</div><div class="line"># SHOW INNODB STATUS 命令会显示当先使用的数量.</div><div class="line">innodb_additional_mem_pool_size = 16M</div><div class="line"></div><div class="line"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像 MyISAM.</div><div class="line"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</div><div class="line"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</div><div class="line"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</div><div class="line"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</div><div class="line"># 所以不要设置的太高.</div><div class="line">innodb_buffer_pool_size = 2G</div><div class="line"></div><div class="line"># InnoDB 将数据保存在一个或者多个数据文件中成为表空间.</div><div class="line"># 如果你只有单个逻辑驱动保存你的数据,一个单个的自增文件就足够好了.</div><div class="line"># 其他情况下.每个设备一个文件一般都是个好的选择.</div><div class="line"># 你也可以配置InnoDB来使用裸盘分区 - 请参考手册来获取更多相关内容</div><div class="line">innodb_data_file_path = ibdata1:10M:autoextend</div><div class="line"></div><div class="line"># 设置此选项如果你希望InnoDB表空间文件被保存在其他分区.</div><div class="line"># 默认保存在MySQL的datadir中.</div><div class="line">#innodb_data_home_dir = &lt;directory&gt;</div><div class="line"></div><div class="line"># 用来同步IO操作的IO线程的数量. This value is</div><div class="line"># 此值在Unix下被硬编码为4,但是在Windows磁盘I/O可能在一个大数值下表现的更好.</div><div class="line">innodb_file_io_threads = 4</div><div class="line"></div><div class="line"># 如果你发现InnoDB表空间损坏, 设置此值为一个非零值可能帮助你导出你的表.</div><div class="line"># 从1开始并且增加此值知道你能够成功的导出表.</div><div class="line">#innodb_force_recovery=1</div><div class="line"></div><div class="line"># 在InnoDb核心内的允许线程数量.</div><div class="line"># 最优值依赖于应用程序,硬件以及操作系统的调度方式.</div><div class="line"># 过高的值可能导致线程的互斥颠簸.</div><div class="line">innodb_thread_concurrency = 16</div><div class="line"></div><div class="line"># 如果设置为1 ,InnoDB会在每次提交后刷新(fsync)事务日志到磁盘上,</div><div class="line"># 这提供了完整的ACID行为.</div><div class="line"># 如果你愿意对事务安全折衷, 并且你正在运行一个小的食物, 你可以设置此值到0或者2来减少由事务日志引起的磁盘I/O</div><div class="line"># 0代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘.</div><div class="line"># 2代表日志写入日志文件在每次提交后,但是日志文件只有大约每秒才会刷新到磁盘上.</div><div class="line">innodb_flush_log_at_trx_commit = 1</div><div class="line"></div><div class="line"># 加速InnoDB的关闭. 这会阻止InnoDB在关闭时做全清除以及插入缓冲合并.</div><div class="line"># 这可能极大增加关机时间, 但是取而代之的是InnoDB可能在下次启动时做这些操作.</div><div class="line">#innodb_fast_shutdown</div><div class="line"></div><div class="line"># 用来缓冲日志数据的缓冲区的大小.</div><div class="line"># 当此值快满时, InnoDB将必须刷新数据到磁盘上.</div><div class="line"># 由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)</div><div class="line"></div><div class="line">innodb_log_buffer_size = 8M</div><div class="line"></div><div class="line"># 在日志组中每个日志文件的大小.</div><div class="line"># 你应该设置日志文件总合大小到你缓冲池大小的25%~100%</div><div class="line"># 来避免在日志文件覆写上不必要的缓冲池刷新行为.</div><div class="line"># 不论如何, 请注意一个大的日志文件大小会增加恢复进程所需要的时间.</div><div class="line">innodb_log_file_size = 256M</div><div class="line"></div><div class="line"># 在日志组中的文件总数.</div><div class="line"># 通常来说2~3是比较好的.</div><div class="line">innodb_log_files_in_group = 3</div><div class="line"></div><div class="line"># InnoDB的日志文件所在位置. 默认是MySQL的datadir.</div><div class="line"># 你可以将其指定到一个独立的硬盘上或者一个RAID1卷上来提高其性能</div><div class="line">#innodb_log_group_home_dir</div><div class="line"></div><div class="line"># 在InnoDB缓冲池中最大允许的脏页面的比例.</div><div class="line"># 如果达到限额, InnoDB会开始刷新他们防止他们妨碍到干净数据页面.</div><div class="line"># 这是一个软限制,不被保证绝对执行.</div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line"></div><div class="line"># InnoDB用来刷新日志的方法.</div><div class="line"># 表空间总是使用双重写入刷新方法</div><div class="line"># 默认值是 "fdatasync", 另一个是 "O_DSYNC".</div><div class="line">#innodb_flush_method=O_DSYNC</div><div class="line"></div><div class="line"># 在被回滚前,一个InnoDB的事务应该等待一个锁被批准多久.</div><div class="line"># InnoDB在其拥有的锁表中自动检测事务死锁并且回滚事务.</div><div class="line"># 如果你使用 LOCK TABLES 指令, 或者在同样事务中使用除了InnoDB以外的其他事务安全的存储引擎</div><div class="line"># 那么一个死锁可能发生而InnoDB无法注意到.</div><div class="line"># 这种情况下这个timeout值对于解决这种问题就非常有帮助.</div><div class="line">innodb_lock_wait_timeout = 120</div><div class="line"></div><div class="line"></div><div class="line">[mysqldump]</div><div class="line"># 不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项</div><div class="line">quick</div><div class="line"></div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line">[mysql]</div><div class="line">no-auto-rehash</div><div class="line"></div><div class="line"># 仅仅允许使用键值的 UPDATEs 和 DELETEs .</div><div class="line">#safe-updates</div><div class="line"></div><div class="line">[isamchk]</div><div class="line">key_buffer = 512M</div><div class="line">sort_buffer_size = 512M</div><div class="line">read_buffer = 8M</div><div class="line">write_buffer = 8M</div><div class="line"></div><div class="line">[myisamchk]</div><div class="line">key_buffer = 512M</div><div class="line">sort_buffer_size = 512M</div><div class="line">read_buffer = 8M</div><div class="line">write_buffer = 8M</div><div class="line"></div><div class="line">[mysqlhotcopy]</div><div class="line">interactive-timeout</div><div class="line"></div><div class="line">[mysqld_safe]</div><div class="line"># 增加每个进程的可打开文件数量.</div><div class="line"># 警告: 确认你已经将全系统限制设定的足够高!</div><div class="line"># 打开大量表需要将此值设b</div><div class="line">open-files-limit = 8192</div></pre></td></tr></table></figure></p><p><a href="http://www.blogjava.net/hunter129/archive/2009/01/18/251744.html" target="_blank" rel="external">原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL配置文件my.cnf 例子最详细翻译,可以保存做笔记用。&lt;br&gt;
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP标准类库系列 Iterator</title>
    <link href="http://blog.justwe.site/2017/06/27/php-spl-iterator/"/>
    <id>http://blog.justwe.site/2017/06/27/php-spl-iterator/</id>
    <published>2017-06-27T03:35:37.000Z</published>
    <updated>2017-06-27T07:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器,让对象可用 <code>foreach</code>,<code>for</code>,<code>while</code>方法<br><a id="more"></a></p><h2 id="啥是-Iterator"><a href="#啥是-Iterator" class="headerlink" title="啥是 Iterator"></a>啥是 Iterator</h2><p>是一种 php 提供的接口标准,可以将不同的类迭代调用统一成一样的方法,打个比方(话说谁叫比方?):<br>这是调用 mysql 时取出资源的方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$dbms=<span class="string">'mysql'</span>;</div><div class="line">$host=<span class="string">'localhost'</span>;</div><div class="line">$dbName=<span class="string">'wechat'</span>;</div><div class="line">$user=<span class="string">'root'</span>;      </div><div class="line">$pass=<span class="string">'123123'</span>;</div><div class="line">$dsn=<span class="string">"$dbms:host=$host:33060;dbname=$dbName;"</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $dbh = <span class="keyword">new</span> PDO($dsn, $user, $pass); <span class="comment">//初始化一个PDO对象</span></div><div class="line">    <span class="keyword">foreach</span> ($dbh-&gt;query(<span class="string">'SELECT * from migrations;'</span>) <span class="keyword">as</span> $row) &#123;</div><div class="line">        print_r($row);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $dbh = <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</div><div class="line">    <span class="keyword">die</span> (<span class="string">"Error!: "</span> . $e-&gt;getMessage() . <span class="string">"&lt;br/&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而读取目录下所有文件的方法是:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$dirPath = <span class="string">'/Users/gpf/Desktop'</span>;</div><div class="line">$list = opendir($dirPath);</div><div class="line"><span class="keyword">while</span>($filename = readdir($list))&#123;</div><div class="line">    <span class="keyword">echo</span> $filename . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而读取文件内容的方法是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$filePath = <span class="string">'/Users/gpf/Desktop/test.php'</span>;</div><div class="line"></div><div class="line">$handler = @fopen($filePath,<span class="string">'r'</span>);</div><div class="line"><span class="keyword">if</span>(!$handler)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(!feof($handler))&#123;</div><div class="line">    $line = fgets($handler);</div><div class="line">    <span class="keyword">echo</span> $line;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">new</span> SplFileObject($filePath) <span class="keyword">as</span> $line)&#123;</div><div class="line">    <span class="keyword">echo</span> $line . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>都是做的循环的事但是不统一,这就很烦躁,因为同样一件事你需要用不同的方法去实现,一个<code>茴</code>字要用四种写法<br>这种情况下在 php51 之后开发组也意识到问题了,于是就出现了 SPL,就有了一个通用的 <code>Iterator</code><br>这个迭代器就是让不同的资源操作变得相同,这些接口可以自己实现,也可以用官方提供的一些<a href="http://php.net/manual/zh/spl.iterators.php" target="_blank" rel="external">迭代器</a><br>比如读取文本的迭代器就可以这样获取文本内容了:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$filePath = <span class="string">'/Users/gpf/Desktop/test.php'</span>;</div><div class="line">$handler = <span class="keyword">new</span> SplFileObject($filePath);</div><div class="line"><span class="keyword">foreach</span>($handler <span class="keyword">as</span> $line)&#123;</div><div class="line">    <span class="keyword">echo</span> $line . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//当然也可以直接跳行查找</span></div><div class="line">$handler-&gt;seek(<span class="number">4</span>);</div><div class="line">var_dump($handler-&gt;current());</div></pre></td></tr></table></figure></p><p>这样调用就显得比较统一了,那么</p><h2 id="怎么使用-Iterator"><a href="#怎么使用-Iterator" class="headerlink" title="怎么使用 Iterator?"></a>怎么使用 Iterator?</h2><p>这里参照了<a href="http://php.net/manual/zh/class.iterator.php" target="_blank" rel="external">php 文档</a> 和 <a href="http://www.ruanyifeng.com/blog/2008/07/php_spl_notes.html" target="_blank" rel="external">阮一峰的博客</a><br>写的一个例子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $attributes = [];</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $valid = <span class="keyword">FALSE</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $array)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;attributes = $array;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;valid = (<span class="keyword">FALSE</span> !== reset(<span class="keyword">$this</span>-&gt;attributes));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> current(<span class="keyword">$this</span>-&gt;attributes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> key(<span class="keyword">$this</span>-&gt;attributes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果 next 返回 false 循环将终止</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;valid = (<span class="keyword">FALSE</span> !== next(<span class="keyword">$this</span>-&gt;attributes));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;valid;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$arr  = [</div><div class="line">    <span class="string">'red'</span> =&gt; <span class="string">'stop'</span>,</div><div class="line">    <span class="string">'green'</span> =&gt; <span class="string">'run'</span>,</div><div class="line">    <span class="string">'yellow'</span> =&gt; <span class="string">'wait'</span></div><div class="line">];</div><div class="line">$demo = <span class="keyword">new</span> IteratorDemo($arr);</div><div class="line">var_dump($demo);</div><div class="line"><span class="keyword">foreach</span> ($demo <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">    <span class="keyword">echo</span> $key  . <span class="string">'=&gt;'</span> . $value . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">object(IteratorDemo)<span class="comment">#1 (2) &#123;</span></div><div class="line">  [<span class="string">"attributes"</span>:<span class="string">"IteratorDemo"</span>:<span class="keyword">private</span>]=&gt;</div><div class="line">  <span class="keyword">array</span>(<span class="number">3</span>) &#123;</div><div class="line">    [<span class="string">"red"</span>]=&gt;</div><div class="line">    string(<span class="number">4</span>) <span class="string">"stop"</span></div><div class="line">    [<span class="string">"green"</span>]=&gt;</div><div class="line">    string(<span class="number">3</span>) <span class="string">"run"</span></div><div class="line">    [<span class="string">"yellow"</span>]=&gt;</div><div class="line">    string(<span class="number">4</span>) <span class="string">"wait"</span></div><div class="line">  &#125;</div><div class="line">  [<span class="string">"valid"</span>:<span class="keyword">protected</span>]=&gt;</div><div class="line">  bool(<span class="keyword">false</span>)</div><div class="line">&#125;</div><div class="line">string(<span class="number">20</span>) <span class="string">"IteratorDemo::rewind"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">red=&gt;stop</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">green=&gt;run</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">yellow=&gt;wait</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div></pre></td></tr></table></figure></p><p>这就实现了一个通用的 <code>Iterator</code> 接口,当然这是是为了实现而实现,中间可以做很多事情的,这要发挥一下想象力</p><p>在程序里经常看到 <code>FooIterator</code> 这类的对象,就是基于上面写的 <code>Iterator</code> 进行的延伸,比如刚才我们<br>例子中用到的<code>SplFileObject</code>,<code>SimpleXMLIterator</code>,<code>ArrayIterator</code>这些类,都是大同小异的,<br>不过是根据实现的迭代器添加一些更适用的方法,比如一个<code>DirectoryIterator</code>中就是继承了<code>SplFileInfo</code>的方法<br>并且实现了 <code>Iterator</code> 接口,再添加了一些自己的方法,有用 idea 的可以用代码追踪看一下也是蛮有意思的</p><p>参考资料:</p><ol><li><a href="http://php.net/manual/zh/class.iterator.php" target="_blank" rel="external">Iterator（迭代器）接口 </a></li><li><a href="http://www.ruanyifeng.com/blog/2008/07/php_spl_notes.html" target="_blank" rel="external">PHP SPL笔记</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代器,让对象可用 &lt;code&gt;foreach&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;,&lt;code&gt;while&lt;/code&gt;方法&lt;br&gt;
    
    </summary>
    
      <category term="php-SPL" scheme="http://blog.justwe.site/categories/php-SPL/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="SPL" scheme="http://blog.justwe.site/tags/SPL/"/>
    
  </entry>
  
  <entry>
    <title>PHP标准类库系列 arrayAccess</title>
    <link href="http://blog.justwe.site/2017/06/26/php-spl-arrayaccess/"/>
    <id>http://blog.justwe.site/2017/06/26/php-spl-arrayaccess/</id>
    <published>2017-06-26T09:22:53.000Z</published>
    <updated>2017-06-26T09:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多的 php 框架模型调取属性的时候可以按照数组的方式去调用,这是因为使用了<code>arrayAccess</code>这个接口<br><a id="more"></a></p><h2 id="什么是-SPL"><a href="#什么是-SPL" class="headerlink" title="什么是 SPL?"></a>什么是 SPL?</h2><p>SPL 是 Standard PHP Library 的缩写,是官方在 php5之后提供的一个标准类库,为 php 面向对象开发<br>提供了良好的支持</p><h2 id="如何使用arrayAccess-接口"><a href="#如何使用arrayAccess-接口" class="headerlink" title="如何使用arrayAccess 接口"></a>如何使用arrayAccess 接口</h2><p>最好的学习就是使用啊,这是我写的一个 demo<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $name = <span class="string">'demo'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $attributes = [];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demo constructor.</div><div class="line">     * <span class="doctag">@param</span> array $attribute</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $attribute = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;attributes = $attribute;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;&#123;$offset&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$offset&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@param</span> mixed $value</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span><span class="params">($offset, $value)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$offset&#125; = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;$offset)&#123;</div><div class="line">          <span class="keyword">$this</span>-&gt;$offset = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $name</div><div class="line">     * <span class="doctag">@param</span> $value</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;attributes[$name] = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $name</div><div class="line">     * <span class="doctag">@return</span> mixed|null</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> array_key_exists($name,<span class="keyword">$this</span>-&gt;attributes)? <span class="keyword">$this</span>-&gt;attributes[$name] : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$arr = [</div><div class="line">    <span class="string">'height'</span> =&gt; <span class="string">'180cm'</span>,</div><div class="line">];</div><div class="line">$demo = <span class="keyword">new</span> Demo($arr);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo-&gt;name . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'name'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'height'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">unset</span>($demo[<span class="string">'height'</span>]);</div><div class="line">var_dump($demo[<span class="string">'height'</span>]);</div><div class="line"><span class="comment">//新增</span></div><div class="line">$demo[<span class="string">'sex'</span>] = <span class="string">'man'</span>;</div><div class="line"><span class="keyword">echo</span> $demo-&gt;sex . PHP_EOL;</div><div class="line"><span class="comment">//修改</span></div><div class="line">$demo[<span class="string">'height'</span>] = <span class="string">'2333cm'</span>;</div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'height'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//打印这个类</span></div><div class="line">var_dump($demo);</div></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">demo</div><div class="line">demo</div><div class="line">180cm</div><div class="line">NULL</div><div class="line">man</div><div class="line">2333cm</div><div class="line">object(Demo)#1 (2) &#123;</div><div class="line">  [&quot;name&quot;]=&gt;</div><div class="line">  string(4) &quot;demo&quot;</div><div class="line">  [&quot;attributes&quot;:protected]=&gt;</div><div class="line">  array(2) &#123;</div><div class="line">    [&quot;height&quot;]=&gt;</div><div class="line">    string(6) &quot;2333cm&quot;</div><div class="line">    [&quot;sex&quot;]=&gt;</div><div class="line">    string(3) &quot;man&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里还用了<code>__set</code>和<code>__get</code>,现在一些框架的关于数据模型的类也是类似的实现思路</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多的 php 框架模型调取属性的时候可以按照数组的方式去调用,这是因为使用了&lt;code&gt;arrayAccess&lt;/code&gt;这个接口&lt;br&gt;
    
    </summary>
    
      <category term="php-SPL" scheme="http://blog.justwe.site/categories/php-SPL/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="SPL" scheme="http://blog.justwe.site/tags/SPL/"/>
    
  </entry>
  
  <entry>
    <title>__Callstatic</title>
    <link href="http://blog.justwe.site/2017/06/23/php-callstatic/"/>
    <id>http://blog.justwe.site/2017/06/23/php-callstatic/</id>
    <published>2017-06-23T08:50:15.000Z</published>
    <updated>2017-06-23T08:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多框架中调用方法都是<code>Foo::bar()</code>这种格式的,但是他们真的是静态方法吗?<br><a id="more"></a></p><p>这种情况在 <code>larave</code> 中尤其常见,但是开发过程中很明显这些有一部分不是静态的,比如你使用一个模型<code>User</code>,那么你每次实例化出来他都是一个全新的,互不影响,这里就用到了一个魔术方法<code>__callStatic</code></p><p>举个栗子:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is __call'</span>. PHP_EOL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is __callStatic:'</span>. PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> Test();</div><div class="line">$test-&gt;hello();</div><div class="line">$test::hi();</div><div class="line"><span class="comment">//this is __call:hello</span></div><div class="line"><span class="comment">//this is __callStatic:hi</span></div></pre></td></tr></table></figure></p><p>当然魔术方法也是很耗性能的一种方式,每次调用的时候后回先扫一遍<code>class</code>没找到方法时才会调用它,而为了代码的整洁和抽象这个方法也能给很大的帮助,在这之间去要有个权衡</p><p>下面实现的 <code>log</code> 类,采用的就是这种方法,将方法解耦出来,只要符合规定的接口就能调用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="comment">//获取 logger 的实体</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $logger;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogger</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$logger?: <span class="keyword">self</span>::$logger = <span class="keyword">self</span>::createLogger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createLogger</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Logger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span><span class="params">(LoggerInterface $logger)</span></span>&#123;</div><div class="line">        <span class="keyword">self</span>::$logger = $logger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        call_user_func_array([<span class="keyword">self</span>::getLogger(),$name],$arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        forward_static_call_array([<span class="keyword">self</span>::getLogger(),$name],$arguments);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LoggerInterface</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($message,array $content = [])</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($messge,array $content = [])</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> <span class="title">LoggerInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($message, array $content = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is Log method info'</span> . PHP_EOL;</div><div class="line">        var_dump($content);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($messge, array $content = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is Log method alert: '</span>. $messge . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Test::info(<span class="string">'喊个口号:'</span>,[<span class="string">'好好'</span>,<span class="string">'学习'</span>,<span class="string">'天天'</span>,<span class="string">'向上'</span>]);</div><div class="line">$test = <span class="keyword">new</span> Test();</div><div class="line">$test-&gt;alert(<span class="string">'hello'</span>);</div></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">this is Log method info</div><div class="line">array(4) &#123;</div><div class="line">  [0]=&gt;</div><div class="line">  string(6) &quot;好好&quot;</div><div class="line">  [1]=&gt;</div><div class="line">  string(6) &quot;学习&quot;</div><div class="line">  [2]=&gt;</div><div class="line">  string(6) &quot;天天&quot;</div><div class="line">  [3]=&gt;</div><div class="line">  string(6) &quot;向上&quot;</div><div class="line">&#125;</div><div class="line">this is Log method alert: hello</div></pre></td></tr></table></figure></p><p>也许有的小伙伴已经看出来了,没错!这段代码就是仿照(抄)的 <code>EasyWechat</code>的日志部分,<a href="https://github.com/overtrue/wechat/blob/master/src/Support/Log.php" target="_blank" rel="external">代码片段</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多框架中调用方法都是&lt;code&gt;Foo::bar()&lt;/code&gt;这种格式的,但是他们真的是静态方法吗?&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="laravel" scheme="http://blog.justwe.site/tags/laravel/"/>
    
  </entry>
  
</feed>
