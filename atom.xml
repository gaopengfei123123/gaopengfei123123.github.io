<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;hello-world/&gt;</title>
  
  <subtitle>代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justwe.site/"/>
  <updated>2018-05-09T05:55:45.774Z</updated>
  <id>http://blog.justwe.site/</id>
  
  <author>
    <name>GPF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有关 Restful 借口规范踩到的坑</title>
    <link href="http://blog.justwe.site/2018/05/09/php-restful/"/>
    <id>http://blog.justwe.site/2018/05/09/php-restful/</id>
    <published>2018-05-09T02:47:39.000Z</published>
    <updated>2018-05-09T05:55:45.774Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>restful</code> 接口规范开发时我碰到的几个槽点…</p><a id="more"></a><p><code>restful</code>提供了一种接口规范,本意是让路由变得更加易懂,不过既然是规则那么就有束缚,想在项目中采用这个的同学们可以参考一下</p><h3 id="路由嵌套太要命"><a href="#路由嵌套太要命" class="headerlink" title="路由嵌套太要命"></a>路由嵌套太要命</h3><p>$<del>~</del>~$如果存在这种<code>city/3/zoo/2/animal/1</code>这样的查询路由你怎么说? 多层嵌套在我看来反而不如<code>?city=3&amp;zoo=2&amp;animal=1</code>这种 query 来的方便直接,尤其是在后台的开发中这种目录结构会让人痛不欲生,而且很多情况下我们进行列表展示的时候数据不是从一个表里取出来的,有时甚至需要跨业务或者调第三方的进行组合,这种情况下路由是不是要很长? <code>restful</code>路由里需要显示出要操控的资源,这资源种类一多url 就会变得长长长,反而不如像<code>select/animal-list</code>这样来的简单直接</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>$<del>~</del>~$这是由于上个问题引申出来的, 像<code>city/{cid}/zoo/{zid}/animal/{aid}</code>这种路由规则的权限怎么去维护? 而且 rbac 在国内的应用来说很是常见,我们目前的解决方案也是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$route = [</span><br><span class="line">    <span class="string">'select/animal'</span> =&gt; <span class="string">'city/&#123;cid&#125;/zoo/&#123;zid&#125;/animal/&#123;aid&#125;'</span>,</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这样给这类的路由出一个给机器看的路由,长期下来如果当前开发人员走了后续接手的程序员会很绝望</p><h3 id="路由规则让人头秃"><a href="#路由规则让人头秃" class="headerlink" title="路由规则让人头秃"></a>路由规则让人头秃</h3><p>$<del>~</del>~$<code>restful</code>的路由命名核心就是将<strong>动词转换成名词</strong>,这个就看你的词汇量能不能跟上业务了,最典型的就是用户登录注册,<code>user/login</code>和<code>user/register</code>这种明显不符合啊,如果用<code>session/{id}</code>这种路由又显得怪怪的</p><h3 id="如果出现文件类型接口的怎么办"><a href="#如果出现文件类型接口的怎么办" class="headerlink" title="如果出现文件类型接口的怎么办?"></a>如果出现文件类型接口的怎么办?</h3><p>$<del>~</del>~$举个例子就是如果我有导出 excel 或者生成二维码的需求,那么这个路由算是文档操作里面的还是业务资源底下的?这一类的操作大部分都是<code>查</code>的居多,<code>增删改</code>几乎没有,这种接口都是单独写路由规则的.<br>还有一点,我们这边采取的前后端分离通常都是 <code>application/json</code> 格式传输数据,当碰到文件上传的时候还是老老实实的用<code>multipart/form-data</code>,请求方式要单独写,php56的还会提示<code>$HTTP_RAW_POST_DATA</code>即将被<code>php://input</code>替换</p><h3 id="回归到参数提取的问题"><a href="#回归到参数提取的问题" class="headerlink" title="回归到参数提取的问题"></a>回归到参数提取的问题</h3><p>$<del>~</del>~$还是查找这一块,路由很受限,举个例子:我需要查当前某个动物园的动物种类,按名字首字母降序排序,那么我应该是<code>GET /zoo/3/animal?sort=-1&amp;slabel=name</code>, 需要组成这个路由首先要前端兄弟把指定的 id 给拼出来,然后其他的参数拼到后面,或者其他的参数放到<code>header</code>里面,那么后台兄弟就要先把路由中的参数给剔出来,然后再去某个地方把剩余的参数给拿到…累不累? 查询条件多的情况下是不是还和原来一样,而且还多了提取<code>url</code>中参数的操作?</p><h3 id="理论上在查询的时候是可以指定显示字段的"><a href="#理论上在查询的时候是可以指定显示字段的" class="headerlink" title="理论上在查询的时候是可以指定显示字段的"></a>理论上在查询的时候是可以指定显示字段的</h3><p>$<del>~</del>~$<code>GET /zoo?field=name,id,desc</code> 查询的路由把暴露字段的权利开放给了调用方,那么如果有人操作不规范或者直接就是是坏,每次请求我都取全量字段内容,那么我的带宽不要钱啊?mysql 的 I/O 也是压力啊</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>$<del>~</del>~$<code>restful</code>接口在猛一看很美好,但是需要结合自己实际业务是不是适配这套规则,不要强行为了<code>restful</code>而<code>restful</code>, 一些小而美的工具可以用这种规范,中大型的业务真的要慎重考虑</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;code&gt;restful&lt;/code&gt; 接口规范开发时我碰到的几个槽点…&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="restful" scheme="http://blog.justwe.site/tags/restful/"/>
    
  </entry>
  
  <entry>
    <title>Php开发过程中不常碰到的error</title>
    <link href="http://blog.justwe.site/2018/04/26/php-unsual-mistakes/"/>
    <id>http://blog.justwe.site/2018/04/26/php-unsual-mistakes/</id>
    <published>2018-04-26T02:30:23.000Z</published>
    <updated>2018-04-26T02:56:21.401Z</updated>
    
    <content type="html"><![CDATA[<p>这里做一些备注,以防再次碰到<br><a id="more"></a></p><h3 id="url-当中的参数有-amp-timestamp-1234567890这样的字段会被转义成xtamp-1234567890"><a href="#url-当中的参数有-amp-timestamp-1234567890这样的字段会被转义成xtamp-1234567890" class="headerlink" title="url 当中的参数有 &amp;timestamp=1234567890这样的字段会被转义成xtamp=1234567890"></a>url 当中的参数有 <code>&amp;timestamp=1234567890</code>这样的字段会被转义成<code>xtamp=1234567890</code></h3><p>这个不仅存在于页面解析当中,当使用 curl 请求时拼接的参数有这种格式的也会发生转义<br>解决方法有两个:</p><ol><li>把 timestamp 这个参数放在 urlQuery 的最前面, <code>?timestamp=1234567890</code> 这样避免出现 <code>&amp;time</code>发生转义的情况</li><li>将<code>&amp;</code>用<code>&amp;amp;</code>来代替</li></ol><h3 id="Automatically-populating-HTTP-RAW-POST-DATA-is-deprecated-and-will-be-removed-in-a-future-version"><a href="#Automatically-populating-HTTP-RAW-POST-DATA-is-deprecated-and-will-be-removed-in-a-future-version" class="headerlink" title="Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version."></a>Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version.</h3><p>出现这句话通常说明你在用的 php 版本是5.6.而且在<code>php&lt;=5.6</code>的时候,进行 <code>application/json</code>格式的 post 提交会把数据放在<code>$HTTP_RAW_POST_DATA</code>这个系统变量里面,在<code>php&gt;=7</code>的时候这个变量被移除了,统统归总到<code>php://input</code>这里<br>解决方法:</p><ol><li><p>根据系统提示的走:</p><blockquote><p>Although that indeed would be technically impossible (as $HTTP_RAW_POST_DATA is populated in the bootstrapping phase of the PHP process) allow one to override the setting by means of calling ini_set.</p></blockquote><p> 要确保自己的系统中没有使用 <code>HTTP_RAW_POST_DATA</code>这个变量,直接在<code>php.ini</code>里面禁掉它的设置,但是容易出现系统中又打开的情况(在框架中很常见)</p></li><li>改一下自己的提交方式, 使用 <code>application/form-data</code>或者<code>application/x-www-form-urlencoded</code>这种格式的提交, 然后在后端接收数据的时候再转成自己需要的格式(通常是数组)<br> <a href="https://www.bram.us/2014/10/26/php-5-6-automatically-populating-http_raw_post_data-is-deprecated-and-will-be-removed-in-a-future-version/" target="_blank" rel="noopener">参考资料</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里做一些备注,以防再次碰到&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="debug" scheme="http://blog.justwe.site/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Go 开发过程中一些不错的工具(不定期更新)</title>
    <link href="http://blog.justwe.site/2018/03/26/golang-awesome-tools/"/>
    <id>http://blog.justwe.site/2018/03/26/golang-awesome-tools/</id>
    <published>2018-03-26T12:20:00.000Z</published>
    <updated>2018-03-26T12:20:28.481Z</updated>
    
    <content type="html"><![CDATA[<p>就是平时用到的一些工具<br><a id="more"></a></p><h1 id="fswatch"><a href="#fswatch" class="headerlink" title="fswatch"></a>fswatch</h1><p>用于监听目录文件的修改,一旦发生修改将自动执行系统指令,比如保存后自动 <code>go run</code> 之类的, 这个使用 go 写的</p><p><a href="https://github.com/codeskyblue/fswatch" target="_blank" rel="noopener">codeskyblue/fswatch</a></p><p>还有个跨平台的命令行工具,同样的名字 start 更多 <a href="https://github.com/emcrisostomo/fswatch" target="_blank" rel="noopener">emcrisostomo/fswatch</a> 不过图方便用 go 这个就行</p><h1 id="bee"><a href="#bee" class="headerlink" title="bee"></a>bee</h1><p>属于 beego 的附属开发工具, <code>bee run [project-name]</code> 的执行效果也是自动监听文件改动执行编译命令, 感觉不如<code>fswatch</code>方便,当然用 beego 开发的另说<br><a href="https://github.com/astaxie/beego" target="_blank" rel="noopener">astaxie/beego</a></p><h1 id="govendor"><a href="#govendor" class="headerlink" title="govendor"></a>govendor</h1><p>是 go 开发的包管理工具, 虽然依赖的<code>package</code>都在 <code>gopath</code>当中,但是代码换一个环境就要重新<code>go get</code>一堆东西实在不方便,而且还有一个值得吐槽的依赖包版本问题<br><code>govendor</code>工具就是解决这类的问题,通过 hash 来保证开发和线上使用的依赖库一样<br><a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">kardianos/govendor</a></p><h1 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h1><p>一个很不错的 web 开发框架,github 上已经有 14711个 star(截止到18/02/05), 和 <code>Martini</code>的api 很像,但是更快,适合用来做 restful 的 API<br><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">gin-gonic/gin</a></p><h1 id="mux"><a href="#mux" class="headerlink" title="mux"></a>mux</h1><p>一个独立的路由包, 支持 restful,轻量,而且支持go的<code>net/http</code> 的接口<br><a href="https://github.com/gorilla/mux" target="_blank" rel="noopener">gorilla/mux</a></p><h1 id="beego"><a href="#beego" class="headerlink" title="beego"></a>beego</h1><p>国人开发的go web框架, 特点是大而全,方便入门,和 php 的框架思路很像,有不少人在吐槽它的笨重, 如果公司想转成 go 做 web 业务它是一个不错的选择,因为它能快速出东西啊,个人感觉有点头疼的是源码很多很多…<br><a href="https://github.com/astaxie/beego" target="_blank" rel="noopener">astaxie/beego</a></p><h1 id="beego-log"><a href="#beego-log" class="headerlink" title="beego-log"></a>beego-log</h1><p>如果不想全部引用 beego 的内容,可以引进它的模块啊,它的 log 模块就是一个很不错的选择<br><a href="https://beego.me/docs/module/logs.md" target="_blank" rel="noopener">beego-log 的中文档</a></p><h1 id="kafka-go"><a href="#kafka-go" class="headerlink" title="kafka-go"></a>kafka-go</h1><p>和 kafka 相关的库很少,不过我个人使用的话这个库已经能满足我的需求, 我这里也有一个<a href="https://github.com/gaopengfei123123/go_study/tree/master/src/kafka_demo" target="_blank" rel="noopener">demo示例</a><br><a href="https://github.com/segmentio/kafka-go" target="_blank" rel="noopener">segmentio/kafka-go</a></p><h1 id="go-redis-redis"><a href="#go-redis-redis" class="headerlink" title="go-redis/redis"></a>go-redis/redis</h1><p>redis 的依赖包还是很简单的,这里推荐一个 star 不少的库<br><a href="https://github.com/go-redis/redis" target="_blank" rel="noopener">go-redis/redis</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是平时用到的一些工具&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Docker-Volume</title>
    <link href="http://blog.justwe.site/2018/02/13/docker-volume/"/>
    <id>http://blog.justwe.site/2018/02/13/docker-volume/</id>
    <published>2018-02-13T05:24:30.000Z</published>
    <updated>2018-02-16T12:35:24.116Z</updated>
    
    <content type="html"><![CDATA[<p>这里有一个使用 wordpress 的 <code>docker-compose.yml</code>的示例:<br><a id="more"></a><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">gaofeifiy</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">33060</span><span class="string">:3306</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  wordpress:</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">wordpress:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:80"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>其中有一点奇怪的地方就是在<code>db</code>的数据挂载当中,是这么写的:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>这是<code>docker-compose</code> version2 起开始的新语法,目的就是方便多个服务之间公用同一个卷<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br></pre></td></tr></table></figure></p><p>这种写法就是声明一个命名卷, 通过<code>docker volume ls</code> 可以列出来宿主机上的所有挂载的卷,而且这些卷<strong>不会因为容器被删除而删除</strong>,为的就是方便数据和服务分离</p><p>可以通过命令<code>docker inspect wordpress_db_data</code> 来查看卷的配置,这里<code>wordpress_db_data</code>就是我们刚才声明的那个卷的名字<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  wordpress git:(master) ✗ docker inspect wordpress_db_data</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "CreatedAt": "2018-02-13T04:29:29Z",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": &#123;</span><br><span class="line">            "com.docker.compose.project": "wordpress",</span><br><span class="line">            "com.docker.compose.volume": "db_data"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/wordpress_db_data/_data",</span><br><span class="line">        "Name": "wordpress_db_data",</span><br><span class="line">        "Options": &#123;&#125;,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>不过他的<code>mountpoint</code>的路径并不是宿主机上的路径,而依然是属于<code>docker</code>的路径,在<code>macOS</code>系统当中可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -ltrh /var/lib/docker/volumes</span></span><br></pre></td></tr></table></figure><p>在 <code>macOS</code> 中并不能看到实体文件,而是进入<code>linuxkit</code>中,所有的资源也是在那里,这在<code>win</code>和<code>mac</code>会出现,在 <code>linuxOS</code>中就是正常的<code>/var/lib/docker</code>路径<br>可以查看卷的列表, <a href="https://forums.docker.com/t/host-path-of-volume/12277/6" target="_blank" rel="noopener">参考资料1</a> <a href="https://stackoverflow.com/questions/39175194/docker-compose-persistent-data-mysql" target="_blank" rel="noopener">参考资料2</a></p><p>清除本地的卷可以执行<code>docker volume prune</code></p><p><a href="https://docs.docker.com/compose/compose-file/#volumes" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有一个使用 wordpress 的 &lt;code&gt;docker-compose.yml&lt;/code&gt;的示例:&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
      <category term="volume" scheme="http://blog.justwe.site/tags/volume/"/>
    
  </entry>
  
  <entry>
    <title>Docker-compose.yml 常用命令</title>
    <link href="http://blog.justwe.site/2018/02/12/docker-compose-yml/"/>
    <id>http://blog.justwe.site/2018/02/12/docker-compose-yml/</id>
    <published>2018-02-12T02:36:50.000Z</published>
    <updated>2018-02-12T02:39:14.386Z</updated>
    
    <content type="html"><![CDATA[<p>常用命令备注<br><a id="more"></a></p><h3 id="build-构建-重构-服务容器"><a href="#build-构建-重构-服务容器" class="headerlink" title="build 构建(重构)服务容器"></a>build 构建(重构)服务容器</h3><p>格式为: <code>docker-compose build [options] [service...]</code></p><ul><li><code>--force-rm</code> 删除构建时的临时容器</li><li><code>--no-cache</code> 构建不使用 cache</li><li><code>--pull</code>     始终尝试 pull 最新的镜像</li></ul><h3 id="up-这个才是最常用的"><a href="#up-这个才是最常用的" class="headerlink" title="up (这个才是最常用的)"></a>up (这个才是最常用的)</h3><p><code>docker-compose up [options] [service...]</code></p><p>直接输出<code>docker-compose up</code>就是将执行目录下的<code>docker-compose.yml</code>里的服务都自动构建,重新创建,并启动起来,同时将不同的容器关联起来,默认保持前台运行,同时也会输出各容器的输出日志</p><p><code>docker-compose up -d</code> 将后台执行,在生产环境中使用</p><ul><li><code>-d</code> 保持后台运行</li><li><code>--no-color</code> 不以颜色区分日志输出</li><li><code>--no-deps</code> 不启动服务关联的容器</li><li><code>--force-recreate</code> 强制重新创建容器</li><li><code>--no-recreate</code> 若容器已经存在,则不再构建, 与上者不同时使用</li><li><code>--no-build</code> 不自动构建缺失的镜像</li><li><code>-t , --timeout  TIMEOUT</code> 停止容器时候的超时,默认10s</li></ul><h3 id="config-检测配置文件格式"><a href="#config-检测配置文件格式" class="headerlink" title="config 检测配置文件格式"></a>config 检测配置文件格式</h3><p>如果正确则显示配置文件内容,如果错误则显示错误原因</p><h3 id="down-停止up启动的游戏"><a href="#down-停止up启动的游戏" class="headerlink" title="down 停止up启动的游戏"></a>down 停止<code>up</code>启动的游戏</h3><h3 id="exec-进入指定的容器"><a href="#exec-进入指定的容器" class="headerlink" title="exec 进入指定的容器"></a>exec 进入指定的容器</h3><h3 id="images-列出-compose-中包含的镜像"><a href="#images-列出-compose-中包含的镜像" class="headerlink" title="images 列出 compose 中包含的镜像"></a>images 列出 compose 中包含的镜像</h3><h3 id="kill-发送信号停止容器"><a href="#kill-发送信号停止容器" class="headerlink" title="kill 发送信号停止容器"></a>kill 发送信号停止容器</h3><p><code>docker-compose kill [options] [service...]</code><br>比如 <code>docker kill -s web</code></p><h3 id="logs-日志"><a href="#logs-日志" class="headerlink" title="logs 日志"></a>logs 日志</h3><p><code>docker-compose logs [options] [service...]</code><br>不同容器输出的日志颜色不同,不想有颜色就添加参数<code>--no-color</code></p><h3 id="pause-暂停一个服务"><a href="#pause-暂停一个服务" class="headerlink" title="pause 暂停一个服务"></a>pause 暂停一个服务</h3><h3 id="pull-拉取所需的镜像"><a href="#pull-拉取所需的镜像" class="headerlink" title="pull 拉取所需的镜像"></a>pull 拉取所需的镜像</h3><p><code>docker-compose pull [options] [service...]</code></p><h3 id="version-输出-compose-的版本"><a href="#version-输出-compose-的版本" class="headerlink" title="version 输出 compose 的版本"></a>version 输出 compose 的版本</h3><p>一个简单的示例,具体代码参考 <a href="https://github.com/gaopengfei123123/docker_study/tree/master/docker_compose_demo" target="_blank" rel="noopener">这里</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span>                          <span class="comment"># 一个 service 的名字</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span>                    <span class="comment"># 指出 Dockerfile 所在文件夹的路径, 而且每个 service 中必须有 build 或者 image</span></span><br><span class="line"><span class="attr">    ports:</span>                      <span class="comment"># 将容器内的接口绑定到宿主机上</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5000:5000"</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"redis:alpine"</span>       <span class="comment"># 这就是使用的远程镜像</span></span><br></pre></td></tr></table></figure><p>下面列出来几个常用的参数命令:</p><ul><li><p><code>build</code> 通过 <code>Dockerfile</code> 来构建镜像,可以指定<code>Dockerfile</code>路径以及<code>context</code>的路径, 可以用<code>arg</code>指定构建时的参数 比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">        context:</span> <span class="string">./dir</span></span><br><span class="line"><span class="attr">        dockerfile:</span> <span class="string">./other-dir</span></span><br><span class="line"><span class="attr">        arg:</span></span><br><span class="line"><span class="attr">            buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><code>image</code> 根据提供的镜像名拉取镜像</p></li><li><p><code>command</code> 覆盖容器启动后的默认命令比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure></li><li><p><code>container_name</code> 指定 <code>service</code> 容器的名字,如果没设置的话就是 容器_序号 这样, 比如 <code>web_1</code>,<code>db_1</code> 这样的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">web-container</span></span><br></pre></td></tr></table></figure></li><li><p><code>devices</code> 指定设备映射关系</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure></li><li><p><code>depends_on</code> 指定容器依赖关系,会优先构建依赖的容器,比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">        build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">        depends_on:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    db:</span> </span><br><span class="line"><span class="attr">        image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure></li></ul><p>会先构建 <code>db</code>,<code>redis</code>再构建<code>web</code></p><ul><li><p><code>dns</code> 自定义 dns 服务列表</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure></li><li><p><code>env_file</code> 从文件中提取环境变量,同变量名的会被最后的变量覆盖</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">.env1</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">.env2</span></span><br></pre></td></tr></table></figure></li></ul><p>格式必须是可以被 <code>#</code>注释的<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">PRO_ENV</span>=product</span><br><span class="line"><span class="attr">APP_NAME</span>=hahaha</span><br></pre></td></tr></table></figure></p><ul><li><p><code>environment</code> 设置环境变量,可以是<code>KEY=VALUE</code> 也可以只给出变量名,这将调取 <code>docker</code> 宿主机的环境变量</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">    ROCK_ENV:</span> <span class="string">'development'</span></span><br><span class="line"><span class="attr">    SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ROCK_ENV=development</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure></li><li><p><code>port</code> 将端口暴露到宿主机上<br>对于表示布尔值的变量建议添加引号,防止 yaml 解析的时候产生歧义,比如:<code>y|yes|TRYE|true|ON|on</code> 这一类的</p></li><li><p><code>volumes</code> 将宿主机的目录路径和容器中的路径挂载,可以设置访问模式,比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">/var/lib/mysql</span>                <span class="comment"># 同路径挂载</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">~/configs:/etc/configs:/ro</span>    <span class="comment"># 支持相对路径, 支持访问模式</span></span><br></pre></td></tr></table></figure></li><li><p>读取变量: compose会读取宿主机的环境变量和当前目录下的<code>.env</code>文件中的变量 比如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    db:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">"mongodb:($MONGO_VERSION)</span></span><br></pre></td></tr></table></figure></li></ul><p>这在启动的时候就会根据环境变量来调整要拉取的镜像</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用命令备注&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.justwe.site/categories/docker/"/>
    
    
      <category term="docker-composer" scheme="http://blog.justwe.site/tags/docker-composer/"/>
    
      <category term="docker" scheme="http://blog.justwe.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 Go 进行 Jwt 验证</title>
    <link href="http://blog.justwe.site/2018/01/22/go-jwt/"/>
    <id>http://blog.justwe.site/2018/01/22/go-jwt/</id>
    <published>2018-01-22T06:04:26.000Z</published>
    <updated>2018-01-22T09:53:53.416Z</updated>
    
    <content type="html"><![CDATA[<p>对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到<br>这一台服务器上,这和负载均衡的初衷不一致啊,而 jwt 就解决了这类的痛点<br><a id="more"></a></p><h2 id="使用-JWT-的场景"><a href="#使用-JWT-的场景" class="headerlink" title="使用 JWT 的场景"></a>使用 JWT 的场景</h2><ul><li>身份验证 用户在登录过后服务器会用 jwt 返回用户可访问的资源,比如权限什么的</li><li>传递信息 通过 jwt 的<code>header</code>和<code>signature</code>可以保证<code>payload</code>没有被篡改,保证信息的安全</li></ul><h2 id="JWT-的结构"><a href="#JWT-的结构" class="headerlink" title="JWT 的结构"></a>JWT 的结构</h2><p>JWT 是由<code>header,payload,signature</code>三部分组成的,咱们先用例子说话</p><ul><li>header<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br><span class="line">// base64编码的字符串`eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9`</span><br></pre></td></tr></table></figure></li></ul><p>这里规定了加密算法,hash256</p><ul><li><p>payload</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">// base64编码的字符串`eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9`</span><br></pre></td></tr></table></figure><p>  这里的内容没有强制要求,因为 paylaod 就是为了承载内容而存在的,不过想用规范的话也可以参考下面的</p><ul><li>iss: jwt签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>iat: jwt的签发时间</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul></li><li><p>signature<br>是用 <code>header + payload + secret</code>组合起来加密的,公式是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></li></ul><p>这里 <code>secret</code>就是自己定义的一个随机字符串,这一个过程只能发生在 server 端,会随机生成一个 hash 值</p><p>这样组合起来之后就是一个完整的 jwt 了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.4c9540f793ab33b13670169bdf444c1eb1c37047f18e861981e14e34587b1e04</span><br></pre></td></tr></table></figure></p><p>这里有一个<a href="https://github.com/gaopengfei123123/go_study/tree/master/code/jwt" target="_blank" rel="noopener">用 go 加密和验证 jwt 的 demo</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>选择 jwt 最大的理由:</p><ol><li>内容有公钥私钥,可以保证内容的合法性</li><li>token 中可以包含很多信息</li></ol><p>不过 jwt 不保证的安全问题:</p><ol><li>因为<code>header,paylaod</code>是 base64编码,相当于明文可见的,因此不能在<code>payload</code>中放入敏感信息</li><li>并不能保证数据传输时会不会被盗用,这一点和 sessionID 一样,因此不要迷信它有多高的安全性..</li></ol><p><strong>为了安全还是要上 https</strong></p><blockquote><p>相关推荐:<br><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">jwt.io</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于使用负载均衡的服务器来说,使用 JWT(JSON WEB TOKEN) 是一个更优的选择,session受到单台服务器的限制,一个用户登录过后就只能分配到&lt;br&gt;这一台服务器上,这和负载均衡的初衷不一致啊,而 jwt 就解决了这类的痛点&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
      <category term="jwt" scheme="http://blog.justwe.site/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>关于跨域请求的二三事</title>
    <link href="http://blog.justwe.site/2018/01/16/http-cross-domain-etc/"/>
    <id>http://blog.justwe.site/2018/01/16/http-cross-domain-etc/</id>
    <published>2018-01-16T09:29:54.000Z</published>
    <updated>2018-01-16T10:42:34.740Z</updated>
    
    <content type="html"><![CDATA[<p>在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 <code>vue.js</code>,后端 <code>go</code></p><a id="more"></a><h2 id="首先要区分简单请求和复杂请求"><a href="#首先要区分简单请求和复杂请求" class="headerlink" title="首先要区分简单请求和复杂请求"></a>首先要区分简单请求和复杂请求</h2><p>这里阮一峰有详细讲解过一个: <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p><p>如果你有一种<strong>太长不看</strong>的想法,就听我给你简单说一下:</p><ul><li>简单路由: 指的就是你平时表单提交,ajax 提交,使用<code>GET,POST,HEAD</code>,http 头信息里面没有杂七杂八<br>的东西的请求<br><img src="http://blog-image.onlyoneip.com/WX20180116-180128@2x.png" alt="简单请求示例"></li><li>复杂请求: 就是除了简单请求之外的请求,比如你在 http 头里有自定义的字段,或者你使用像<code>DELETE,PATCH</code>这<br>样的方法<br><img src="http://blog-image.onlyoneip.com/WX20180116-181559@2x.png" alt="复杂请求示例"></li></ul><p>你会发现复杂请求最明显的变化就是浏览器每次去请求接口的时候会发送两次,这里第一次发送的必定是一个请求方法为<code>OPTIONS</code><br>的,第二个才是你写的方法,我截图里的就是<code>POST</code>, 第二张截图之所以被判定为复杂请求就是因为我加了一个<code>X-TOKEN</code>这个<br>header,而如果第一次的<code>OPTIONS</code>方法的请求如果失败了也就不会发送第二条信息了,至于为什么,我只能说这是规定</p><blockquote><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<br>——<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS）</a></p></blockquote><h2 id="对于简单请求和复杂请求的处理-后端"><a href="#对于简单请求和复杂请求的处理-后端" class="headerlink" title="对于简单请求和复杂请求的处理(后端)"></a>对于简单请求和复杂请求的处理(后端)</h2><p>既然叫简单请求处理起来也很简单,下面已经列出代码, 关键就是设置<code>Access-Control-Allow</code>这一些参数就行,<br>复杂请求就是添加一个针对<code>OPTIONS</code>的处理方式,通常情况返回一个空字符串就行至于跨域验证之类的就是八仙过海各显神通了<br>各家有个家的处理方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> httpServer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *httpServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Stop here if its Preflighted OPTIONS request</span></span><br><span class="line"><span class="keyword">if</span> origin := r.Header.Get(<span class="string">"Origin"</span>); origin != <span class="string">""</span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>)<span class="comment">// 限制请求方的域 * 就是不限制</span></span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, PUT, DELETE"</span>)<span class="comment">// 限制请求方式</span></span><br><span class="line">w.Header().Set(<span class="string">"Access-Control-Allow-Headers"</span>,<span class="string">"Action, Module"</span>)   <span class="comment">//有使用自定义头 需要这个,Action, Module是例子</span></span><br><span class="line">    w.Header().Set(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Authorization,X-Token"</span>) <span class="comment">//允许的header的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if r.Method == "OPTIONS" &#123;// 针对复杂请求时做出的处理</span></span><br><span class="line"><span class="comment">// return</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">addr := flag.String(<span class="string">"http-address"</span>, <span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h httpServer</span><br><span class="line"></span><br><span class="line">httpListener, err := net.Listen(<span class="string">"tcp"</span>, *addr)</span><br><span class="line">server := http.Server&#123;Handler: &amp;h,&#125;</span><br><span class="line">server.Serve(httpListener)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"finish "</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前后端分离开发时跨域经常是一个不可回避的问题,这里介绍一个比较简单的办法,前端 &lt;code&gt;vue.js&lt;/code&gt;,后端 &lt;code&gt;go&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>转 在 Vue-Cli 中使用 Svg 做 Icon</title>
    <link href="http://blog.justwe.site/2017/12/26/vue-svg-icon/"/>
    <id>http://blog.justwe.site/2017/12/26/vue-svg-icon/</id>
    <published>2017-12-26T09:03:55.000Z</published>
    <updated>2017-12-26T10:25:28.165Z</updated>
    
    <content type="html"><![CDATA[<p>之前都是用的<code>image sprite</code>或者使用的 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a>这类的开源库<br>现在咱们已经走进了现代浏览器的年代(ie9+),可以玩点新鲜的东西了,svg</p><a id="more"></a><p>svg 有几个好处:</p><ul><li>矢量图,不失真</li><li>可以受CSS样式影响,就像一个文本</li><li>http请求低了</li></ul><blockquote><p>相关阅读: <a href="http://www.zhangxinxu.com/wordpress/2014/07/introduce-svg-sprite-technology/?spm=a313x.7781069.1998910419.50" target="_blank" rel="noopener">未来必热：SVG Sprite技术介绍</a></p></blockquote><p>而对我来说最直观的好处就是可以让设计师给你出一个 svg,而不是自己眼都挑花了去找一个合适的图标:)</p><h2 id="做一个-svg-icon-组件"><a href="#做一个-svg-icon-组件" class="headerlink" title="做一个 svg-icon 组件"></a>做一个 svg-icon 组件</h2><p>在 vue-cli 生成的 vue 脚手架中添加组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: @/components/SvgIcon/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg <span class="class"><span class="keyword">class</span></span>=<span class="string">"svg-icon"</span> aria-hidden=<span class="string">"true"</span>&gt;</span><br><span class="line">    &lt;use :xlink:href=<span class="string">"iconName"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'icon-svg'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">.svg-icon &#123;</span></span><br><span class="line"><span class="regexp">  width: 1em;</span></span><br><span class="line"><span class="regexp">  height: 1em;</span></span><br><span class="line"><span class="regexp">  vertical-align: -0.15em;</span></span><br><span class="line"><span class="regexp">  fill: currentColor;</span></span><br><span class="line"><span class="regexp">  overflow: hidden;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line"></span><br><span class="line">作者：花裤衩</span><br><span class="line">链接：https:<span class="comment">//juejin.im/post/59bb864b5188257e7a427c09</span></span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p><p>使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//引入svg组件</span><br><span class="line">import IconSvg from &apos;@/components/IconSvg&apos;</span><br><span class="line"></span><br><span class="line">//全局注册icon-svg</span><br><span class="line">Vue.component(&apos;icon-svg&apos;, IconSvg)</span><br><span class="line"></span><br><span class="line">//在代码中使用</span><br><span class="line">&lt;icon-svg icon-class=&quot;password&quot; /&gt;</span><br><span class="line"></span><br><span class="line">作者：花裤衩</span><br><span class="line">链接：https://juejin.im/post/59bb864b5188257e7a427c09</span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p><p>现在组件有了,svg 去哪里搞?</p><h2 id="使用-svg-sprite-loader"><a href="#使用-svg-sprite-loader" class="headerlink" title="使用 svg-sprite-loader"></a>使用 svg-sprite-loader</h2><p>这个工具可以把多个 svg 打包成 svg-sprite</p><p>为了把 icon 使用的 svg 和其他地方使用的 svg 区分开,我们需要对<code>webpack.base.conf.js</code>中的内容<br>重新设置一下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path: app-project/build/webpack.base.conf.js</span></span><br><span class="line">     ...</span><br><span class="line">     <span class="comment">// [新增]当引用图标 svg 的时候引入指定目录下的文件</span></span><br><span class="line">     &#123;</span><br><span class="line">       test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">       loader: <span class="string">'svg-sprite-loader'</span>,</span><br><span class="line">       include: [resolve(<span class="string">'src/icons'</span>)],</span><br><span class="line">       options: &#123;</span><br><span class="line">         symbolId: <span class="string">'icon-[name]'</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// [修改]这里 exclude 来忽略常规的 svg 引入</span></span><br><span class="line">     &#123;</span><br><span class="line">       test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">       loader: <span class="string">'url-loader'</span>,</span><br><span class="line">       exclude: [resolve(<span class="string">'src/icons'</span>)],   <span class="comment">// 这一步必不可少</span></span><br><span class="line">       options: &#123;</span><br><span class="line">         limit: <span class="number">10000</span>,</span><br><span class="line">         name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></p><p>接下来需要使用 webpack 的<code>require.context</code>函数</p><blockquote><p>require.context(“./test”, false, /.test.js$/);这行代码就会去 test 文件夹（不包含子目录）下面的找所有文件名以 .test.js 结尾的文件能被 require 的文件。更直白的说就是 我们可以通过正则匹配引入相应的文件模块。</p></blockquote><p>为了拆卸方便就把这些都放在了<code>icons</code>目录下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: app-project/src/icons.index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">'@/components/SvgIcon'</span><span class="comment">// svg组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line">Vue.component(<span class="string">'svg-icon'</span>, SvgIcon)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个加载目录的函数</span></span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext)</span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'./svg'</span>, <span class="literal">false</span>, /\.svg$/)</span><br><span class="line"><span class="comment">// 加载目录下的所有 svg 文件</span></span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure></p><p>然后只需要在 <code>main.js</code> 文件中引入这个组件就可以了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: app-project/src/main.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./icons'</span> <span class="comment">// 引入图标文件</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>具体代码可以参考 <a href="https://github.com/gaopengfei123123/tadmin/commit/32735b2998290ca7558a1bfe0ec8b9c368893703" target="_blank" rel="noopener">这个地址链接</a></p><h2 id="压缩-svg-内容"><a href="#压缩-svg-内容" class="headerlink" title="压缩 svg 内容"></a>压缩 svg 内容</h2><p>这里推荐一个比较好用的工具: <a href="https://github.com/svg/svgo" target="_blank" rel="noopener">svgo</a> <a href="http://www.zhangxinxu.com/wordpress/2016/02/svg-compress-tool-svgo-experience/" target="_blank" rel="noopener">SVG精简压缩工具svgo简介和初体验</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这是我抄的 花裤衩的 <a href="https://juejin.im/post/59bb864b5188257e7a427c09" target="_blank" rel="noopener">手摸手，带你优雅的使用 icon</a>,观摩别人的代码给自己带来了很多收获</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前都是用的&lt;code&gt;image sprite&lt;/code&gt;或者使用的 &lt;a href=&quot;http://fontawesome.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Font Awesome&lt;/a&gt;这类的开源库&lt;br&gt;现在咱们已经走进了现代浏览器的年代(ie9+),可以玩点新鲜的东西了,svg&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于 Chrome 浏览器会强制跳转到 Https 的问题</title>
    <link href="http://blog.justwe.site/2017/12/19/chrome-redirection-https/"/>
    <id>http://blog.justwe.site/2017/12/19/chrome-redirection-https/</id>
    <published>2017-12-19T02:34:25.000Z</published>
    <updated>2018-01-29T10:16:29.715Z</updated>
    
    <content type="html"><![CDATA[<p>我在本地使用的是 <code>*.app</code> 的域名开发的,某一天发现使用谷歌的时候会强制跳转到 <code>https</code>,改成<code>http</code>都不管用<br><a id="more"></a></p><p>询问了一下万能的404网站,查询的结果大多是:</p><blockquote><p>chrome浏览器地址栏输入：chrome://net-internals/#hsts<br>在该页面中搜索：Query HSTS/PKP domain<br>在其下方的 Domain 后面的输入框中输入自己无法访问的域名，比如：domain.app，点击Query进行查询，如果有类似下面的结果，说明该域名后缀无法使用http前缀。</p></blockquote><p>这样式儿的结果,结果试了以后没有解决都我目前的问题,后来根据这篇文章的描述 <a href="https://laravel-china.org/articles/7035/chrome-forcibly-converts-thedev-domain-name-to-https-as-of-the-v63-version#reply10" target="_blank" rel="noopener">Chrome 于 V63 版本起会将 .dev 域名强制转换为 HTTPS</a><br>说 <code>.dev</code> 的域名就是会强制跳转,看来我用的<code>.app</code>的域名估计也是同样的问题,解决方法也简单.<br>根据 <a href="https://iyware.com/dont-use-dev-for-development/" target="_blank" rel="noopener">Don’t Use .dev For Development</a>建议使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.localhost</span><br><span class="line">.invalid</span><br><span class="line">.text</span><br><span class="line">.example</span><br></pre></td></tr></table></figure></p><p>作为本地开发的模拟域名,如果用的不爽的话,换火狐啊 :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在本地使用的是 &lt;code&gt;*.app&lt;/code&gt; 的域名开发的,某一天发现使用谷歌的时候会强制跳转到 &lt;code&gt;https&lt;/code&gt;,改成&lt;code&gt;http&lt;/code&gt;都不管用&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Sense-HAT Api 文档</title>
    <link href="http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/"/>
    <id>http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/</id>
    <published>2017-11-30T05:57:18.000Z</published>
    <updated>2017-12-02T16:15:35.459Z</updated>
    
    <content type="html"><![CDATA[<p>从官方给的 api 文档中硬翻的…<br><a id="more"></a></p><h1 id="LED-模型"><a href="#LED-模型" class="headerlink" title="LED 模型"></a>LED 模型</h1><h2 id="set-rotation-设置翻转角度"><a href="#set-rotation-设置翻转角度" class="headerlink" title="set_rotation 设置翻转角度"></a>set_rotation 设置翻转角度</h2><p>这个函数可以设置 led 的旋转角度</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0</code>,<code>90</code>,<code>180</code>,<code>270</code></td><td style="text-align:center"><code>0</code>指的是树莓派 HDMI 接口向下的方向</td></tr><tr><td style="text-align:center">redraw</td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">默认为 <code>TRUE</code></td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">X = (255, 0, 0)</span><br><span class="line">O = (255, 255, 255)</span><br><span class="line"></span><br><span class="line">question_mark = [</span><br><span class="line">    O, O, O, X, X, O, O, O,</span><br><span class="line">    O, O, X, O, O, X, O, O,</span><br><span class="line">    O, O, O, O, O, X, O, O,</span><br><span class="line">    O, O, O, O, X, O, O, O,</span><br><span class="line">    O, O, O, X, O, O, O, O,</span><br><span class="line">    O, O, O, X, O, O, O, O,</span><br><span class="line">    O, O, O, O, O, O, O, O,</span><br><span class="line">    O, O, O, X, O, O, O, O</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">sense.set_pixels(question_mark)</span><br><span class="line"></span><br><span class="line">sense.set_pixel(0, 0, 255, 0, 0)</span><br><span class="line">sense.set_pixel(0, 7, 0, 255, 0)</span><br><span class="line">sense.set_pixel(7, 0, 0, 0, 255)</span><br><span class="line">sense.set_pixel(7, 7, 255, 0, 255)</span><br><span class="line"></span><br><span class="line">def close_light():</span><br><span class="line">    black = [ [0,0,0] ] * 64</span><br><span class="line">    sense.set_pixels(black)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        for r in [0, 90, 180, 270]:</span><br><span class="line">            sense.set_rotation(r)</span><br><span class="line">            time.sleep(0.3)</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    close_light()</span><br><span class="line">    print &quot;Good bye&quot;</span><br></pre></td></tr></table></figure></p><h2 id="set-pixels-批量设置像素点"><a href="#set-pixels-批量设置像素点" class="headerlink" title="set_pixels 批量设置像素点"></a>set_pixels 批量设置像素点</h2><p>改变64颗 led 的显示颜色</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>pixel_list</code></td><td style="text-align:center">List</td><td style="text-align:center"><code>[[R, G, B] * 64]</code></td><td style="text-align:center">需要提供 list 长度为64的二维数组, (r,g,b)为三原色的色值</td></tr></tbody></table><p>示例参考上一个示例</p><h2 id="get-pixels-获取当前像素点数组"><a href="#get-pixels-获取当前像素点数组" class="headerlink" title="get_pixels 获取当前像素点数组"></a>get_pixels 获取当前像素点数组</h2><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">将当前的 led 屏上显示的图像转换成list</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = (255, 0, 0)</span><br><span class="line">O = (0, 0, 0)</span><br><span class="line">question_mark = [</span><br><span class="line">    O, X, O, O, O, O, X, O,</span><br><span class="line">    O, O, X, O, O, X, O, O,</span><br><span class="line">    O, X, X, X, X, X, X, O,</span><br><span class="line">    X, X, O, X, X, O, X, X,</span><br><span class="line">    X, X, X, X, X, X, X, X,</span><br><span class="line">    X, X, X, X, X, X, X, X,</span><br><span class="line">    O, X, O, O, O, O, X, O,</span><br><span class="line">    X, O, O, O, O, O, O, X</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">sense.set_pixels(question_mark)</span><br><span class="line">out_list = sense.get_pixels()</span><br><span class="line">print out_list</span><br></pre></td></tr></table></figure></p><blockquote><p>提示:之所以有这个函数是因为传入<code>set_pixels</code>的像素值有时会发生变化,sense HAT 是将每个像素指定为<br>8 位数 (0-255) 但是如果传入 led 的 frameBuffer 中的时候,颜色的位数会转成 RGB565(5位红色,6位绿色和5位蓝色)<br>执行转换的时候可以看到二进制转换时发生的精度损失<br>get_pixels 就是显示像素在缓冲区内结束时的值</p></blockquote><h2 id="set-pixel-设置单点像素颜色"><a href="#set-pixel-设置单点像素颜色" class="headerlink" title="set_pixel 设置单点像素颜色"></a>set_pixel 设置单点像素颜色</h2><p>通过 x-y 坐标系来定位像素位置,以 HDMI 接口面向的位置为<code>下</code></p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为左 7为右</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为上 7为下</td></tr><tr><td style="text-align:center">当只有三个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pixel</code></td><td style="text-align:center">Tuple / List</td><td style="text-align:center">0-255</td><td style="text-align:center">(r, g, b)    数值</td></tr><tr><td style="text-align:center">当有五个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">红</td></tr><tr><td style="text-align:center"><code>g</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">绿</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">蓝</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line"># examples using (x, y, r, g, b)</span><br><span class="line">sense.set_pixel(0, 0, 255, 0, 0)</span><br><span class="line">sense.set_pixel(0, 7, 0, 255, 0)</span><br><span class="line">sense.set_pixel(7, 0, 0, 0, 255)</span><br><span class="line">sense.set_pixel(7, 7, 255, 0, 255)</span><br><span class="line"></span><br><span class="line">red = (255, 0, 0)</span><br><span class="line">green = (0, 255, 0)</span><br><span class="line">blue = (0, 0, 255)</span><br><span class="line"></span><br><span class="line"># examples using (x, y, pixel)</span><br><span class="line">sense.set_pixel(0, 0, red)</span><br><span class="line">sense.set_pixel(0, 0, green)</span><br><span class="line">sense.set_pixel(0, 0, blue)</span><br></pre></td></tr></table></figure></p><h2 id="get-pixel-获取指定位置的颜色"><a href="#get-pixel-获取指定位置的颜色" class="headerlink" title="get_pixel 获取指定位置的颜色"></a>get_pixel 获取指定位置的颜色</h2><p>同 <code>get_pixels</code> 不过是单体版的</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为左 7为右</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Integer</td><td style="text-align:center"><code>0-7</code></td><td style="text-align:center">0为上 7为下</td></tr></tbody></table><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">[R,G,B] 组成的数组</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">top_left_pixel = sense.get_pixel(0, 0)</span><br></pre></td></tr></table></figure></p><h2 id="load-image-加载图像到矩阵中"><a href="#load-image-加载图像到矩阵中" class="headerlink" title="load_image 加载图像到矩阵中"></a>load_image 加载图像到矩阵中</h2><p>加载一个图像文件，将其转换为RGB格式，并在LED矩阵上显示。图像的大小必须是8×8像素。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>file_path</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">有效的图片路径</td></tr><tr><td style="text-align:center"><code>redraw</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>/<code>FALSE</code></td><td style="text-align:center">是否重绘已加载的图像文件在LED矩阵上。默认值为True</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.load_image(&quot;space_invader.png&quot;)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">[[R,G,B] * 64] 组成的数组</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">invader_pixels = sense.load_image(&quot;space_invader.png&quot;, redraw=False)</span><br></pre></td></tr></table></figure><h2 id="clear-让-led-屏变成纯色-默认是关闭"><a href="#clear-让-led-屏变成纯色-默认是关闭" class="headerlink" title="clear 让 led 屏变成纯色,默认是关闭"></a>clear 让 led 屏变成纯色,默认是关闭</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">当只有一个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>pixel</code></td><td style="text-align:center">Tuple / List</td><td style="text-align:center">0-255</td><td style="text-align:center">(r, g, b)    数值,默认为<code>[0,0,0]</code></td></tr><tr><td style="text-align:center">当有三个参数的时候</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>r</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">红</td></tr><tr><td style="text-align:center"><code>g</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">绿</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">Integer</td><td style="text-align:center">0-255</td><td style="text-align:center">蓝</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">red = (255, 0, 0)</span><br><span class="line"></span><br><span class="line">sense.clear()  # no arguments defaults to off</span><br><span class="line">sleep(1)</span><br><span class="line">sense.clear(red)  # passing in an RGB tuple</span><br><span class="line">sleep(1)</span><br><span class="line">sense.clear(255, 255, 255)  # passing in r, g and b values of a colour</span><br></pre></td></tr></table></figure></p><h2 id="show-message-屏幕显示单个文字"><a href="#show-message-屏幕显示单个文字" class="headerlink" title="show_message 屏幕显示单个文字"></a>show_message 屏幕显示单个文字</h2><p>就是街头广告灯的那种 led 滚屏啦!</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>text_string</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">将要滚屏的字母</td></tr><tr><td style="text-align:center"><code>scroll_speed</code></td><td style="text-align:center">Float</td><td style="text-align:center">任意浮点数</td><td style="text-align:center">滚屏速度,默认 0.1</td></tr><tr><td style="text-align:center"><code>text_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">文字颜色,默认[255,255,255]</td></tr><tr><td style="text-align:center"><code>back_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">背景颜色,默认[0,0,0]</td></tr></tbody></table><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.show_message(&quot;One small step for Pi!&quot;, text_colour=[255, 0, 0])</span><br></pre></td></tr></table></figure><h2 id="show-letter-单屏显示字母"><a href="#show-letter-单屏显示字母" class="headerlink" title="show_letter  单屏显示字母"></a>show_letter  单屏显示字母</h2><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>s</code></td><td style="text-align:center">String</td><td style="text-align:center"><code>...</code></td><td style="text-align:center">将要显示的字母</td></tr><tr><td style="text-align:center"><code>text_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">文字颜色,默认[255,255,255]</td></tr><tr><td style="text-align:center"><code>back_colour</code></td><td style="text-align:center">List</td><td style="text-align:center">[R,G,B]]</td><td style="text-align:center">背景颜色,默认[0,0,0]</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">letters = &quot;ABCDEFGHIJKLMNOPQRSTUVWSYZ&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in letters:</span><br><span class="line">    sense.show_letter(str(i))</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure></p><h2 id="low-light-调低亮度"><a href="#low-light-调低亮度" class="headerlink" title="low_light  调低亮度"></a>low_light  调低亮度</h2><p>如果觉得亮度有点刺眼的话可以开低亮度模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.clear(255, 255, 255)</span><br><span class="line">sense.low_light = True</span><br><span class="line">time.sleep(2)</span><br><span class="line">sense.low_light = False</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.clear(255, 127, 0)</span><br><span class="line"></span><br><span class="line">sense.set_pixels(question_mark)</span><br><span class="line"></span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line">old = sense.gamma</span><br><span class="line">sense.gamma = old[::-1]</span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sense.low_light = True</span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line">sense.low_light = False</span><br></pre></td></tr></table></figure><h2 id="gamma"><a href="#gamma" class="headerlink" title="gamma"></a>gamma</h2><p>For advanced users. Most users will just need the low_light Boolean property above. The Sense HAT python API uses 8 bit (0 to 255) colours for R, G, B. When these are written to the Linux frame buffer they’re bit shifted into RGB 5 6 5. The driver then converts them to RGB 5 5 5 before it passes them over to the ATTiny88 AVR for writing to the LEDs.<br>The gamma property allows you to specify a gamma lookup table for the final 5 bits of colour used. The lookup table is a list of 32 numbers that must be between 0 and 31. The value of the incoming 5 bit colour is used to index the lookup table and the value found at that position is then written to the LEDs.</p><blockquote><p>对于高级用户。大多数用户只需要上面的low_light布尔属性。这个感觉帽python API使用8位(0到255)的颜色为R,G,b。当这些被写入Linux框架缓冲区时，它们被位转换为RGB 5 6 5。然后，驱动程序将它们转换为RGB 5 5 5，然后将其传递给ATTiny88 AVR以写入led。<br>gamma属性允许您为使用的最后5位颜色指定一个伽马查找表。查找表是32个数字的列表，它们必须在0到31之间。传入的5位颜色的值用于索引查找表，然后将该位置上发现的值写入led。<br>—来自有道词典,因为暂时不知道用在哪里</p></blockquote><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">List</td><td style="text-align:center">长度为32的元组或列表，包含0到31之间的整数</td><td style="text-align:center">最后的5位颜色的查找表</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.clear(255, 127, 0)</span><br><span class="line"></span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line">sense.gamma = sense.gamma[::-1]</span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line">sense.low_light = True</span><br><span class="line">print(sense.gamma)</span><br><span class="line">time.sleep(2)</span><br><span class="line"></span><br><span class="line">sense.low_light = False</span><br></pre></td></tr></table></figure></p><h2 id="gamma-reset"><a href="#gamma-reset" class="headerlink" title="gamma_reset"></a>gamma_reset</h2><p>一个函数将gamma查找表重置为默认值，理想情况下，如果您已经对它进行了处理，并希望将它恢复到默认状态。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.clear(255, 127, 0)</span><br><span class="line">time.sleep(2)</span><br><span class="line">sense.gamma = [0] * 32  # Will turn the LED matrix off</span><br><span class="line">time.sleep(2)</span><br><span class="line">sense.gamma_reset()</span><br></pre></td></tr></table></figure></p><h1 id="环境感应器"><a href="#环境感应器" class="headerlink" title="环境感应器"></a>环境感应器</h1><h2 id="get-humidity-湿度"><a href="#get-humidity-湿度" class="headerlink" title="get_humidity 湿度"></a>get_humidity 湿度</h2><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">湿度的百分数</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">humidity = sense.get_humidity()</span><br><span class="line">print(&quot;Humidity: %s %%rH&quot; % humidity)  #Humidity: 13.8048038483 %rH</span><br><span class="line"></span><br><span class="line"># 同样效果</span><br><span class="line">print(sense.humidity)   #14.9011135101</span><br></pre></td></tr></table></figure></p><h2 id="get-temperature-温度"><a href="#get-temperature-温度" class="headerlink" title="get_temperature 温度"></a>get_temperature 温度</h2><p>返回值也是浮点数<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">temp = sense.get_temperature()</span><br><span class="line">print(&quot;Temperature: %s C&quot; % temp)   # Temperature: 33.0 C</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.temp)       # 33.0</span><br><span class="line">print(sense.temperature)    # 33.0</span><br></pre></td></tr></table></figure></p><h2 id="get-temperature-from-humidity-温度"><a href="#get-temperature-from-humidity-温度" class="headerlink" title="get_temperature_from_humidity 温度"></a>get_temperature_from_humidity 温度</h2><p>从湿度传感器获取当前温度(摄氏度)。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">temp = sense.get_temperature_from_humidity()</span><br><span class="line">print(&quot;Temperature: %s C&quot; % temp)</span><br></pre></td></tr></table></figure></p><h2 id="get-temperature-from-pressure-温度"><a href="#get-temperature-from-pressure-温度" class="headerlink" title="get_temperature_from_pressure 温度"></a>get_temperature_from_pressure 温度</h2><p>从压力传感器获取温度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">temp = sense.get_temperature_from_pressure()</span><br><span class="line">print(&quot;Temperature: %s C&quot; % temp)</span><br></pre></td></tr></table></figure></p><h2 id="get-pressure-压力"><a href="#get-pressure-压力" class="headerlink" title="get_pressure 压力"></a>get_pressure 压力</h2><p>获取压力参数</p><p>ps: 1Bar=0.1MPa=1000mba=1000hpa=100*7.5mmhg=75mmhg=1个大气压</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">单位为Millibars</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">pressure = sense.get_pressure()</span><br><span class="line">print(&quot;Pressure: %s Millibars&quot; % pressure)  #Pressure: 1024.56738281 Millibars</span><br><span class="line"></span><br><span class="line"># 同理</span><br><span class="line">print(sense.pressure)   # 1024.56738281</span><br></pre></td></tr></table></figure></p><h1 id="IMU-Sensor-惯性测量单元"><a href="#IMU-Sensor-惯性测量单元" class="headerlink" title="IMU Sensor 惯性测量单元"></a>IMU Sensor 惯性测量单元</h1><p>IMU(inertial measurement unit)传感器是三个传感器的组合，每个传感器分别有x、y和z轴。由于这个原因，它被认为是一个9自由度的传感器。</p><ul><li>陀螺仪(Gyroscope)</li><li>加速度计(Accelerometer)</li><li>指南针(Magnetometer)<br>这个API允许你在任何组合中使用这些传感器来测量方向或单独的传感器。</li></ul><h2 id="set-imu-config"><a href="#set-imu-config" class="headerlink" title="set_imu_config"></a>set_imu_config</h2><p>支持或禁用陀螺仪、加速度计和/或磁强计</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">类型</th><th style="text-align:center">可选参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>compass_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用指南针</td></tr><tr><td style="text-align:center"><code>gyro_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用陀螺仪</td></tr><tr><td style="text-align:center"><code>accel_enabled</code></td><td style="text-align:center">Boolean</td><td style="text-align:center"><code>TRUE</code>,<code>FALSE</code></td><td style="text-align:center">是否启用加速度计</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">sense.set_imu_config(False, True, False)  # 只开启陀螺仪</span><br></pre></td></tr></table></figure></p><h2 id="get-orientation-radians"><a href="#get-orientation-radians" class="headerlink" title="get_orientation_radians"></a>get_orientation_radians</h2><p>获取当前方向弧度,依据飞行器轴参数的  pitch, roll 和 yaw.<br><a href="https://segmentfault.com/a/1190000000408831" target="_blank" rel="noopener">理解传说中的roll、yaw、pitch</a><br><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="noopener">欧拉角</a></p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴弧度</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">orientation_rad = sense.get_orientation_radians()</span><br><span class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**orientation_rad)) # p: 0.0906969159842, r: -0.218863099813, y: 2.87161874771</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.orientation_radians) # &#123;&apos;yaw&apos;: 2.933598041534424, &apos;roll&apos;: -0.20759552717208862, &apos;pitch&apos;: 0.09733205288648605&#125;</span><br></pre></td></tr></table></figure></p><h2 id="get-orientation-degrees"><a href="#get-orientation-degrees" class="headerlink" title="get_orientation_degrees"></a>get_orientation_degrees</h2><p>以俯仰、翻滚和偏航的飞机主轴得到当前的方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">orientation = sense.get_orientation_degrees()</span><br><span class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**orientation)) # p: 359.368855623, r: 359.958133745, y: 24.4292643968</span><br></pre></td></tr></table></figure></p><h2 id="get-orientation"><a href="#get-orientation" class="headerlink" title="get_orientation"></a>get_orientation</h2><p>作用同<code>get_orientation_degrees</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">orientation = sense.get_orientation()</span><br><span class="line"></span><br><span class="line">print(sense.orientation) # &#123;&apos;yaw&apos;: 20.334569404489745, &apos;roll&apos;: 0.02406978340326997, &apos;pitch&apos;: 359.2895215347403&#125;</span><br></pre></td></tr></table></figure><h2 id="get-compass"><a href="#get-compass" class="headerlink" title="get_compass"></a>get_compass</h2><p>调用罗盘时会预先调用<code>set_imu_config</code>禁止掉重力计和加速度计的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">north = sense.get_compass()</span><br><span class="line">print(&quot;North: %s&quot; % north) # North: 351.031626941</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.compass) # 351.031626941</span><br></pre></td></tr></table></figure><h2 id="get-compass-raw"><a href="#get-compass-raw" class="headerlink" title="get_compass_raw"></a>get_compass_raw</h2><p>获取原始x、y和z轴的磁强计数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">字典对象索引的字符串x,y和z。表示磁场强度的值浮动轴的microteslas(µT)。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">raw = sense.get_compass_raw()</span><br><span class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw)) # x: 3.14855718613, y: 0.269534498453, z: -0.743863344193</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.compass_raw) # &#123;&apos;y&apos;: 0.4851621091365814, &apos;x&apos;: 5.667402744293213, &apos;z&apos;: -1.338953971862793&#125;</span><br></pre></td></tr></table></figure><h2 id="get-gyroscope"><a href="#get-gyroscope" class="headerlink" title="get_gyroscope"></a>get_gyroscope</h2><p>调用set_imu_config来禁用磁强计和加速计，然后只从陀螺仪获取当前方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">gyro_only = sense.get_gyroscope()</span><br><span class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**gyro_only))</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.gyro) # &#123;&apos;yaw&apos;: 0.0604013305118731, &apos;roll&apos;: 359.9494321175156, &apos;pitch&apos;: 359.9567423509234&#125;</span><br><span class="line">print(sense.gyroscope) # &#123;&apos;yaw&apos;: 0.0604013305118731, &apos;roll&apos;: 359.9494321175156, &apos;pitch&apos;: 359.9567423509234&#125;</span><br></pre></td></tr></table></figure><h2 id="get-gyroscope-raw"><a href="#get-gyroscope-raw" class="headerlink" title="get_gyroscope_raw"></a>get_gyroscope_raw</h2><p>获取原始x、y和z轴的陀螺仪数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">一个由字符串x、y和z索引的字典对象。这些值是按每秒弧度表示轴的旋转强度的浮点数。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">raw = sense.get_gyroscope_raw()</span><br><span class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw))</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.gyro_raw)</span><br><span class="line">print(sense.gyroscope_raw)</span><br><span class="line"></span><br><span class="line"># x: 1.03765261173, y: 2.46352291107, z: 0.185390725732</span><br><span class="line"># &#123;&apos;y&apos;: 1.5728815793991089, &apos;x&apos;: 0.34309887886047363, &apos;z&apos;: 0.2984008193016052&#125;</span><br><span class="line"># &#123;&apos;y&apos;: 0.8343454599380493, &apos;x&apos;: 0.163504496216774, &apos;z&apos;: 0.4767734408378601&#125;</span><br></pre></td></tr></table></figure><h2 id="get-accelerometer"><a href="#get-accelerometer" class="headerlink" title="get_accelerometer"></a>get_accelerometer</h2><p>调用set_imu_config来禁用磁力仪和陀螺仪，然后从加速度计得到当前的方向。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">由俯仰角<code>pitch</code>,偏航角<code>yaw</code>,翻滚角<code>roll</code>组成的字典key 值,value 为轴角度</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">accel_only = sense.get_accelerometer()</span><br><span class="line">print(&quot;p: &#123;pitch&#125;, r: &#123;roll&#125;, y: &#123;yaw&#125;&quot;.format(**accel_only))</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.accel)</span><br><span class="line">print(sense.accelerometer)</span><br><span class="line"></span><br><span class="line"># p: 3.76471788135, r: 10.0814548376, y: 0.0</span><br><span class="line"># &#123;&apos;yaw&apos;: 4.5454772552392335e-07, &apos;roll&apos;: 10.082596332952239, &apos;pitch&apos;: 3.7639588765826475&#125;</span><br><span class="line"># &#123;&apos;yaw&apos;: 4.5454772552392335e-07, &apos;roll&apos;: 10.082596332952239, &apos;pitch&apos;: 3.7639588765826475&#125;</span><br></pre></td></tr></table></figure><h2 id="get-accelerometer-raw"><a href="#get-accelerometer-raw" class="headerlink" title="get_accelerometer_raw"></a>get_accelerometer_raw</h2><p>获取原始x、y和z轴加速度计数据。</p><table><thead><tr><th style="text-align:center">返回类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Dictionary</td><td style="text-align:center">一个由字符串x、y和z索引的字典对象。这些值代表了在Gs中轴的加速度强度。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">raw = sense.get_accelerometer_raw()</span><br><span class="line">print(&quot;x: &#123;x&#125;, y: &#123;y&#125;, z: &#123;z&#125;&quot;.format(**raw))</span><br><span class="line"></span><br><span class="line"># alternatives</span><br><span class="line">print(sense.accel_raw)</span><br><span class="line">print(sense.accelerometer_raw)</span><br><span class="line"></span><br><span class="line"># x: -0.0634367614985, y: 0.172625526786, z: 0.974787354469</span><br><span class="line"># &#123;&apos;y&apos;: 0.1738394945859909, &apos;x&apos;: -0.06516461074352264, &apos;z&apos;: 0.9757621884346008&#125;</span><br><span class="line"># &#123;&apos;y&apos;: 0.17286831140518188, &apos;x&apos;: -0.06565827876329422, &apos;z&apos;: 0.9735689163208008&#125;</span><br></pre></td></tr></table></figure><h1 id="Joystick-操纵杆"><a href="#Joystick-操纵杆" class="headerlink" title="Joystick 操纵杆"></a>Joystick 操纵杆</h1><h2 id="操纵事件"><a href="#操纵事件" class="headerlink" title="操纵事件"></a>操纵事件</h2><p>描述操纵杆事件的元组。包含三个命名参数:</p><ul><li>时间戳—事件发生的时间，作为秒数(与内置时间函数相同的格式)</li><li>方向-操纵杆移动的方向，作为一个字符串(“向上”，“向下”，“左”，“右”，“中间”)</li><li>动作—发生的动作，作为一个字符串(“按压”，“释放”，“持有”)</li></ul><p>这个tuple类型被一些joystick方法使用，要么作为返回类型，要么是参数的类型。</p><h2 id="wait-for-event"><a href="#wait-for-event" class="headerlink" title="wait_for_event"></a>wait_for_event</h2><p>在发生<code>joystick</code>事件之前阻止执行，然后返回一个表示发生的事件的<code>InputEvent</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">event = sense.stick.wait_for_event()</span><br><span class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</span><br><span class="line">sleep(0.1)</span><br><span class="line">event = sense.stick.wait_for_event()</span><br><span class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，如果你将操纵杆简单地推到一个单一的方向，你就会看到两个事件输出:一个被压的动作和一个释放的动作。可选的emptybuffer可以用于在等待新事件之前刷新任何未决事件。试试下面的脚本，看看有什么不同:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">event = sense.stick.wait_for_event()</span><br><span class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</span><br><span class="line">sleep(0.1)</span><br><span class="line">event = sense.stick.wait_for_event(emptybuffer=True)</span><br><span class="line">print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</span><br></pre></td></tr></table></figure></p><h2 id="get-events"><a href="#get-events" class="headerlink" title="get_events"></a>get_events</h2><p>返回自最后一次调用<code>get_events</code>或<code>wait_for_event</code>之后发生的所有事件的<code>InputEvent</code> tuple的列表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line">while True:</span><br><span class="line">    for event in sense.stick.get_events():</span><br><span class="line">        print(&quot;The joystick was &#123;&#125; &#123;&#125;&quot;.format(event.action, event.direction))</span><br></pre></td></tr></table></figure></p><h2 id="direction-up-direction-left-direction-right-direction-down-direction-middle-direction-any"><a href="#direction-up-direction-left-direction-right-direction-down-direction-middle-direction-any" class="headerlink" title="direction_up, direction_left, direction_right, direction_down, direction_middle, direction_any"></a>direction_up, direction_left, direction_right, direction_down, direction_middle, direction_any</h2><p>这些属性可以被分配一个函数，当操纵杆按在相关的方向(或者在<code>direction_any</code>的任何方向上)时，它就会被调用。分配的函数要么不接受参数，要么必须接受一个参数，该参数将传递给相关的<code>InputEvent</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">from sense_hat import SenseHat, ACTION_PRESSED, ACTION_HELD, ACTION_RELEASED</span><br><span class="line">from signal import pause</span><br><span class="line"></span><br><span class="line">x = 3</span><br><span class="line">y = 3</span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">def clamp(value, min_value=0, max_value=7):</span><br><span class="line">    return min(max_value, max(min_value, value))</span><br><span class="line"></span><br><span class="line">def pushed_up(event):</span><br><span class="line">    global y</span><br><span class="line">    if event.action != ACTION_RELEASED:</span><br><span class="line">        y = clamp(y - 1)</span><br><span class="line"></span><br><span class="line">def pushed_down(event):</span><br><span class="line">    global y</span><br><span class="line">    if event.action != ACTION_RELEASED:</span><br><span class="line">        y = clamp(y + 1)</span><br><span class="line"></span><br><span class="line">def pushed_left(event):</span><br><span class="line">    global x</span><br><span class="line">    if event.action != ACTION_RELEASED:</span><br><span class="line">        x = clamp(x - 1)</span><br><span class="line"></span><br><span class="line">def pushed_right(event):</span><br><span class="line">    global x</span><br><span class="line">    if event.action != ACTION_RELEASED:</span><br><span class="line">        x = clamp(x + 1)</span><br><span class="line"></span><br><span class="line">def refresh():</span><br><span class="line">    sense.clear()</span><br><span class="line">    sense.set_pixel(x, y, 255, 255, 255)</span><br><span class="line"></span><br><span class="line">sense.stick.direction_up = pushed_up</span><br><span class="line">sense.stick.direction_down = pushed_down</span><br><span class="line">sense.stick.direction_left = pushed_left</span><br><span class="line">sense.stick.direction_right = pushed_right</span><br><span class="line">sense.stick.direction_any = refresh</span><br><span class="line">refresh()</span><br><span class="line">pause()</span><br></pre></td></tr></table></figure></p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><blockquote><p><a href="http://blog.justwe.site/2017/11/30/Raspberry-pi3-sense-HAT-api/">博客原文</a><br><a href="https://pythonhosted.org/sense-hat/api/" target="_blank" rel="noopener">api 原文</a><br><a href="https://projects.raspberrypi.org/en/projects/sense-hat-advent-calendar" target="_blank" rel="noopener">树莓派+senseHAT 的一个入门项目</a><br><a href="https://www.raspberrypi.org/learning/astro-pi-guide/" target="_blank" rel="noopener">来自官方的 astro-pi 简介</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从官方给的 api 文档中硬翻的…&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3安装 Sense HAT</title>
    <link href="http://blog.justwe.site/2017/11/29/Raspberry-pi3-install-sense-HAT/"/>
    <id>http://blog.justwe.site/2017/11/29/Raspberry-pi3-install-sense-HAT/</id>
    <published>2017-11-29T05:21:26.000Z</published>
    <updated>2017-11-29T05:50:31.198Z</updated>
    
    <content type="html"><![CDATA[<p>因为感觉各种感应器的 GPIO 有点乱,干脆买了一个官方提供的集成板来玩,这样看着也整体一些…<br><a id="more"></a></p><p>英文不错的同学出门右转:</p><blockquote><p><a href="https://www.raspberrypi.org/documentation/hardware/sense-hat/" target="_blank" rel="noopener">官方提供的一个说明</a><br><a href="https://pythonhosted.org/sense-hat/" target="_blank" rel="noopener">一个 sense-hat 的接口文档</a><br><a href="https://www.raspberrypi.org/documentation/hardware/sense-hat/images/Sense-HAT-V1_0.pdf" target="_blank" rel="noopener">各感应模块的针脚示意图</a></p></blockquote><h2 id="更新系统-Rasbian"><a href="#更新系统-Rasbian" class="headerlink" title="更新系统(Rasbian)"></a>更新系统(Rasbian)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>可能得等一大会儿….</p><h2 id="安装扩展模块"><a href="#安装扩展模块" class="headerlink" title="安装扩展模块"></a>安装扩展模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install sense-hat</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><p>运行一个 demo,</p><blockquote><p><a href="https://github.com/RPi-Distro/python-sense-hat/tree/master/examples" target="_blank" rel="noopener">官方提供的一些 demo</a></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sense_hat <span class="keyword">import</span> SenseHat</span><br><span class="line"></span><br><span class="line">sense = SenseHat()</span><br><span class="line"></span><br><span class="line">r = <span class="number">255</span></span><br><span class="line">g = <span class="number">0</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">msleep = <span class="keyword">lambda</span> x: time.sleep(x / <span class="number">1000.0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_colour</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    <span class="keyword">global</span> g</span><br><span class="line">    <span class="keyword">global</span> b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">255</span> <span class="keyword">and</span> g &lt; <span class="number">255</span> <span class="keyword">and</span> b == <span class="number">0</span>):</span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="number">255</span> <span class="keyword">and</span> r &gt; <span class="number">0</span> <span class="keyword">and</span> b == <span class="number">0</span>):</span><br><span class="line">        r -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (g == <span class="number">255</span> <span class="keyword">and</span> b &lt; <span class="number">255</span> <span class="keyword">and</span> r == <span class="number">0</span>):</span><br><span class="line">        b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">255</span> <span class="keyword">and</span> g &gt; <span class="number">0</span> <span class="keyword">and</span> r == <span class="number">0</span>):</span><br><span class="line">        g -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">255</span> <span class="keyword">and</span> r &lt; <span class="number">255</span> <span class="keyword">and</span> g == <span class="number">0</span>):</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="number">255</span> <span class="keyword">and</span> b &gt; <span class="number">0</span> <span class="keyword">and</span> g == <span class="number">0</span>):</span><br><span class="line">        b -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sense.clear([r, g, b])</span><br><span class="line">    msleep(<span class="number">2</span>)</span><br><span class="line">    next_colour()</span><br></pre></td></tr></table></figure><p>如果运行是出现下列报错的话:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;demo1.py&quot;, line 38, in &lt;module&gt;</span><br><span class="line">    sense.clear([r, g, b])</span><br><span class="line">  File &quot;/usr/lib/python2.7/dist-packages/sense_hat/sense_hat.py&quot;, line 413, in clear</span><br><span class="line">    self.set_pixels([colour] * 64)</span><br><span class="line">  File &quot;/usr/lib/python2.7/dist-packages/sense_hat/sense_hat.py&quot;, line 294, in set_pixels</span><br><span class="line">    f.seek(map[index // 8][index % 8] * 2)  # row, column</span><br></pre></td></tr></table></figure></p><p>还是比较好解决的,更改配置就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /boot/config.txt</span><br><span class="line">//找到 dtoverlay 这一行修改成</span><br><span class="line">dtoverlay=rpi-sense</span><br><span class="line">//然后 wq 退出</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></p><p>这是我第一次安装时碰到的问题</p><blockquote><p><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;t=173113" target="_blank" rel="noopener">解决方案来源</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为感觉各种感应器的 GPIO 有点乱,干脆买了一个官方提供的集成板来玩,这样看着也整体一些…&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派的一些报错问题</title>
    <link href="http://blog.justwe.site/2017/11/28/Raspberry-pi3-local-lang/"/>
    <id>http://blog.justwe.site/2017/11/28/Raspberry-pi3-local-lang/</id>
    <published>2017-11-28T06:50:49.000Z</published>
    <updated>2017-11-29T05:23:22.197Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派出现本地语言出现问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">LANGUAGE = <span class="string">"en_US.UTF-8"</span>,</span><br><span class="line">LC_ALL = <span class="string">"en_US.UTF-8"</span>,</span><br><span class="line">LC_CTYPE = <span class="string">"zh_CN.UTF-8"</span>,</span><br><span class="line">LANG = <span class="string">"en_US.UTF-8"</span></span><br><span class="line">    are supported and installed on your system.</span><br><span class="line">perl: warning: Falling back to the standard locale (<span class="string">"C"</span>).</span><br><span class="line">locale: Cannot <span class="built_in">set</span> LC_CTYPE to default locale: No such file or directory</span><br><span class="line">locale: Cannot <span class="built_in">set</span> LC_MESSAGES to default locale: No such file or directory</span><br><span class="line">locale: Cannot <span class="built_in">set</span> LC_ALL to default locale: No such file or directory</span><br><span class="line">/usr/sbin/dpkg-reconfigure must be run as root</span><br></pre></td></tr></table></figure></p><p>解决方法其实已经给出<br>运行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></p><p>设置 utf8 就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树莓派出现本地语言出现问题&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>树莓派上安装 Golang</title>
    <link href="http://blog.justwe.site/2017/11/22/Raspberry-Pi3-golang-env/"/>
    <id>http://blog.justwe.site/2017/11/22/Raspberry-Pi3-golang-env/</id>
    <published>2017-11-22T02:30:03.000Z</published>
    <updated>2017-11-22T03:27:46.208Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包,<br>在树莓派上一定要选<strong>linux-armv61</strong>这个版本啊</p><blockquote><p><a href="https://golang.org/dl/" target="_blank" rel="noopener">golang 各版本的下载列表</a></p></blockquote><a id="more"></a><p><code>$</code> 开头的都是在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-armv6l.tar.gz</span><br><span class="line">$ tar -C /usr/local -zvxf go1.8.3.linux-armv6l.tar.gz</span><br><span class="line">$cd / &amp;&amp; mkdir -p /data/www/go</span><br><span class="line">$ sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 在文件末尾添加如下内容</span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br><span class="line"># 添加如下设置项</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/data/www/go</span><br><span class="line">export PATH=$GOROOT/bin:$PATH</span><br><span class="line"></span><br><span class="line">//保存退出后让环境变量立即生效</span><br><span class="line">$ source /etc/profile</span><br><span class="line">$ go version</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派上需要进行编译安装,不过很简单,而且 golang 官方也有 arm 平台的编译包,&lt;br&gt;在树莓派上一定要选&lt;strong&gt;linux-armv61&lt;/strong&gt;这个版本啊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/dl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;golang 各版本的下载列表&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>用树莓派3搞一个信号灯输出</title>
    <link href="http://blog.justwe.site/2017/11/21/Raspberry-Pi3-traffic-light/"/>
    <id>http://blog.justwe.site/2017/11/21/Raspberry-Pi3-traffic-light/</id>
    <published>2017-11-21T06:26:24.000Z</published>
    <updated>2017-11-22T08:10:20.125Z</updated>
    
    <content type="html"><![CDATA[<p>通过一个<code>python</code>脚本跑一个监控 cpu 的交通信号灯,运行环境是官方的系统 <code>Raspbian</code></p><a id="more"></a><h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><p>有编程基础的同学就直接上手好了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># to use with Pi Traffic Light</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">GREEN = <span class="number">13</span></span><br><span class="line">YELLOW = <span class="number">19</span></span><br><span class="line">RED = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pin Setup:</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)   <span class="comment"># Broadcom pin-numbering scheme.</span></span><br><span class="line">GPIO.setwarnings(<span class="keyword">False</span>)</span><br><span class="line">GPIO.setup(GREEN, GPIO.OUT)</span><br><span class="line">GPIO.setup(YELLOW, GPIO.OUT)</span><br><span class="line">GPIO.setup(RED, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">      cpu_pc = psutil.cpu_percent(interval=<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">print</span> <span class="string">'CPU: %d%%'</span> % (cpu_pc)</span><br><span class="line">      <span class="keyword">if</span> cpu_pc &lt;= <span class="number">50</span>:</span><br><span class="line">         GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(GREEN, <span class="keyword">True</span>)</span><br><span class="line">      <span class="keyword">if</span> <span class="number">50</span> &lt; cpu_pc &lt; <span class="number">90</span>:</span><br><span class="line">         GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(YELLOW, <span class="keyword">True</span>)</span><br><span class="line">      <span class="keyword">if</span> cpu_pc &gt;=<span class="number">90</span> :</span><br><span class="line">         GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">         GPIO.output(RED, <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Good bye"</span></span><br><span class="line">    GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure><ul><li>如果出现提示<code>****line 5, in &lt;module&gt; import psutil*****</code> 提示缺少<code>psutil</code>模块,就按照下面的<br>方法安装:<blockquote><p><a href="http://m.blog.csdn.net/ronsarah/article/details/74629950" target="_blank" rel="noopener">代码原文</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/source/p/psutil/psutil-3.2.2.tar.gz</span><br><span class="line">cd psutil-3.2.2</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>如果报错检查 gcc,python-devel 是否安装(官方系统的话会把这些环境默认安装好,不用管的)</p><h1 id="针脚怎么插"><a href="#针脚怎么插" class="headerlink" title="针脚怎么插?"></a>针脚怎么插?</h1><p>软件方面的搞定了,接下来需要搞明白怎么配置硬件了,这是树莓派系列的针脚图(咱们这是3代,最右边的那个):<br><img src="http://blog-image.onlyoneip.com/20160807030334648" alt="树莓派针脚"><br>我又从网上找的一张实物图<br><img src="http://blog-image.onlyoneip.com/WX20171121-153100@2x.png" alt="树莓派实物图"><br>这是我淘来的信号灯<br><img src="http://blog-image.onlyoneip.com/WechatIMG567.jpeg" alt="信号灯"><br>这两个都是针脚型的,但是我有一个40针脚的扁平线可以用来对接,按照信号灯指定的端口插就行</p><p>插好以后就直接运行脚本就行比如这个脚本叫做 <code>traffic.py</code>,就运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python ./traffic.py</span><br></pre></td></tr></table></figure></p><p>就能看到效果</p><h1 id="代码都做了什么"><a href="#代码都做了什么" class="headerlink" title="代码都做了什么?"></a>代码都做了什么?</h1><ol><li><p>引入需要用到的模块, <code>RPi.GPIO</code>针脚输出,<code>psutil</code>用于系统监控</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># to use with Pi Traffic Light</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> psutil</span><br></pre></td></tr></table></figure></li><li><p>定义三个灯输出的针脚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GREEN = <span class="number">13</span></span><br><span class="line">YELLOW = <span class="number">19</span></span><br><span class="line">RED = <span class="number">26</span></span><br></pre></td></tr></table></figure></li><li><p>对指定的针脚进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pin Setup:</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)   </span><br><span class="line">GPIO.setwarnings(<span class="keyword">False</span>)</span><br><span class="line">GPIO.setup(GREEN, GPIO.OUT)</span><br><span class="line">GPIO.setup(YELLOW, GPIO.OUT)</span><br><span class="line">GPIO.setup(RED, GPIO.OUT)</span><br></pre></td></tr></table></figure><ul><li>这里的 <code>GPIO.setmode(GPIO.BCM)</code>就是指定了输出模式为按照信道编号,就是上图中的<code>GPIO2,GPIO3...</code>这类<br>如果<code>GPIO.setmode(GPIO.BOARD)</code>就是<code>Pin No.1 =&gt; GPIO1</code>,使用物理针脚的编号作为输出信道</li><li><code>GPIO.setwarnings(False)</code> 关闭warning 提示</li><li><code>GPIO.setup(GREEN, GPIO.OUT)</code> 将对应的信道设置为输出信道</li></ul></li><li><p>通过 while 循环检索 cpu 的使用情况并输出,且根据所占百分比显示相应的灯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">   cpu_pc = psutil.cpu_percent(interval=<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">print</span> <span class="string">'CPU: %d%%'</span> % (cpu_pc)</span><br><span class="line">   <span class="keyword">if</span> cpu_pc &lt;= <span class="number">50</span>:</span><br><span class="line">      GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(GREEN, <span class="keyword">True</span>)</span><br><span class="line">   <span class="keyword">if</span> <span class="number">50</span> &lt; cpu_pc &lt; <span class="number">90</span>:</span><br><span class="line">      GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(YELLOW, <span class="keyword">True</span>)</span><br><span class="line">   <span class="keyword">if</span> cpu_pc &gt;=<span class="number">90</span> :</span><br><span class="line">      GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">      GPIO.output(RED, <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ul><li><code>GPIO.output(GREEN, False)</code>和<code>GPIO.output(GREEN, True)</code>猜都能猜到是控制输出的啦</li></ul></li><li><p>对于程序退出的操作:把灯全关了,再调用<code>GPIO.cleanup()</code>释放资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    // some code....</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Good bye"</span></span><br><span class="line">    GPIO.output(GREEN, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.output(YELLOW, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.output(RED, <span class="keyword">False</span>)</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个 demo 只是对 GPIO 的输出进行展示,还没涉及到信号输入,接下来<strong>如果有空</strong>的话我会做一个输入的 demo</p><p><a href="http://itindex.net/detail/55339-%E6%9E%81%E5%AE%A2-%E6%89%8B%E6%8A%8A-%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="noopener">相关-极客大讲堂：手把手教你用树莓派控制红绿灯</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一个&lt;code&gt;python&lt;/code&gt;脚本跑一个监控 cpu 的交通信号灯,运行环境是官方的系统 &lt;code&gt;Raspbian&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>转 烧录树莓派系统(新手版)</title>
    <link href="http://blog.justwe.site/2017/11/21/Raspberry-Pi3-install/"/>
    <id>http://blog.justwe.site/2017/11/21/Raspberry-Pi3-install/</id>
    <published>2017-11-21T06:24:29.000Z</published>
    <updated>2017-11-22T09:07:59.308Z</updated>
    
    <content type="html"><![CDATA[<p>怎么在 mac 上给 TF 卡烧录一个树莓派系统(为什么没有 win 的?因为 win 上的烧录软件很好用啊!混蛋!)</p><a id="more"></a><h1 id="下载树莓派镜像"><a href="#下载树莓派镜像" class="headerlink" title="下载树莓派镜像"></a>下载树莓派镜像</h1><p>首先需要下载个系统镜像</p><blockquote><p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">官方镜像列表</a></p></blockquote><ul><li>RASPBIAN :这是树莓派为自己定制的系统,基于 Debian,原生支持最好,新手强烈推荐桌面版的</li><li>UBUNTU MATE :ubuntu 的 mate 版本,习惯使用 ubuntu 的选这个</li><li>SNAPPY UBUNTU CORE :仅包含 ubuntu 16.04 内核的版本,如果做 IoT 的据说用这个很不错,但是如果做网络服务器不咋好用<br>其他的比如 WIN10 的这种有需要的自取</li></ul><h1 id="格式化-TF-卡"><a href="#格式化-TF-卡" class="headerlink" title="格式化 TF 卡"></a>格式化 TF 卡</h1><p>先用读卡机器插到 mac 上,用系统自带的 <code>磁盘工具</code> 格式化一下 tf 卡,选择抹掉,格式为<code>MS-DOS(FAT)</code>,名字随便,写完系统就没用了</p><p>打开 <code>终端</code> 使用<code>df</code>名称查看当前已挂载的卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ df</span><br><span class="line">Filesystem    512-blocks      Used Available Capacity  iused   ifree %iused  Mounted on</span><br><span class="line">/dev/disk1     233269248 218788512  13968736    94% 27412562 1746092   94%   /</span><br><span class="line">devfs                374       374         0   100%      648       0  100%   /dev</span><br><span class="line">map -hosts             0         0         0   100%        0       0  100%   /net</span><br><span class="line">map auto_home          0         0         0   100%        0       0  100%   /home</span><br><span class="line">/dev/disk2s1    31100416      4992  31095424     1%        0       0  100%   /Volumes/Pi</span><br></pre></td></tr></table></figure></p><p>基本商最后一行就是你的 tf 卡,/Volumes/Pi 这个 Pi 就是刚才格式化 tf 卡的时候输入的名字</p><p>使用diskutil unmount卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ diskutil unmount /dev/disk2s1</span><br><span class="line">Volume Pi on disk2s1 unmounted</span><br></pre></td></tr></table></figure></p><p>diskutil list 确认设备,这里是 16G 的卡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ diskutil list</span><br><span class="line">/dev/disk2</span><br><span class="line">   #:                       TYPE NAME                    SIZE       IDENTIFIER</span><br><span class="line">   0:     FDisk_partition_scheme                        *15.9 GB    disk2</span><br><span class="line">   1:                 DOS_FAT_32 Pi                      15.9 GB    disk2s1</span><br></pre></td></tr></table></figure></p><p>进入你下载好镜像文件的目录下,使用 <code>dd</code> 命令将镜像写入</p><blockquote><p>PS /dev/disk2s1是分区，/dev/disk2是块设备，/dev/rdisk2是原始字符设备</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dd bs=4m if=2017-09-07-raspbian-stretch.img of=/dev/rdisk2</span><br><span class="line">781+1 records in</span><br><span class="line">781+1 records out</span><br><span class="line">3276800000 bytes transferred in 194.134151 secs (16879050 bytes/sec)</span><br></pre></td></tr></table></figure><p><code>if</code>后是镜像的地址,如果是当前目录地址的话直接输入文件名就行, <code>of</code>就是要写入的设备,执行的时候会感觉卡一会,大概30s,正常现象<br>这时候这张 tf 卡就算是烧录好系统了,插到派上启动就行</p><p>这个时候你需要鼠标,键盘,有 hdmi 的显示器,插上 pi 就能启动了,可以在左上角菜单中<code>preference</code>中进行各种设置了,在界面可以很方便的设置 wifi<br>使用网线插入路由器的话,可以在路由器的管理界面中找到设备名,默认设备名为<code>raspberry</code><br>进行 ssh 链接,用户命是 <code>pi</code>,密码 <code>raspberry</code>,或者你自己设置的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@192.168.66.207</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/ccforward/cc/issues/25" target="_blank" rel="noopener">转载原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;怎么在 mac 上给 TF 卡烧录一个树莓派系统(为什么没有 win 的?因为 win 上的烧录软件很好用啊!混蛋!)&lt;/p&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Raspberry" scheme="http://blog.justwe.site/tags/Raspberry/"/>
    
      <category term="MacOS" scheme="http://blog.justwe.site/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>转 Json移除非法 Utf8字符串</title>
    <link href="http://blog.justwe.site/2017/11/08/php-json-error/"/>
    <id>http://blog.justwe.site/2017/11/08/php-json-error/</id>
    <published>2017-11-08T03:17:21.000Z</published>
    <updated>2017-11-08T03:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>当 json_decode 解析为 <code>null</code> 的时候怎么处理</li><li>当 json 中出现非法 utf8 时怎么处理</li></ul><a id="more"></a><h3 id="失败时返回NULL"><a href="#失败时返回NULL" class="headerlink" title="失败时返回NULL"></a>失败时返回NULL</h3><p>当返回 <code>null</code> 的时候,可以用<code>json_last_error()</code>根据返回码来判断</p><p><strong>如果 php 版本过低的话将会出现错误码反馈不全的问题</strong>,返回值是<code>JSON_ERROR_NONE (0)</code><br>这是示例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//  $json = '&#123;"a":1,"b":2,"c":3,"d":4,"e":5, "name":"Corwien"&#125;';</span></span><br><span class="line">$json = <span class="string">'&#123;"a":1,"b":2,"c":3,"d":4,"e":5, "name":&#125;'</span>;  <span class="comment">//错误的json格式</span></span><br><span class="line">$result = json_decode($json, <span class="keyword">true</span>);</span><br><span class="line"> <span class="keyword">if</span>(!$result)</span><br><span class="line"> &#123;</span><br><span class="line">       <span class="comment">//error handle ,错误处理</span></span><br><span class="line">       $ret = json_last_error();</span><br><span class="line">       print_r($ret);   <span class="comment">//打印为： 4,查错误信息表，可知是语法错误</span></span><br><span class="line"></span><br><span class="line"> &#125;   </span><br><span class="line"></span><br><span class="line">json_last_error错误msg对照表：</span><br><span class="line"><span class="number">0</span> = JSON_ERROR_NONE</span><br><span class="line"><span class="number">1</span> = JSON_ERROR_DEPTH</span><br><span class="line"><span class="number">2</span> = JSON_ERROR_STATE_MISMATCH</span><br><span class="line"><span class="number">3</span> = JSON_ERROR_CTRL_CHAR</span><br><span class="line"><span class="number">4</span> = JSON_ERROR_SYNTAX</span><br><span class="line"><span class="number">5</span> = JSON_ERROR_UTF8</span><br></pre></td></tr></table></figure></p><h3 id="如何处理json中的非法utf8字符"><a href="#如何处理json中的非法utf8字符" class="headerlink" title="如何处理json中的非法utf8字符"></a>如何处理json中的非法utf8字符</h3><p>如果出现 <code>JSON_ERROR_SYNTAX</code> 这个错误码的时候,常见的要么是其中的双引号单引号问题,要么是<br>出现了 <code>/r/n</code>之类的结尾问题,还有一种比较烦的情况就是错误的 utf8编码</p><p>解决问题:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reject overly long 2 byte sequences, as well as characters above U+10000 and replace with ?</span></span><br><span class="line">$some_string = preg_replace(<span class="string">'/[\x00-\x08\x10\x0B\x0C\x0E-\x19\x7F]'</span>.</span><br><span class="line"> <span class="string">'|[\x00-\x7F][\x80-\xBF]+'</span>.</span><br><span class="line"> <span class="string">'|([\xC0\xC1]|[\xF0-\xFF])[\x80-\xBF]*'</span>.</span><br><span class="line"> <span class="string">'|[\xC2-\xDF]((?![\x80-\xBF])|[\x80-\xBF]&#123;2,&#125;)'</span>.</span><br><span class="line"> <span class="string">'|[\xE0-\xEF](([\x80-\xBF](?![\x80-\xBF]))|(?![\x80-\xBF]&#123;2&#125;)|[\x80-\xBF]&#123;3,&#125;)/S'</span>,</span><br><span class="line"> <span class="string">'?'</span>, $some_string );</span><br><span class="line"></span><br><span class="line"><span class="comment">//reject overly long 3 byte sequences and UTF-16 surrogates and replace with ?</span></span><br><span class="line">$some_string = preg_replace(<span class="string">'/\xE0[\x80-\x9F][\x80-\xBF]'</span>.</span><br><span class="line"> <span class="string">'|\xED[\xA0-\xBF][\x80-\xBF]/S'</span>,<span class="string">'?'</span>, $some_string );</span><br></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000006154011" target="_blank" rel="noopener">原文</a><br><a href="https://magp.ie/2011/01/06/remove-non-utf8-characters-from-string-with-php/" target="_blank" rel="noopener">utf8代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;当 json_decode 解析为 &lt;code&gt;null&lt;/code&gt; 的时候怎么处理&lt;/li&gt;
&lt;li&gt;当 json 中出现非法 utf8 时怎么处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Js Promise 对象</title>
    <link href="http://blog.justwe.site/2017/10/31/js-promise/"/>
    <id>http://blog.justwe.site/2017/10/31/js-promise/</id>
    <published>2017-10-31T15:11:45.000Z</published>
    <updated>2017-11-05T13:56:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们本次要了解一下 es6 中的 Promise 对象</p><a id="more"></a><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><p>在 ES6 中函数有一个很明显的区别就是一些异步函数中不再是使用回调函数<code>callback()</code>,而是<code>then()</code><br>方法来进行回调后的处理,这里<code>then()</code>就是我们今天要说的<code>Promise()</code>对象所包含的方法<br>举个例子:<br>使用回调函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"It succeeded with "</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">failureCallback</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"It failed with "</span> + error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">success,error</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result is :'</span> + num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    success(<span class="string">'yes'</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    error(<span class="string">'no'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething(successCallback, failureCallback);</span><br></pre></td></tr></table></figure></p><p>使用 Promise 对象:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCallback</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"It succeeded with "</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">failureCallback</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"It failed with "</span> + error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">standard</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="built_in">Math</span>.random() * <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'result is :'</span> + num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num &gt; standard)&#123;</span><br><span class="line">      resolve(<span class="string">'yes'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      reject(<span class="string">'no'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething(<span class="number">5</span>).then(successCallback).catch(failureCallback);</span><br></pre></td></tr></table></figure></p><p><code>resolve</code> 和 <code>reject</code> 这两个函数是系统提供的内置函数,负责改变<code>Promise</code>的状态<br>这样的写法和之前没什么大变化,但是代码的表达方式更清晰了,而不是在一层层的 callback 中寻找执行<br>的节点, <code>then()</code>方法也可以有第二个参数,第二个参数代表着失败时要执行的函数,以上面的例子来说:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething(<span class="number">5</span>).then(successCallback,failureCallback);</span><br></pre></td></tr></table></figure></p><p>这样写也是没差,但是使用 <code>catch()</code> 我感觉是一种更优的选择,原因我后面再说</p><p>这里是一个图片异步加载的例子:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> url = <span class="string">'http://wx3.sinaimg.cn/thumb150/9ccb8305ly1fd09eeednzg208q07wh0l.gif'</span>;</span></span><br><span class="line"><span class="javascript">  loadImageAsync(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="undefined">    content.appendChild(res);</span></span><br><span class="line"><span class="javascript">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="undefined">    content.innerHTML = error;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'图片已加载'</span>);</span></span><br><span class="line"><span class="undefined">        resolve(image);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'图片加载失败'</span>);</span></span><br><span class="line"><span class="javascript">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'load image :'</span> + url + <span class="string">' false'</span>))</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'加载图片'</span>);</span></span><br><span class="line"><span class="undefined">      image.src = url;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来是一个实现了 ajax 请求的例子:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里.then()中可以返回一个全新的 Promise 对象,从而可以链式调用</span></span><br><span class="line">getMethod(<span class="string">"/test.json"</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json1"</span>,response);</span><br><span class="line">  <span class="keyword">return</span> getMethod(<span class="string">"/test.json"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json2"</span>,response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">"请求错误"</span>,error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMethod</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>,url);</span><br><span class="line">    client.onreadystatechange =  handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.readyState !== <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="&#39;https://github.com/axios/axios/blob/master/lib/core/Axios.js#L26&#39;">axios</a>也是支持 <code>promise</code> 的 API,它的解耦做的很不错,看它的源码也给我带来了很大的收获</p><p>当运行完这三个例子以后现在可以对 <code>Promise</code> 对象有一个大体的印象:</p><ul><li>Promise 中有两个自带的函数<code>resolve</code>和<code>reject</code>,分别代表该对象成功和失败两个结果需要处理的状态</li><li>在 Promise 中,只有三种状态<code>Pending</code>,<code>Resolved</code>,<code>Rejected</code>,而且同一时间只会出于一种状态中</li><li>Promise 中的状态改变不可逆,一旦发生就不能再修改</li><li>在 Promise 中的 <code>resolve(param)</code> 中的参数将传到 <code>catch(resolve[,reject])</code>中,<code>reject(param)</code>同理</li><li><code>then()</code>代表着 Promise 的回调处理,而且返回一个新的 promise 对象,和原来的不是同一个</li></ul><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><p>还是刚才 ajax 的运行例子,不过这次我们修改点东西<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allow = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMethod</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(allow)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'第二次执行'</span>);</span><br><span class="line">      allow = !allow;</span><br><span class="line">      reject(<span class="string">"第二次执行被拒"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'第一次执行'</span>);</span><br><span class="line">      allow = !allow;</span><br><span class="line">      reject(<span class="string">"第一次执行被拒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>,url);</span><br><span class="line">    client.onreadystatechange =  handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.readyState !== <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getMethod(<span class="string">"/test.json"</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json1"</span>,response);</span><br><span class="line">  <span class="keyword">return</span> getMethod(<span class="string">"/test.json"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"收到json2"</span>,response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请求错误"</span>,error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过一个变量来控制是否进行 ajax 请求</p><p>从这个例子我们可以看出来<code>reject</code>抛出的错误是有冒泡性质的,可以统一通过最后的<code>.catch()</code>一起捕获,<br>这也是为什么我刚才说不推荐在<code>then(reslve,reject)</code>中使用错误的回调处理,集中在最后的<code>catch()</code>中进行处理<br>这样也让代码看起来更直白一点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们本次要了解一下 es6 中的 Promise 对象&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="ES6" scheme="http://blog.justwe.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用Vultr来搭建梯子</title>
    <link href="http://blog.justwe.site/2017/09/20/vultr-shadowsocks/"/>
    <id>http://blog.justwe.site/2017/09/20/vultr-shadowsocks/</id>
    <published>2017-09-20T06:16:47.000Z</published>
    <updated>2017-09-20T09:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为<del>坑爹的GFW</del>某些问题,导致一些浏览器的默认搜索长期404,为了解决这个问题之前试过<a href="https://getlantern.org/en_US/" target="_blank" rel="noopener">lantern</a><br>也试过一些 vpn,但是都不好用啊,vpn 要面对商家跑路的危险(和去理发店找 tony 老师办卡一样),lantern<br>虽然好用但是免费版有流量限制,只能自己动手丰衣足食了</p><a id="more"></a><h3 id="首先选一个国外的服务器"><a href="#首先选一个国外的服务器" class="headerlink" title="首先选一个国外的服务器"></a>首先选一个国外的服务器</h3><p>国内的服务厂商就不用想了,哪怕是有国外的服务器也是死贵死贵的,然后如果没有办过 <a href="https://amazonaws-china.com/cn/" target="_blank" rel="noopener">aws</a> 的话,这个是<br><strong>最佳</strong> 选择,因为初次注册并绑定信用卡就能免费使用一年的 vps,用来做 shadowsocks 服务器完全没<br>问题啊!具体开那个服务器其实都是那一套流程了,现在进入主题:买一个 <a href="https://my.vultr.com/" target="_blank" rel="noopener">vultr</a>服务器.</p><p>我认为 vultr 的优势</p><ul><li>国外服务器,可以做翻墙用</li><li>价格便宜,每月最低2.5$,丰俭由人,<strong>计价方式是按小时计费哟!</strong></li><li>如果是个人使用有用不完的流量(1T+)</li><li>主要是我还想用它做网站服务器,配置和价格比国内有强</li></ul><p>去<a href="https://my.vultr.com/" target="_blank" rel="noopener">官网</a>注册一个账户就可以开始选择服务器了,配置选<code>东京服务器&gt;centos7&gt;1cpu&amp;1GMery&amp;1TBandwidth</code>,<br>点完这三项就什么都不用点了, deploy now</p><p>这时应该是有一个ip,一个密码了,可以登录服务器了<br>如果你是 windows 环境,下载一个 <a href="http://rj.baidu.com/soft/detail/15201.html" target="_blank" rel="noopener">xshell</a><br>如果你是 macOS 就用终端或者 <a href="https://www.iterm2.com/" target="_blank" rel="noopener">item2</a><br>接下来的操作两个平台都是一样的,就是用 ssh 去链接远程服务器<br>比如你的 ip 是<code>120.0.0.1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@120.0.0.1</span><br></pre></td></tr></table></figure></p><p>回车后输入密码就能登录上去了</p><h3 id="在服务器搭建-shadowsocks"><a href="#在服务器搭建-shadowsocks" class="headerlink" title="在服务器搭建 shadowsocks"></a>在服务器搭建 shadowsocks</h3><ol><li><p>最简单的就是通过脚本搭建,按以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 下载脚本</span><br><span class="line">wget -O ss.sh http://zhangdanyang.com/file/ss.sh</span><br><span class="line"># 执行脚本</span><br><span class="line">bash ss.sh</span><br><span class="line"></span><br><span class="line"># 设置端口号并回车，直接回车是设置为1225</span><br><span class="line">Please enter PORT(1225 default):</span><br><span class="line"># 设置密码并回车，直接回车是设置为123456</span><br><span class="line">Please enter PASSWORD(123456 default):</span><br><span class="line"></span><br><span class="line"># 等待一会……就完成了（初次执行约2-5min）</span><br></pre></td></tr></table></figure><p>脚本源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"># log路径</span><br><span class="line">export log_path=/etc/ss.log</span><br><span class="line"># 设置端口号</span><br><span class="line">echo -n -e &apos;\033[36mPlease enter PORT(1225 default): \033[0m&apos;</span><br><span class="line"># echo -n &quot;please enter port(1225 default):&quot;</span><br><span class="line">read port</span><br><span class="line">if [ ! -n &quot;$port&quot; ];then</span><br><span class="line">        echo &quot;port will be set to 1225&quot;</span><br><span class="line">        port=1225</span><br><span class="line">else</span><br><span class="line">        echo &quot;port will be set to $port&quot;</span><br><span class="line">fi</span><br><span class="line"># 设置密码</span><br><span class="line">echo -n -e &apos;\033[36mPlease enter PASSWORD(123456 default): \033[0m&apos;</span><br><span class="line"># echo -n &quot;please enter password(123456 default):&quot;</span><br><span class="line">read pwd</span><br><span class="line">if [ ! -n &quot;$pwd&quot; ];then</span><br><span class="line">        echo &quot;password will be set to 123456&quot;</span><br><span class="line">        pwd=123456</span><br><span class="line">else</span><br><span class="line">        echo &quot;password will be set to $pwd&quot;</span><br><span class="line">fi</span><br><span class="line"># 写shadowsocks.json配置文件</span><br><span class="line">cat&gt;/etc/shadowsocks.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:$port,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;$pwd&quot;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"># 安装 shadowsocks 防火墙等</span><br><span class="line">ret=`yum install -y m2crypto python-setuptools &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`easy_install pip &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`pip install shadowsocks &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`yum install -y firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`systemctl start firewalld &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line"># 开启端口</span><br><span class="line">ret=`firewall-cmd --permanent --zone=public --add-port=22/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`firewall-cmd --permanent --zone=public --add-port=$port/tcp &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line">ret=`firewall-cmd --reload &gt;&gt; $&#123;log_path&#125; 2&gt;&amp;1`</span><br><span class="line"># 如果有相同功能的进程则杀死</span><br><span class="line">ps -ef|grep ssserver|grep shadowsocks|awk &apos;&#123; print $2 &#125;&apos;|xargs kill -9</span><br><span class="line">nohup /usr/bin/ssserver -c /etc/shadowsocks.json &amp;</span><br><span class="line"># 成功</span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">***************Congratulation!*************</span><br><span class="line">Shadowsocks installed successfully!</span><br><span class="line"></span><br><span class="line">PORT: $port</span><br><span class="line">PASSWORD: $pwd</span><br><span class="line">METHOD: aes-256-cfb</span><br><span class="line"></span><br><span class="line">***************JUST ENJOY IT!**************</span><br><span class="line">EOF</span><br><span class="line"># 失败</span><br><span class="line">else</span><br><span class="line">clear</span><br><span class="line">cat&lt;&lt;EOF</span><br><span class="line">************Failed,retry please!***********</span><br><span class="line"></span><br><span class="line">cat /etc/ss.log to get something you need…</span><br><span class="line"></span><br><span class="line">************Failed,retry please!***********</span><br><span class="line">EOF</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>需要记住 <strong>端口号</strong> 和 <strong>密码</strong> 一会儿会用到</p></li></ol><p>如果是用脚本搭建的就没必要看这一部分了,直接看客户端部分就行<br>手动搭建 shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装 pip 工具且安装 shadowsocks</span><br><span class="line">$ yum install m2crypto python-setuptools</span><br><span class="line">$ easy_install pip</span><br><span class="line">$ pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>编辑启动配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi  /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>文件内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;server_port&quot;:443,  //对外的端口</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;123456&quot;,//你的链接密码</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是多端口配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;: &#123;</span><br><span class="line">         &quot;443&quot;: &quot;443&quot;,</span><br><span class="line">         &quot;8888&quot;: &quot;8888&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">    &quot;timeout&quot;:300,</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">    &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置防火墙,centos7默认的防火墙是 <code>firewalld</code> 和 centos6的 <code>iptables</code> 稍有区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装防火墙</span><br><span class="line">$ yum install firewalld</span><br><span class="line"># 启动防火墙</span><br><span class="line">$ systemctl start firewalld</span><br></pre></td></tr></table></figure></p><p>开启对应的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 端口号是你自己设置的端口(上文中的配置,443端口)</span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class="line"># 新增防火墙规则后一定要执行,这一步很重要</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><p>启动 shadowsocks 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssserver -c /etc/shadowsocks.json</span><br><span class="line">//如果改成常驻后台的模式</span><br><span class="line">$ nohup ssserver -c /etc/shadowsocks.json &amp;</span><br></pre></td></tr></table></figure></p><p>将它设置成开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/shadowsocks.service</span><br></pre></td></tr></table></figure></p><p>输入内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>添加进服务中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl enable shadowsocks</span><br><span class="line">//启动服务(如果执行过之前的流程的话就不用执行这一步,因为已经启动了)</span><br><span class="line">$ systemctl start shadowsocks</span><br><span class="line">//查看启动状态</span><br><span class="line">$ systemctl status shadowsocks -l</span><br></pre></td></tr></table></figure></p><p>如果启动没问题和防火墙没问题那么服务器这块就没问题了</p><h3 id="通过客户端连接远程-ss-服务"><a href="#通过客户端连接远程-ss-服务" class="headerlink" title="通过客户端连接远程 ss 服务"></a>通过客户端连接远程 ss 服务</h3><p>下载一个 <a href="https://www.shadowsocks.company/download-mac.html" target="_blank" rel="noopener">shadowsocks 客户端下载</a></p><p><a href="https://sourceforge.net/projects/shadowsocksgui/files/dist/" target="_blank" rel="noopener">各个平台版本列表</a></p><p>软件下载安装后,点击 <code>服务器&gt;服务器设定</code>,<br>地址就是你的服务器 ip,后面的端口是 <code>shadowsocks.json</code>中设置的 <code>server_port</code>,也就是脚本设置时的第一个参数<br>密码是配置文件中的密码,加密方式如果用的脚本就是默认 <code>aes-256-cfb</code> 如果是独立安装就参考<code>shadowsocks.json</code>中<br>的<code>method</code><br>设置好点选这个服务器再打开 shadowsocks 就好</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我用的是 mac,之前也是用同样的程序链接的 aws 的服务,后来到期后改用的 vultr,结果搭建的服务器在 mac 上<br>连接不上了,但是同样的地址用手机就能连上!折腾了半天发现是电脑中有之前的配置缓存,索性我就把当前的<br>shadowsocks 删了重装一下,用 cleanMyMac 给它卸载干净,卸载的时候就能发现它究竟有哪些配置存在<br>统统删掉删掉,再重装一下就一切正常了</p><p><a href="http://blog.csdn.net/boxuerixin/article/details/72393518" target="_blank" rel="noopener">以上代码出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为&lt;del&gt;坑爹的GFW&lt;/del&gt;某些问题,导致一些浏览器的默认搜索长期404,为了解决这个问题之前试过&lt;a href=&quot;https://getlantern.org/en_US/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lantern&lt;/a&gt;&lt;br&gt;也试过一些 vpn,但是都不好用啊,vpn 要面对商家跑路的危险(和去理发店找 tony 老师办卡一样),lantern&lt;br&gt;虽然好用但是免费版有流量限制,只能自己动手丰衣足食了&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://blog.justwe.site/categories/tools/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
      <category term="shadowsocks" scheme="http://blog.justwe.site/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>关于 elementUI 中的 Intput 框的Enter 事件</title>
    <link href="http://blog.justwe.site/2017/09/15/elementui-form-event/"/>
    <id>http://blog.justwe.site/2017/09/15/elementui-form-event/</id>
    <published>2017-09-15T03:42:23.000Z</published>
    <updated>2017-09-15T03:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文档中没有出现相关的说明,但是在实际使用中确实需要用到,怎么办呢?</p><a id="more"></a><p>这里有一个示例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag"><span class="attr">:inline</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:model</span>=<span class="string">"price_form"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:rules</span>=<span class="string">"price_rules"</span></span></span><br><span class="line"><span class="tag"><span class="attr">ref</span>=<span class="string">"priceForm"</span></span></span><br><span class="line"><span class="tag">@<span class="attr">submit.native.prevent</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-if</span>=<span class="string">"scope.row.edit_deposit"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">style</span>=<span class="string">"margin-top: 22px;"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label-width</span>=<span class="string">"0"</span> <span class="attr">prop</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">               <span class="attr">placeholder</span>=<span class="string">"请输入价格"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:icon</span>=<span class="string">"price_loading ?  'loading' : 'edit' "</span></span></span><br><span class="line"><span class="tag">               <span class="attr">v-model</span>=<span class="string">"price_form.price"</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">keyup.native.enter</span>=<span class="string">"storePrice"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:on-icon-click</span>=<span class="string">"storePrice"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里需要在input 中加入 <a href="mailto:`@keyup.native.enter" target="_blank" rel="noopener">`@keyup.native.enter</a>=””<code>事件,只加这个还不完整,因为回车的时候会出现表单默认提交的情况,有些时候是我们不需要的,因此,需要在</code>el-form<code>中添加</code>@submit.native.prevent`<br>来阻止 form 的默认提交行为</p><p><a href="https://github.com/ElemeFE/element/issues/3625" target="_blank" rel="noopener">资料来源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文档中没有出现相关的说明,但是在实际使用中确实需要用到,怎么办呢?&lt;/p&gt;
    
    </summary>
    
      <category term="elementUI" scheme="http://blog.justwe.site/categories/elementUI/"/>
    
    
      <category term="elementUI" scheme="http://blog.justwe.site/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>转 做一枚全栈工程师</title>
    <link href="http://blog.justwe.site/2017/08/22/be-a-fullstack-engineer/"/>
    <id>http://blog.justwe.site/2017/08/22/be-a-fullstack-engineer/</id>
    <published>2017-08-22T03:57:09.000Z</published>
    <updated>2017-08-22T03:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>这篇热门文章在 2017 年 6 月更新过，引入了更多新技术。</em><br><a id="more"></a></p><hr><p><img src="http://p0.qhimg.com/t012ae25b10db646f23.jpg" alt="Jack of all trades"></p><p>如果一个全栈工程师能够根据<a href="https://www.sitepoint.com/premium/books/the-ultimate-guide-to-prototyping?aref=bskvorc" target="_blank" rel="noopener">原型</a>实现一个完整的MVP（minimum viable product，至少可行的产品），我们通常会认为他十八般武艺样样精通，而且有足够的理由来证明这一点。为了给全栈工程师一个最新鲜的定义，我们首先来关注一下全栈工程师以前是搞什么的。</p><h2 id="以前的全栈工程师"><a href="#以前的全栈工程师" class="headerlink" title="以前的全栈工程师"></a>以前的全栈工程师</h2><p>很久以前，大约在 2000 年(在互联网的次元里，17年可以说是一个非常长的时间了)，一个全栈工程师必须掌握下面的本领：</p><ul><li><p>用 Adobe 公司的 Photoshop 或者 Fireworks 工具设计出一个网页</p></li><li><p>将设计稿变成 HTML, CSS 还有热点图(额，还记得那些吗？)</p></li><li><p>写一些基本的 PHP 4.0 脚本(非面向对象的 PHP 即将成为历史)来处理服务端逻辑</p></li><li><p>保存所有的动态数据到 MySQL 中，也可能会做一些小优化</p></li><li><p>用 FTP 上传所有代码、数据库什么的到一台服务器，然后就可以领取报酬啦</p></li></ul><p>注意我们在这里只讨论 PHP —— 一个全栈 Flash 或者 Coldfusion (一种 Web 服务器) 开发者可能有不同的工作方式(但是也仅仅是细微的差别)。</p><p>在那个单纯的时代，生活是如此的美好。个人开发者一抓一大把，而且程序猿工作完还有大把的时间陪伴自己的家人。</p><p>那现在呢？</p><h2 id="现在的全栈工程师需要自带什么技能呢"><a href="#现在的全栈工程师需要自带什么技能呢" class="headerlink" title="现在的全栈工程师需要自带什么技能呢"></a>现在的全栈工程师需要自带什么技能呢</h2><p>最近，我们也会产生<a href="http://www.businessinsider.com/apple-planet-of-the-apps-ad-developer-rarely-saw-his-kids-2017-6" target="_blank" rel="noopener">这些</a>恐慌——为什么工程师的生活会变成这样？</p><p><img src="http://p0.qhimg.com/t017e6e6e710405c644.jpg" alt="App developer doesn&#39;t see his kids due to schedule"></p><p>为了在这个牛逼的市场里获得成功，我们这些开发者——通常都是完美主义者——应经常把“如果你想做正确的事”当做自己的座右铭，并经常质问自己。这会强迫我们自己集中精力在一处，而且必须学习<em>所有东西</em>，所以做一个全栈工程师往往要学会以下技能：</p><h3 id="服务管理-运维"><a href="#服务管理-运维" class="headerlink" title="服务管理/运维"></a>服务管理/运维</h3><p>一个开发者<strong>必须</strong>了解基础的服务器管理知识。包括当不限于以下知识：</p><ul><li><p>通过终端或其他没有用户界面的环境来远程连接服务器</p></li><li><p>会写基本的 shell 脚本</p></li><li><p>服务器上的用户和群组管理</p></li><li><p>管理像 Apache 和 Nginx 这样的服务器程序来提供应用</p></li><li><p>防火墙管理和权限管理</p></li><li><p>安装和更新软件</p></li></ul><p><img src="http://p6.qhimg.com/t01001f7d645b2147e5.gif" alt="运维"></p><p><a href="https://giphy.com/gifs/richard-ayoade-it-crowd-maurice-moss-dbtDDSvWErdf2" target="_blank" rel="noopener">图片来自GIPHY</a></p><p>除了这些基础技能，开发者必须懂得怎样去创建一个好的、健康的、分离的开发环境，在 Docker 或者像  <a href="http://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/" target="_blank" rel="noopener">Vagrant</a> 这样的虚拟机环境中。 如果上面所有的技术你都不熟悉，那我必须给你推荐一本超棒的书，<a href="http://bit.ly/phpenv-sp" target="_blank" rel="noopener">点这里购买</a>。</p><p>开发者必须对版本控制系统非常熟练，为了让开发有靠谱的生产备份和可分享、可协同的代码库，这些代码库能够根据时间来跟踪代码变化。现在已经没有开发者的工作流是完全离开版本控制的了。我们有一个非常棒的关于版本控制的视频教程，<a href="https://www.sitepoint.com/premium/courses/introduction-to-git-2902?aref=bskvorc" target="_blank" rel="noopener">点这里购买</a>。</p><h3 id="云"><a href="#云" class="headerlink" title="云"></a>云</h3><p>和实际管理或者虚拟服务器不同，一个开发者也许要知道云主机平台，比如<a href="https://www.sitepoint.com/deploying-to-heroku-an-introduction/" target="_blank" rel="noopener">Heroku</a>, Google Cloud, Azure, AWS等等。</p><p><img src="http://p1.qhimg.com/t011d26a34c4d9aa8d4.gif" alt="云"></p><p><a href="https://giphy.com/gifs/animation-artists-on-tumblr-internet-fnjzX4eGNUglq" target="_blank" rel="noopener">图片来自GIPHY</a></p><p>有一点必须说明的是，平台和工具更多的是<a href="https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb" target="_blank" rel="noopener">为了炒作而不是其实用性</a>。尽管有很多平台和工具的实用性并不如宣传的那么好，但是了解这些大家都在谈论的服务，从长远来看会很有用——客户可能会随时要求更换服务提供商。幸运的是，我们拥有这些<a href="https://www.sitepoint.com/ultimate-guide-deploying-php-apps-cloud/" target="_blank" rel="noopener">云主机部署权威指南</a>。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>在后端，除了要懂选择什么语言以外，比如 PHP 和众多的<a href="https://www.sitepoint.com/tag/php-frameworks/" target="_blank" rel="noopener">框架</a> and <a href="https://www.sitepoint.com/tag/cms/" target="_blank" rel="noopener">CMSes</a>，一个全栈开发者必须熟悉：</p><ul><li><p>Web 服务器，比如 <a href="https://www.sitepoint.com/tag/nginx/" target="_blank" rel="noopener">Nginx</a> 和 Apache ，和运维紧密相关</p></li><li><p>不幸的是，NodeJS 已经可以将 JS、CSS 和其他资源文件编译成静态可以方便缓存的文件了。幸运的是，也有办法避免学习 NodeJS，<a href="https://www.sitepoint.com/look-ma-no-nodejs-a-php-front-end-workflow-without-node/" target="_blank" rel="noopener">用PHP</a>也是可以的</p></li><li><p>像<a href="https://www.sitepoint.com/re-introducing-composer/" target="_blank" rel="noopener">Composer</a>这样的 PHP 包管理工具在现代化的开发环境中已经离不开了</p></li><li><p>好的<a href="https://www.sitepoint.com/tag/api+php/" target="_blank" rel="noopener">API 设计</a>，自从大部分新型网页都基于 API 而且仅仅为前端服务（下面会详细描述）</p></li><li><p>ElasticSearch (<a href="https://www.sitepoint.com/introduction-to-elasticsearch-in-php/" target="_blank" rel="noopener">introduction here</a>) 这样的搜索引擎对于网站性能的提高是非常重要的</p></li><li><p><a href="https://www.sitepoint.com/a-comprehensive-crash-course-into-cronjobs/" target="_blank" rel="noopener">cronjobs</a> 和后端的工作，使用<a href="https://www.sitepoint.com/introduction-gearman-multi-tasking-php/" target="_blank" rel="noopener">Gearman</a> 或者  <a href="https://www.sitepoint.com/framework-agnostic-php-cronjobs-made-easy-with-crunz/" target="_blank" rel="noopener">Crunz</a> 这类的库</p></li><li><p>了解缓存， <a href="https://www.sitepoint.com/getting-started-with-varnish/" target="_blank" rel="noopener">Varnish</a>, <a href="https://www.sitepoint.com/speeding-up-existing-apps-with-a-redis-cache/" target="_blank" rel="noopener">Redis</a> 等牛B的工具可以分片存储数据，这样可以将一个项目部署的多个主机上</p></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库是一个单独的部分，因为除了很好地掌握我们基本上不会有结构变化的关系数据库(<a href="https://www.sitepoint.com/php-mysql-tutorial/" target="_blank" rel="noopener">MySQL</a> 或者 PostgreSQL)的数据模式之外，一个全栈工程师应该对非关系型数据库有所了解，如<a href="https://www.sitepoint.com/building-simple-blog-app-mongodb-php/" target="_blank" rel="noopener">MongoDB</a>, Redis, 或 <a href="https://www.sitepoint.com/a-quick-introduction-to-apache-cassandra/" target="_blank" rel="noopener">Cassandra</a> ，更不用说像 <a href="https://www.sitepoint.com/discover-graph-databases-neo4j-php/" target="_blank" rel="noopener">Neo4j</a> 这样的图形数据库了。</p><p><img src="http://p0.qhimg.com/t01598768094b450302.png" alt="Database illustration"></p><p>不幸的是，这些都是服务器上的东西，都在全栈工程师的控制下。也有几个类似 Mongo 的远程解决方案，像<a href="https://www.sitepoint.com/how-to-build-a-twitter-follower-farmer-detection-app-with-restdb/" target="_blank" rel="noopener">RestDB</a>或者 Google-owned <a href="https://www.sitepoint.com/tag/firebase/" target="_blank" rel="noopener">Firebase</a> 等。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>说到前端，真的很蛋疼。</p><p><img src="http://p1.qhimg.com/t0185b6f3475a9a5a03.gif" alt="前端"></p><p><a href="https://giphy.com/gifs/cheezburger-cars-chaoshour-mciMfMijRXIfm" target="_blank" rel="noopener">图片来自GIPHY</a></p><p>想知道一个正常的前端知识图谱是怎么样的，可以在JavaScript 版块看  <a href="https://www.sitepoint.com/anatomy-of-a-modern-javascript-application/" target="_blank" rel="noopener">这篇绝世好文</a> 。但是作为一个全栈工程师，你需要了解</p><ul><li><p>NodeJS and NPM</p></li><li><p>Yarn</p></li><li><p>预处理器和编译器(如Babel)，用来编译 Typescript, ES6, LESS, SCSS, SaSS</p></li><li><p>构建工具，如 Grunt 和 Gulp</p></li><li><p>框架，如 VueJS、React、Angular</p></li><li><p>模块打包工具，如 Webpack、Browserify、Rollup</p></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>在设计方面，全栈开发者需要了解怎样在一个产品变成真正可用的 HTML 、CSS 代码之前，画一个 <a href="https://www.sitepoint.com/premium/books/the-ultimate-guide-to-prototyping?aref=bskvorc" target="_blank" rel="noopener">原型图</a> 。然后就可以去用 JS 写交互、后端也可以用假数据来模拟生产环境。只有这个关键的原型图完成，用户体验设计和接口设计就绪，真正的开发才能开始。这本身就是一项艰巨的任务，需要一套特殊的工具：</p><ul><li><p>Photoshop 和 Illustrator 或者一些开源的工具比如 Gimp / Inkscape。访问 <a href="https://www.sitepoint.com/design-ux/" target="_blank" rel="noopener">Design channel</a> 来了解更多这样的工具。</p></li><li><p>一个牛B的、快速的编辑器，比如 <a href="https://www.sitepoint.com/10-essential-atom-add-ons/" target="_blank" rel="noopener">Atom</a> 或 Sublime Text (这儿有<a href="https://www.sitepoint.com/10-essential-sublime-text-plugins-full-stack-developer/" target="_blank" rel="noopener">十种好用的 sublime插件</a>)</p></li><li><p>像 Subtlepatterns 的背景选择器和颜色选择器能够搭配一些颜色</p></li><li><p>CSS  的<a href="https://www.sitepoint.com/understanding-css-grid-systems/" target="_blank" rel="noopener">栅格系统</a></p></li><li><p>上面所说的前端所需要了解的所有知识和 JS 数据模拟</p></li><li><p>将原型图发表到网上供大家浏览并给于反馈，<a href="https://www.sitepoint.com/use-ngrok-test-local-site/" target="_blank" rel="noopener">Ngrok</a> 就非常好用</p></li></ul><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><p>为了高效监控应用的健康度，全栈开发者必须能够追踪错误，找到错误日志然后从中提取出有用的信息。全栈开发者也需要从日志中预测一些趋势，比如 CPU 或者 I/O 占用率的上涨，以防应用不知道什么时候就挂了。这部分和运维也有一些关系，但是需要一些特别的技能：</p><p><img src="http://p1.qhimg.com/t0167564fdeb0c3ffdd.gif" alt="日志"></p><p><a href="https://giphy.com/gifs/screen-8mpct5wMjdXnW" target="_blank" rel="noopener">图片来自GIPHY</a></p><p>推荐一篇<a href="https://www.sitepoint.com/how-can-the-elk-stack-be-used-to-monitor-php-apps/" target="_blank" rel="noopener">非常棒的 ELK stack 的文章</a>，这会帮助你了解做日志系统所需要的知识。里面包括了查找日志的 ElasticSearch ，收集日志的 Logstash，把日志用非常棒的图表展现出来的的 Kibana，甚至还有提供解决方案的 <a href="http://logz.io?utm_source=sitepoint" target="_blank" rel="noopener">Logz.io</a>。</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>最后，我们该说说移动端了。随着 iOS 和安卓上的的 webview 变得越来越高效，还有 PWA(<a href="https://blog.tighten.co/a-brief-introduction-to-progressive-web-apps-or-pwas" target="_blank" rel="noopener">渐进式web应用</a>) 的到来，native 应用正在变得黯淡，因为他们开发起来实在是太复杂了。所以一个全栈工程师必须了解 PWA 或者 <a href="https://www.sitepoint.com/build-android-app-react-native/" target="_blank" rel="noopener">React Native</a>，或者像NativeScript, Tabris, Cordova, Phonegap或者其他 <a href="https://www.sitepoint.com/understanding-android-webviews/" target="_blank" rel="noopener">webview</a> 来让客户端应用调用 API 跑起来（如上一章最后说的那样）。</p><h2 id="做一个全栈工程师值得吗？"><a href="#做一个全栈工程师值得吗？" class="headerlink" title="做一个全栈工程师值得吗？"></a>做一个全栈工程师值得吗？</h2><p>所以最后只有一个问题，值不值？</p><p>首先，应该注意到很少的全栈工程师称得上真正的全栈，大部分全栈工程师关注了上面技术的某些方面，而不是所有的，仅仅因为不可能有那么多精力放在上面所有方面。</p><p>其次，对所有方面都了解一点也许不会让你在具体方面成为大师，但是说实在的，这会让你在更好地理解项目的流程，和项目确实都需要用到的技术。当作为乙方、开一个外包公司或者给一个迷茫的团队指一条明路方面是无价的技术。</p><p>我可能不是一个“JavaScript 巨星”，“Elasticsearch 忍者”，“MySQL 大师”，“运维狂人”，或者“移动端老司机”，我不想被奉承，但是我觉得，做一个全栈工程师让我张开了翅膀，测试不同的技术，作为自由职业者给我的客户提供与众不同的解决方案。我可以有各种各样的赚钱方式，也能拿到从服务端工作到 WordPress 插件开发等不同的订单，因为我对所有的这些都有很多了解（迟早的事）。对于我来说，做一个全栈工程师是非常值得的，对比我以前只做 Flash 的日子，我现在更喜欢我的工作，当时工作多而且工资低（没有 JavaScript）。</p><p>你呢，你是全栈还是也精于专呢？不管你是不是全栈，你觉得做的事情值吗？</p><blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@lzhbupt" target="_blank" rel="noopener">弈晨</a><br>链接：<a href="http://www.zcfy.cc/article/3548" target="_blank" rel="noopener">http://www.zcfy.cc/article/3548</a><br>原文：<a href="https://www.sitepoint.com/full-stack-developer/" target="_blank" rel="noopener">https://www.sitepoint.com/full-stack-developer/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;这篇热门文章在 2017 年 6 月更新过，引入了更多新技术。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="精选转载" scheme="http://blog.justwe.site/categories/%E7%B2%BE%E9%80%89%E8%BD%AC%E8%BD%BD/"/>
    
    
  </entry>
  
</feed>
