<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;hello-world/&gt;</title>
  <subtitle>代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.justwe.site/"/>
  <updated>2017-08-21T13:28:59.000Z</updated>
  <id>http://blog.justwe.site/</id>
  
  <author>
    <name>GPF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue的一个拖动插件</title>
    <link href="http://blog.justwe.site/2017/08/21/vue-dnd/"/>
    <id>http://blog.justwe.site/2017/08/21/vue-dnd/</id>
    <published>2017-08-21T09:11:28.000Z</published>
    <updated>2017-08-21T13:28:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里介绍一个拿来即用的拖动插件<br>这里只是一个 es5 的 demo<br><a id="more"></a><br>先上代码:</p>
<h2 id="简单的拖动排序示例"><a href="#简单的拖动排序示例" class="headerlink" title="简单的拖动排序示例"></a>简单的拖动排序示例</h2><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/92dcvg1u/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<h2 id="拖动-clone-示例"><a href="#拖动-clone-示例" class="headerlink" title="拖动 clone 示例"></a>拖动 clone 示例</h2><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/ebemtLz6/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>这里用上了 option 中的 group配置,<br><code>group:{ name:&#39;people&#39;,  pull: &#39;clone&#39;, put:false}</code><br>name: 所有可互相拖动的列表必须同一个 name 下<br>pull: true|false|’clone’  开启|关闭|复制 拖动时的元素, 当为 true 的时候拖动会把该元素从列表中移除<br>put: true|false|array  允许|禁止|数组中指定的值 添加到当前数组列当中<br>这样的话当两边的option 都是 <code>{group:{ name:&#39;people&#39;,  pull: true, put:true }}</code>的时候就运行两个列表互相拖动了<br>如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List 1 Draggable<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">draggable</span> <span class="attr">v-model</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"dragArea"</span> <span class="attr">:options</span>=<span class="string">"&#123;group:&#123; name:'people',  pull: true, put:true &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(element, index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;element.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>List 2 Draggable<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">draggable</span> <span class="attr">v-model</span>=<span class="string">"list2"</span> <span class="attr">class</span>=<span class="string">"dragArea"</span> <span class="attr">:options</span>=<span class="string">"&#123;group:&#123; name:'people',  pull: true, put:true &#125;&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(element, index) in list2"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;element.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">draggable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>更多的配置在 <a href="https://github.com/RubaXa/Sortable" target="_blank" rel="external">这里</a>,有时间的话我就都试一下</p>
<p><a href="https://github.com/SortableJS/Vue.Draggable" target="_blank" rel="external">github地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里介绍一个拿来即用的拖动插件&lt;br&gt;这里只是一个 es5 的 demo&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="tools" scheme="http://blog.justwe.site/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>我还活着</title>
    <link href="http://blog.justwe.site/2017/08/14/i-am-alive/"/>
    <id>http://blog.justwe.site/2017/08/14/i-am-alive/</id>
    <published>2017-08-14T01:42:55.000Z</published>
    <updated>2017-08-14T01:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近这两个月工作忙到飞起,等10月份再玩点儿新东西</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这两个月工作忙到飞起,等10月份再玩点儿新东西&lt;/p&gt;

    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
  </entry>
  
  <entry>
    <title>Js生成笛卡尔积数组</title>
    <link href="http://blog.justwe.site/2017/07/18/js-decartes/"/>
    <id>http://blog.justwe.site/2017/07/18/js-decartes/</id>
    <published>2017-07-18T02:36:50.000Z</published>
    <updated>2017-07-18T02:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下转载了来自 <a href="https://segmentfault.com/q/1010000002696523" target="_blank" rel="external">segmentfault</a>的一个回答</p>
<a id="more"></a>
<ol>
<li><p>第一种</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</div><div class="line">        <span class="keyword">var</span> result = [];</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">descartes</span>(<span class="params">arrIndex, aresult</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (arrIndex &gt;= data.length) &#123;</div><div class="line">                result.push(aresult);</div><div class="line">                <span class="keyword">return</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> aArr = data[arrIndex];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aArr.length; ++i) &#123;</div><div class="line">                <span class="keyword">var</span> theResult = aresult.slice(<span class="number">0</span>, aresult.length);</div><div class="line">                theResult.push(aArr[i]);</div><div class="line">                descartes(arrIndex + <span class="number">1</span>, theResult);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        descartes(<span class="number">0</span>, []);</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">    <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>第二种</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">descartes</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( <span class="built_in">arguments</span>.length &lt; <span class="number">2</span> ) <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] || [];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [].reduce.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">col, set</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> res = [];</div><div class="line">        col.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;set.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> t = [].concat( <span class="built_in">Array</span>.isArray(c) ? c : [c] );</div><div class="line">            t.push(s);</div><div class="line">            res.push(t);</div><div class="line">        &#125;)&#125;);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">descartes([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]);</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下转载了来自 &lt;a href=&quot;https://segmentfault.com/q/1010000002696523&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;segmentfault&lt;/a&gt;的一个回答&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="decartes" scheme="http://blog.justwe.site/tags/decartes/"/>
    
  </entry>
  
  <entry>
    <title>Element-Dialog</title>
    <link href="http://blog.justwe.site/2017/07/11/element-dialog/"/>
    <id>http://blog.justwe.site/2017/07/11/element-dialog/</id>
    <published>2017-07-11T11:50:33.000Z</published>
    <updated>2017-07-11T11:59:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <a href="http://element.eleme.io/#/zh-CN/component/dialog" target="_blank" rel="external">elementui 的对话框示例</a>出现问题,esc 或者点击右上的 X 没反应,目前的规避方式就是把 <code>:visible.sync=&quot;dialogFormVisible&quot;</code><br>用 <code>v-model=&quot;dialogFormVisible&quot;</code> 代替,如果下<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"批量修改"</span>  <span class="attr">v-model</span>=<span class="string">"dialogFormVisible"</span> <span class="attr">size</span>=<span class="string">"tiny"</span> <span class="attr">close-on-press-escape</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"border-radius: 5px;"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"batch_form"</span> <span class="attr">label-position</span>=<span class="string">"left"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">"batch_form.label"</span> &gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"batch_form.value"</span> <span class="attr">auto-complete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"dialogFormVisible = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"batchChange()"</span>&gt;</span>修 改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其他的部分照常</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;a href=&quot;http://element.eleme.io/#/zh-CN/component/dialog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elementui 的对话框示例&lt;/a&gt;出现问题,esc 或者点击右上的 X 没反应,目前的规避方式就是把 &lt;code&gt;:visible.sync=&amp;quot;dialogFormVisible&amp;quot;&lt;/code&gt;&lt;br&gt;用 &lt;code&gt;v-model=&amp;quot;dialogFormVisible&amp;quot;&lt;/code&gt; 代替,如果下&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="element-ui" scheme="http://blog.justwe.site/tags/element-ui/"/>
    
      <category term="vuejs" scheme="http://blog.justwe.site/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Hexo 报错经历</title>
    <link href="http://blog.justwe.site/2017/06/29/hexo-error-reinstall/"/>
    <id>http://blog.justwe.site/2017/06/29/hexo-error-reinstall/</id>
    <published>2017-06-29T07:49:58.000Z</published>
    <updated>2017-06-29T08:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>就在今天,吾心中忽有所感,心想不如升级一发环境版本?结果就立马受到了环境的制裁….</p>
<a id="more"></a>
<p>报错信息如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 51. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 57. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using `npm rebuild` or `npm install`).</div><div class="line">    at Object.Module._extensions..node (module.js:598:18)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">&#123; Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:485:15)</div><div class="line">    at Function.Module._load (module.js:437:25)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/dtrace-provider.js:17:23)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32)</div><div class="line">    at tryModuleLoad (module.js:466:12)</div><div class="line">    at Function.Module._load (module.js:458:3)</div><div class="line">    at Module.require (module.js:513:17)</div><div class="line">    at require (internal/module.js:11:18)</div><div class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo/node_modules/bunyan/lib/bunyan.js:79:18)</div><div class="line">    at Module._compile (module.js:569:30)</div><div class="line">    at Object.Module._extensions..js (module.js:580:10)</div><div class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">(node:7992) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.</div></pre></td></tr></table></figure></p>
<p>唔…之前报过<code>dtrace-provider</code>的错误,翻了一下以前的记录就直接无脑的<code>sudo npm install dtrace-provider</code> 但是该怎么报错还是怎么报错….</p>
<p>后来再粗暴点就删了<code>package-lock.json</code>和<code>node_modules</code>目录重新来了一遍<code>npm install</code>,结果还是不行…</p>
<p>有点绝望的我在想:难道我以后就不能用新版本了吗? 后来开始仔细看一下报错信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</div><div class="line">was compiled against a different Node.js version using</div><div class="line">NODE_MODULE_VERSION 51. This version of Node.js requires</div><div class="line">NODE_MODULE_VERSION 57. Please try re-compiling or re-installing</div><div class="line">the module (for instance, using `npm rebuild` or `npm install`).</div></pre></td></tr></table></figure></p>
<p>看到这我意识到之前<strong>全局安装的文件</strong>都没更新过!<br>于是乎执行<code>sudo npm install -g hexo-cli</code> 好了,解决了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就在今天,吾心中忽有所感,心想不如升级一发环境版本?结果就立马受到了环境的制裁….&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.justwe.site/tags/hexo/"/>
    
      <category term="error" scheme="http://blog.justwe.site/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>转 my.cnf 文件注释信息</title>
    <link href="http://blog.justwe.site/2017/06/29/mysql-config/"/>
    <id>http://blog.justwe.site/2017/06/29/mysql-config/</id>
    <published>2017-06-29T07:17:52.000Z</published>
    <updated>2017-06-29T08:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL配置文件my.cnf 例子最详细翻译,可以保存做笔记用。<br><a id="more"></a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div></pre></td><td class="code"><pre><div class="line">#BEGIN CONFIG INFO</div><div class="line">#DESCR: 4GB RAM, 只使用InnoDB, ACID, 少量的连接, 队列负载大</div><div class="line">#TYPE: SYSTEM</div><div class="line">#END CONFIG INFO</div><div class="line"></div><div class="line">#</div><div class="line"># 此mysql配置文件例子针对4G内存。</div><div class="line"># 主要使用INNODB</div><div class="line">#处理复杂队列并且连接数量较少的mysql服务器</div><div class="line">#</div><div class="line"># 将此文件复制到/etc/my.cnf 作为全局设置,</div><div class="line"># mysql-data-dir/my.cnf 作为服务器指定设置</div><div class="line"># (@localstatedir@ for this installation) 或者放入</div><div class="line"># ~/.my.cnf 作为用户设置.</div><div class="line">#</div><div class="line"># 在此配置文件中, 你可以使用所有程序支持的长选项.</div><div class="line"># 如果想获悉程序支持的所有选项</div><div class="line"># 请在程序后加上"--help"参数运行程序.</div><div class="line">#</div><div class="line"># 关于独立选项更多的细节信息可以在手册内找到</div><div class="line">#</div><div class="line"></div><div class="line">#</div><div class="line"># 以下选项会被MySQL客户端应用读取.</div><div class="line"># 注意只有MySQL附带的客户端应用程序保证可以读取这段内容.</div><div class="line"># 如果你想你自己的MySQL应用程序获取这些值</div><div class="line"># 需要在MySQL客户端库初始化的时候指定这些选项</div><div class="line"></div><div class="line">#</div><div class="line">[client]</div><div class="line">#password = [your_password]</div><div class="line">port = @MYSQL_TCP_PORT@</div><div class="line">socket = @MYSQL_UNIX_ADDR@</div><div class="line"></div><div class="line"># *** 应用定制选项 ***</div><div class="line"></div><div class="line">#</div><div class="line">#  MySQL 服务端</div><div class="line">#</div><div class="line">[mysqld]</div><div class="line"></div><div class="line"># 一般配置选项</div><div class="line">port = @MYSQL_TCP_PORT@</div><div class="line">socket = @MYSQL_UNIX_ADDR@</div><div class="line"></div><div class="line"># back_log 是操作系统在监听队列中所能保持的连接数,</div><div class="line"># 队列保存了在MySQL连接管理器线程处理之前的连接.</div><div class="line"># 如果你有非常高的连接率并且出现"connection refused" 报错,</div><div class="line"># 你就应该增加此处的值.</div><div class="line"># 检查你的操作系统文档来获取这个变量的最大值.</div><div class="line"># 如果将back_log设定到比你操作系统限制更高的值,将会没有效果</div><div class="line">back_log = 50</div><div class="line"></div><div class="line"># 不在TCP/IP端口上进行监听.</div><div class="line"># 如果所有的进程都是在同一台服务器连接到本地的mysqld,</div><div class="line"># 这样设置将是增强安全的方法</div><div class="line"># 所有mysqld的连接都是通过Unix sockets 或者命名管道进行的.</div><div class="line"># 注意在windows下如果没有打开命名管道选项而只是用此项</div><div class="line"># (通过 "enable-named-pipe" 选项) 将会导致mysql服务没有任何作用!</div><div class="line">#skip-networking</div><div class="line"></div><div class="line"># MySQL 服务所允许的同时会话数的上限</div><div class="line"># 其中一个连接将被SUPER权限保留作为管理员登录.</div><div class="line"># 即便已经达到了连接数的上限.</div><div class="line">max_connections = 100</div><div class="line"># 每个客户端连接最大的错误允许数量,如果达到了此限制.</div><div class="line"># 这个客户端将会被MySQL服务阻止直到执行了"FLUSH HOSTS" 或者服务重启</div><div class="line"># 非法的密码以及其他在链接时的错误会增加此值.</div><div class="line"># 查看 "Aborted_connects" 状态来获取全局计数器.</div><div class="line">max_connect_errors = 10</div><div class="line"></div><div class="line"># 所有线程所打开表的数量.</div><div class="line"># 增加此值就增加了mysqld所需要的文件描述符的数量</div><div class="line"># 这样你需要确认在[mysqld_safe]中 "open-files-limit" 变量设置打开文件数量允许至少4096</div><div class="line">table_cache = 2048</div><div class="line"></div><div class="line"># 允许外部文件级别的锁. 打开文件锁会对性能造成负面影响</div><div class="line"># 所以只有在你在同样的文件上运行多个数据库实例时才使用此选项(注意仍会有其他约束!)</div><div class="line"># 或者你在文件层面上使用了其他一些软件依赖来锁定MyISAM表</div><div class="line">#external-locking</div><div class="line"></div><div class="line"># 服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小(当与大的BLOB字段一起工作时相当必要)</div><div class="line"># 每个连接独立的大小.大小动态增加</div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line"># 在一个事务中binlog为了记录SQL状态所持有的cache大小</div><div class="line"># 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.</div><div class="line"># 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中</div><div class="line"># 如果事务比此值大, 会使用磁盘上的临时文件来替代.</div><div class="line"># 此缓冲在每个连接的事务第一次更新状态时被创建</div><div class="line">binlog_cache_size = 1M</div><div class="line"></div><div class="line"># 独立的内存表所允许的最大容量.</div><div class="line"># 此选项为了防止意外创建一个超大的内存表导致永尽所有的内存资源.</div><div class="line">max_heap_table_size = 64M</div><div class="line"></div><div class="line"># 排序缓冲被用来处理类似ORDER BY以及GROUP BY队列所引起的排序</div><div class="line"># 如果排序后的数据无法放入排序缓冲,</div><div class="line"># 一个用来替代的基于磁盘的合并分类会被使用</div><div class="line"># 查看 "Sort_merge_passes" 状态变量.</div><div class="line"># 在排序发生时由每个线程分配</div><div class="line">sort_buffer_size = 8M</div><div class="line"></div><div class="line"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合).</div><div class="line"># 类似的联合在极大多数情况下有非常糟糕的性能表现,</div><div class="line"># 但是将此值设大能够减轻性能影响.</div><div class="line"># 通过 "Select_full_join" 状态变量查看全联合的数量</div><div class="line"># 当全联合发生时,在每个线程中分配</div><div class="line">join_buffer_size = 8M</div><div class="line"></div><div class="line"># 我们在cache中保留多少线程用于重用</div><div class="line"># 当一个客户端断开连接后,如果cache中的线程还少于thread_cache_size,</div><div class="line"># 则客户端线程被放入cache中.</div><div class="line"># 这可以在你需要大量新连接的时候极大的减少线程创建的开销</div><div class="line"># (一般来说如果你有好的线程模型的话,这不会有明显的性能提升.)</div><div class="line">thread_cache_size = 8</div><div class="line"></div><div class="line"># 此允许应用程序给予线程系统一个提示在同一时间给予渴望被运行的线程的数量.</div><div class="line"># 此值只对于支持 thread_concurrency() 函数的系统有意义( 例如Sun Solaris).</div><div class="line"># 你可可以尝试使用 [CPU数量]*(2..4) 来作为thread_concurrency的值</div><div class="line">thread_concurrency = 8</div><div class="line"></div><div class="line"># 查询缓冲常被用来缓冲 SELECT 的结果并且在下一次同样查询的时候不再执行直接返回结果.</div><div class="line"># 打开查询缓冲可以极大的提高服务器速度, 如果你有大量的相同的查询并且很少修改表.</div><div class="line"># 查看 "Qcache_lowmem_prunes" 状态变量来检查是否当前值对于你的负载来说是否足够高.</div><div class="line"># 注意: 在你表经常变化的情况下或者如果你的查询原文每次都不同,</div><div class="line"># 查询缓冲也许引起性能下降而不是性能提升.</div><div class="line">query_cache_size = 64M</div><div class="line"></div><div class="line"># 只有小于此设定值的结果才会被缓冲</div><div class="line"># 此设置用来保护查询缓冲,防止一个极大的结果集将其他所有的查询结果都覆盖.</div><div class="line">query_cache_limit = 2M</div><div class="line"></div><div class="line"># 被全文检索索引的最小的字长.</div><div class="line"># 你也许希望减少它,如果你需要搜索更短字的时候.</div><div class="line"># 注意在你修改此值之后,</div><div class="line"># 你需要重建你的 FULLTEXT 索引</div><div class="line">ft_min_word_len = 4</div><div class="line"></div><div class="line"># 如果你的系统支持 memlock() 函数,你也许希望打开此选项用以让运行中的mysql在在内存高度紧张的时候,数据在内存中保持锁定并且防止可能被swapping out</div><div class="line"># 此选项对于性能有益</div><div class="line">#memlock</div><div class="line"></div><div class="line"># 当创建新表时作为默认使用的表类型,</div><div class="line"># 如果在创建表示没有特别执行表类型,将会使用此值</div><div class="line">default_table_type = MYISAM</div><div class="line"></div><div class="line"># 线程使用的堆大小. 此容量的内存在每次连接时被预留.</div><div class="line"># MySQL 本身常不会需要超过64K的内存</div><div class="line"># 如果你使用你自己的需要大量堆的UDF函数</div><div class="line"># 或者你的操作系统对于某些操作需要更多的堆,</div><div class="line"># 你也许需要将其设置的更高一点.</div><div class="line">thread_stack = 192K</div><div class="line"></div><div class="line"># 设定默认的事务隔离级别.可用的级别如下:</div><div class="line"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE</div><div class="line">transaction_isolation = REPEATABLE-READ</div><div class="line"></div><div class="line"># 内部(内存中)临时表的最大大小</div><div class="line"># 如果一个表增长到比此值更大,将会自动转换为基于磁盘的表.</div><div class="line"># 此限制是针对单个表的,而不是总和.</div><div class="line">tmp_table_size = 64M</div><div class="line"></div><div class="line"># 打开二进制日志功能.</div><div class="line"># 在复制(replication)配置中,作为MASTER主服务器必须打开此项</div><div class="line"># 如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志.</div><div class="line">log-bin=mysql-bin</div><div class="line"></div><div class="line"># 如果你在使用链式从服务器结构的复制模式 (A-&gt;B-&gt;C),</div><div class="line"># 你需要在服务器B上打开此项.</div><div class="line"># 此选项打开在从线程上重做过的更新的日志,</div><div class="line"># 并将其写入从服务器的二进制日志.</div><div class="line">#log_slave_updates</div><div class="line"></div><div class="line"># 打开全查询日志. 所有的由服务器接收到的查询 (甚至对于一个错误语法的查询)</div><div class="line"># 都会被记录下来. 这对于调试非常有用, 在生产环境中常常关闭此项.</div><div class="line">#log</div><div class="line"></div><div class="line"># 将警告打印输出到错误log文件.  如果你对于MySQL有任何问题</div><div class="line"># 你应该打开警告log并且仔细审查错误日志,查出可能的原因.</div><div class="line">#log_warnings</div><div class="line"></div><div class="line"># 记录慢速查询. 慢速查询是指消耗了比 "long_query_time" 定义的更多时间的查询.</div><div class="line"># 如果 log_long_format 被打开,那些没有使用索引的查询也会被记录.</div><div class="line"># 如果你经常增加新查询到已有的系统内的话. 一般来说这是一个好主意,</div><div class="line">log_slow_queries</div><div class="line"></div><div class="line"># 所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.</div><div class="line"># 不要在这里使用"1", 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于MySQL 目前时间的精确度只能达到秒的级别).</div><div class="line">long_query_time = 2</div><div class="line"></div><div class="line"># 在慢速日志中记录更多的信息.</div><div class="line"># 一般此项最好打开.</div><div class="line"># 打开此项会记录使得那些没有使用索引的查询也被作为到慢速查询附加到慢速日志里</div><div class="line">log_long_format</div><div class="line"></div><div class="line"># 此目录被MySQL用来保存临时文件.例如,</div><div class="line"># 它被用来处理基于磁盘的大型排序,和内部排序一样.</div><div class="line"># 以及简单的临时表.</div><div class="line"># 如果你不创建非常大的临时文件,将其放置到 swapfs/tmpfs 文件系统上也许比较好</div><div class="line"># 另一种选择是你也可以将其放置在独立的磁盘上.</div><div class="line"># 你可以使用";"来放置多个路径</div><div class="line"># 他们会按照roud-robin方法被轮询使用.</div><div class="line">#tmpdir = /tmp</div><div class="line"></div><div class="line"></div><div class="line"># ***  复制有关的设置</div><div class="line"></div><div class="line"></div><div class="line"># 唯一的服务辨识号,数值位于 1 到 2^32-1之间.</div><div class="line"># 此值在master和slave上都需要设置.</div><div class="line"># 如果 "master-host" 没有被设置,则默认为1, 但是如果忽略此选项,MySQL不会作为master生效.</div><div class="line">server-id = 1</div><div class="line"></div><div class="line"># 复制的Slave (去掉master段的注释来使其生效)</div><div class="line">#</div><div class="line"># 为了配置此主机作为复制的slave服务器,你可以选择两种方法:</div><div class="line">#</div><div class="line"># 1) 使用 CHANGE MASTER TO 命令 (在我们的手册中有完整描述) -</div><div class="line">#    语法如下:</div><div class="line">#</div><div class="line">#    CHANGE MASTER TO MASTER_HOST=&lt;host&gt;, MASTER_PORT=&lt;port&gt;,</div><div class="line">#    MASTER_USER=&lt;user&gt;, MASTER_PASSWORD=&lt;password&gt; ;</div><div class="line">#</div><div class="line">#    你需要替换掉 &lt;host&gt;, &lt;user&gt;, &lt;password&gt; 等被尖括号包围的字段以及使用master的端口号替换&lt;port&gt; (默认3306).</div><div class="line">#</div><div class="line">#    例子:</div><div class="line">#</div><div class="line">#    CHANGE MASTER TO MASTER_HOST='125.564.12.1', MASTER_PORT=3306,</div><div class="line">#    MASTER_USER='joe', MASTER_PASSWORD='secret';</div><div class="line">#</div><div class="line"># 或者</div><div class="line">#</div><div class="line"># 2) 设置以下的变量. 不论如何, 在你选择这种方法的情况下, 然后第一次启动复制(甚至不成功的情况下,</div><div class="line">#     例如如果你输入错密码在master-password字段并且slave无法连接),</div><div class="line">#    slave会创建一个 master.info 文件,并且之后任何对于包含在此文件内的参数的变化都会被忽略</div><div class="line">#    并且由 master.info 文件内的内容覆盖, 除非你关闭slave服务, 删除 master.info 并且重启slave 服务.</div><div class="line">#    由于这个原因,你也许不想碰一下的配置(注释掉的) 并且使用 CHANGE MASTER TO (查看上面) 来代替</div><div class="line">#</div><div class="line"># 所需要的唯一id号位于 2 和 2^32 - 1之间</div><div class="line"># (并且和master不同)</div><div class="line"># 如果master-host被设置了.则默认值是2</div><div class="line"># 但是如果省略,则不会生效</div><div class="line">#server-id = 2</div><div class="line">#</div><div class="line"># 复制结构中的master - 必须</div><div class="line">#master-host = &lt;hostname&gt;</div><div class="line">#</div><div class="line"># 当连接到master上时slave所用来认证的用户名 - 必须</div><div class="line">#master-user = &lt;username&gt;</div><div class="line">#</div><div class="line"># 当连接到master上时slave所用来认证的密码 - 必须</div><div class="line">#master-password = &lt;password&gt;</div><div class="line">#</div><div class="line"># master监听的端口.</div><div class="line"># 可选 - 默认是3306</div><div class="line">#master-port = &lt;port&gt;</div><div class="line"></div><div class="line"># 使得slave只读.只有用户拥有SUPER权限和在上面的slave线程能够修改数据.</div><div class="line"># 你可以使用此项去保证没有应用程序会意外的修改slave而不是master上的数据</div><div class="line">#read_only</div><div class="line"></div><div class="line"></div><div class="line">#*** MyISAM 相关选项</div><div class="line"></div><div class="line"></div><div class="line"># 关键词缓冲的大小, 一般用来缓冲MyISAM表的索引块.</div><div class="line"># 不要将其设置大于你可用内存的30%,</div><div class="line"># 因为一部分内存同样被OS用来缓冲行数据</div><div class="line"># 甚至在你并不使用MyISAM 表的情况下, 你也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.</div><div class="line">key_buffer_size = 32M</div><div class="line"></div><div class="line"># 用来做MyISAM表全表扫描的缓冲大小.</div><div class="line"># 当全表扫描需要时,在对应线程中分配.</div><div class="line">read_buffer_size = 2M</div><div class="line"></div><div class="line"># 当在排序之后,从一个已经排序好的序列中读取行时,行数据将从这个缓冲中读取来防止磁盘寻道.</div><div class="line"># 如果你增高此值,可以提高很多ORDER BY的性能.</div><div class="line"># 当需要时由每个线程分配</div><div class="line">read_rnd_buffer_size = 16M</div><div class="line"></div><div class="line"># MyISAM 使用特殊的类似树的cache来使得突发插入</div><div class="line"># (这些插入是,INSERT  SELECT, INSERT  VALUES (), (), , 以及 LOAD DATA</div><div class="line"># INFILE) 更快. 此变量限制每个进程中缓冲树的字节数.</div><div class="line"># 设置为 0 会关闭此优化.</div><div class="line"># 为了最优化不要将此值设置大于 "key_buffer_size".</div><div class="line"># 当突发插入被检测到时此缓冲将被分配.</div><div class="line">bulk_insert_buffer_size = 64M</div><div class="line"></div><div class="line"># 此缓冲当MySQL需要在 REPAIR, OPTIMIZE, ALTER 以及 LOAD DATA INFILE 到一个空表中引起重建索引时被分配.</div><div class="line"># 这在每个线程中被分配.所以在设置大值时需要小心.</div><div class="line">myisam_sort_buffer_size = 128M</div><div class="line"></div><div class="line"># MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).</div><div class="line"># 如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)</div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line"></div><div class="line"># 如果被用来更快的索引创建索引所使用临时文件大于制定的值,那就使用键值缓冲方法.</div><div class="line"># 这主要用来强制在大表中长字串键去使用慢速的键值缓冲方法来创建索引.</div><div class="line">myisam_max_extra_sort_file_size = 10G</div><div class="line"></div><div class="line"># 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.</div><div class="line"># 这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.</div><div class="line">myisam_repair_threads = 1</div><div class="line"></div><div class="line"># 自动检查和修复没有适当关闭的 MyISAM 表.</div><div class="line">myisam_recover</div><div class="line"></div><div class="line"></div><div class="line"># 默认关闭 Federated</div><div class="line">skip-federated</div><div class="line"></div><div class="line"># *** BDB 相关选项 ***</div><div class="line"></div><div class="line"># 如果你运行的MySQL服务有BDB支持但是你不准备使用的时候使用此选项. 这会节省内存并且可能加速一些事.</div><div class="line">skip-bdb</div><div class="line"></div><div class="line"></div><div class="line"># *** INNODB 相关选项 ***</div><div class="line"></div><div class="line"># 如果你的MySQL服务包含InnoDB支持但是并不打算使用的话,</div><div class="line"># 使用此选项会节省内存以及磁盘空间,并且加速某些部分</div><div class="line">#skip-innodb</div><div class="line"></div><div class="line"># 附加的内存池被InnoDB用来保存 metadata 信息</div><div class="line"># 如果InnoDB为此目的需要更多的内存,它会开始从OS这里申请内存.</div><div class="line"># 由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值.</div><div class="line"># SHOW INNODB STATUS 命令会显示当先使用的数量.</div><div class="line">innodb_additional_mem_pool_size = 16M</div><div class="line"></div><div class="line"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像 MyISAM.</div><div class="line"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</div><div class="line"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</div><div class="line"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</div><div class="line"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</div><div class="line"># 所以不要设置的太高.</div><div class="line">innodb_buffer_pool_size = 2G</div><div class="line"></div><div class="line"># InnoDB 将数据保存在一个或者多个数据文件中成为表空间.</div><div class="line"># 如果你只有单个逻辑驱动保存你的数据,一个单个的自增文件就足够好了.</div><div class="line"># 其他情况下.每个设备一个文件一般都是个好的选择.</div><div class="line"># 你也可以配置InnoDB来使用裸盘分区 - 请参考手册来获取更多相关内容</div><div class="line">innodb_data_file_path = ibdata1:10M:autoextend</div><div class="line"></div><div class="line"># 设置此选项如果你希望InnoDB表空间文件被保存在其他分区.</div><div class="line"># 默认保存在MySQL的datadir中.</div><div class="line">#innodb_data_home_dir = &lt;directory&gt;</div><div class="line"></div><div class="line"># 用来同步IO操作的IO线程的数量. This value is</div><div class="line"># 此值在Unix下被硬编码为4,但是在Windows磁盘I/O可能在一个大数值下表现的更好.</div><div class="line">innodb_file_io_threads = 4</div><div class="line"></div><div class="line"># 如果你发现InnoDB表空间损坏, 设置此值为一个非零值可能帮助你导出你的表.</div><div class="line"># 从1开始并且增加此值知道你能够成功的导出表.</div><div class="line">#innodb_force_recovery=1</div><div class="line"></div><div class="line"># 在InnoDb核心内的允许线程数量.</div><div class="line"># 最优值依赖于应用程序,硬件以及操作系统的调度方式.</div><div class="line"># 过高的值可能导致线程的互斥颠簸.</div><div class="line">innodb_thread_concurrency = 16</div><div class="line"></div><div class="line"># 如果设置为1 ,InnoDB会在每次提交后刷新(fsync)事务日志到磁盘上,</div><div class="line"># 这提供了完整的ACID行为.</div><div class="line"># 如果你愿意对事务安全折衷, 并且你正在运行一个小的食物, 你可以设置此值到0或者2来减少由事务日志引起的磁盘I/O</div><div class="line"># 0代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘.</div><div class="line"># 2代表日志写入日志文件在每次提交后,但是日志文件只有大约每秒才会刷新到磁盘上.</div><div class="line">innodb_flush_log_at_trx_commit = 1</div><div class="line"></div><div class="line"># 加速InnoDB的关闭. 这会阻止InnoDB在关闭时做全清除以及插入缓冲合并.</div><div class="line"># 这可能极大增加关机时间, 但是取而代之的是InnoDB可能在下次启动时做这些操作.</div><div class="line">#innodb_fast_shutdown</div><div class="line"></div><div class="line"># 用来缓冲日志数据的缓冲区的大小.</div><div class="line"># 当此值快满时, InnoDB将必须刷新数据到磁盘上.</div><div class="line"># 由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)</div><div class="line"></div><div class="line">innodb_log_buffer_size = 8M</div><div class="line"></div><div class="line"># 在日志组中每个日志文件的大小.</div><div class="line"># 你应该设置日志文件总合大小到你缓冲池大小的25%~100%</div><div class="line"># 来避免在日志文件覆写上不必要的缓冲池刷新行为.</div><div class="line"># 不论如何, 请注意一个大的日志文件大小会增加恢复进程所需要的时间.</div><div class="line">innodb_log_file_size = 256M</div><div class="line"></div><div class="line"># 在日志组中的文件总数.</div><div class="line"># 通常来说2~3是比较好的.</div><div class="line">innodb_log_files_in_group = 3</div><div class="line"></div><div class="line"># InnoDB的日志文件所在位置. 默认是MySQL的datadir.</div><div class="line"># 你可以将其指定到一个独立的硬盘上或者一个RAID1卷上来提高其性能</div><div class="line">#innodb_log_group_home_dir</div><div class="line"></div><div class="line"># 在InnoDB缓冲池中最大允许的脏页面的比例.</div><div class="line"># 如果达到限额, InnoDB会开始刷新他们防止他们妨碍到干净数据页面.</div><div class="line"># 这是一个软限制,不被保证绝对执行.</div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line"></div><div class="line"># InnoDB用来刷新日志的方法.</div><div class="line"># 表空间总是使用双重写入刷新方法</div><div class="line"># 默认值是 "fdatasync", 另一个是 "O_DSYNC".</div><div class="line">#innodb_flush_method=O_DSYNC</div><div class="line"></div><div class="line"># 在被回滚前,一个InnoDB的事务应该等待一个锁被批准多久.</div><div class="line"># InnoDB在其拥有的锁表中自动检测事务死锁并且回滚事务.</div><div class="line"># 如果你使用 LOCK TABLES 指令, 或者在同样事务中使用除了InnoDB以外的其他事务安全的存储引擎</div><div class="line"># 那么一个死锁可能发生而InnoDB无法注意到.</div><div class="line"># 这种情况下这个timeout值对于解决这种问题就非常有帮助.</div><div class="line">innodb_lock_wait_timeout = 120</div><div class="line"></div><div class="line"></div><div class="line">[mysqldump]</div><div class="line"># 不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项</div><div class="line">quick</div><div class="line"></div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line">[mysql]</div><div class="line">no-auto-rehash</div><div class="line"></div><div class="line"># 仅仅允许使用键值的 UPDATEs 和 DELETEs .</div><div class="line">#safe-updates</div><div class="line"></div><div class="line">[isamchk]</div><div class="line">key_buffer = 512M</div><div class="line">sort_buffer_size = 512M</div><div class="line">read_buffer = 8M</div><div class="line">write_buffer = 8M</div><div class="line"></div><div class="line">[myisamchk]</div><div class="line">key_buffer = 512M</div><div class="line">sort_buffer_size = 512M</div><div class="line">read_buffer = 8M</div><div class="line">write_buffer = 8M</div><div class="line"></div><div class="line">[mysqlhotcopy]</div><div class="line">interactive-timeout</div><div class="line"></div><div class="line">[mysqld_safe]</div><div class="line"># 增加每个进程的可打开文件数量.</div><div class="line"># 警告: 确认你已经将全系统限制设定的足够高!</div><div class="line"># 打开大量表需要将此值设b</div><div class="line">open-files-limit = 8192</div></pre></td></tr></table></figure></p>
<p><a href="http://www.blogjava.net/hunter129/archive/2009/01/18/251744.html" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL配置文件my.cnf 例子最详细翻译,可以保存做笔记用。&lt;br&gt;
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP标准类库系列 Iterator</title>
    <link href="http://blog.justwe.site/2017/06/27/php-spl-iterator/"/>
    <id>http://blog.justwe.site/2017/06/27/php-spl-iterator/</id>
    <published>2017-06-27T03:35:37.000Z</published>
    <updated>2017-06-27T07:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器,让对象可用 <code>foreach</code>,<code>for</code>,<code>while</code>方法<br><a id="more"></a></p>
<h2 id="啥是-Iterator"><a href="#啥是-Iterator" class="headerlink" title="啥是 Iterator"></a>啥是 Iterator</h2><p>是一种 php 提供的接口标准,可以将不同的类迭代调用统一成一样的方法,打个比方(话说谁叫比方?):<br>这是调用 mysql 时取出资源的方法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$dbms=<span class="string">'mysql'</span>;</div><div class="line">$host=<span class="string">'localhost'</span>;</div><div class="line">$dbName=<span class="string">'wechat'</span>;</div><div class="line">$user=<span class="string">'root'</span>;      </div><div class="line">$pass=<span class="string">'123123'</span>;</div><div class="line">$dsn=<span class="string">"$dbms:host=$host:33060;dbname=$dbName;"</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    $dbh = <span class="keyword">new</span> PDO($dsn, $user, $pass); <span class="comment">//初始化一个PDO对象</span></div><div class="line">    <span class="keyword">foreach</span> ($dbh-&gt;query(<span class="string">'SELECT * from migrations;'</span>) <span class="keyword">as</span> $row) &#123;</div><div class="line">        print_r($row);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $dbh = <span class="keyword">null</span>;</div><div class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</div><div class="line">    <span class="keyword">die</span> (<span class="string">"Error!: "</span> . $e-&gt;getMessage() . <span class="string">"&lt;br/&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而读取目录下所有文件的方法是:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$dirPath = <span class="string">'/Users/gpf/Desktop'</span>;</div><div class="line">$list = opendir($dirPath);</div><div class="line"><span class="keyword">while</span>($filename = readdir($list))&#123;</div><div class="line">    <span class="keyword">echo</span> $filename . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而读取文件内容的方法是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$filePath = <span class="string">'/Users/gpf/Desktop/test.php'</span>;</div><div class="line"></div><div class="line">$handler = @fopen($filePath,<span class="string">'r'</span>);</div><div class="line"><span class="keyword">if</span>(!$handler)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'error'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(!feof($handler))&#123;</div><div class="line">    $line = fgets($handler);</div><div class="line">    <span class="keyword">echo</span> $line;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">new</span> SplFileObject($filePath) <span class="keyword">as</span> $line)&#123;</div><div class="line">    <span class="keyword">echo</span> $line . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>都是做的循环的事但是不统一,这就很烦躁,因为同样一件事你需要用不同的方法去实现,一个<code>茴</code>字要用四种写法<br>这种情况下在 php51 之后开发组也意识到问题了,于是就出现了 SPL,就有了一个通用的 <code>Iterator</code><br>这个迭代器就是让不同的资源操作变得相同,这些接口可以自己实现,也可以用官方提供的一些<a href="http://php.net/manual/zh/spl.iterators.php" target="_blank" rel="external">迭代器</a><br>比如读取文本的迭代器就可以这样获取文本内容了:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$filePath = <span class="string">'/Users/gpf/Desktop/test.php'</span>;</div><div class="line">$handler = <span class="keyword">new</span> SplFileObject($filePath);</div><div class="line"><span class="keyword">foreach</span>($handler <span class="keyword">as</span> $line)&#123;</div><div class="line">    <span class="keyword">echo</span> $line . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//当然也可以直接跳行查找</span></div><div class="line">$handler-&gt;seek(<span class="number">4</span>);</div><div class="line">var_dump($handler-&gt;current());</div></pre></td></tr></table></figure></p>
<p>这样调用就显得比较统一了,那么</p>
<h2 id="怎么使用-Iterator"><a href="#怎么使用-Iterator" class="headerlink" title="怎么使用 Iterator?"></a>怎么使用 Iterator?</h2><p>这里参照了<a href="http://php.net/manual/zh/class.iterator.php" target="_blank" rel="external">php 文档</a> 和 <a href="http://www.ruanyifeng.com/blog/2008/07/php_spl_notes.html" target="_blank" rel="external">阮一峰的博客</a><br>写的一个例子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $attributes = [];</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $valid = <span class="keyword">FALSE</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $array)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;attributes = $array;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;valid = (<span class="keyword">FALSE</span> !== reset(<span class="keyword">$this</span>-&gt;attributes));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> current(<span class="keyword">$this</span>-&gt;attributes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> key(<span class="keyword">$this</span>-&gt;attributes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果 next 返回 false 循环将终止</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">$this</span>-&gt;valid = (<span class="keyword">FALSE</span> !== next(<span class="keyword">$this</span>-&gt;attributes));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        var_dump(<span class="keyword">__METHOD__</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;valid;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$arr  = [</div><div class="line">    <span class="string">'red'</span> =&gt; <span class="string">'stop'</span>,</div><div class="line">    <span class="string">'green'</span> =&gt; <span class="string">'run'</span>,</div><div class="line">    <span class="string">'yellow'</span> =&gt; <span class="string">'wait'</span></div><div class="line">];</div><div class="line">$demo = <span class="keyword">new</span> IteratorDemo($arr);</div><div class="line">var_dump($demo);</div><div class="line"><span class="keyword">foreach</span> ($demo <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">    <span class="keyword">echo</span> $key  . <span class="string">'=&gt;'</span> . $value . PHP_EOL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">object(IteratorDemo)<span class="comment">#1 (2) &#123;</span></div><div class="line">  [<span class="string">"attributes"</span>:<span class="string">"IteratorDemo"</span>:<span class="keyword">private</span>]=&gt;</div><div class="line">  <span class="keyword">array</span>(<span class="number">3</span>) &#123;</div><div class="line">    [<span class="string">"red"</span>]=&gt;</div><div class="line">    string(<span class="number">4</span>) <span class="string">"stop"</span></div><div class="line">    [<span class="string">"green"</span>]=&gt;</div><div class="line">    string(<span class="number">3</span>) <span class="string">"run"</span></div><div class="line">    [<span class="string">"yellow"</span>]=&gt;</div><div class="line">    string(<span class="number">4</span>) <span class="string">"wait"</span></div><div class="line">  &#125;</div><div class="line">  [<span class="string">"valid"</span>:<span class="keyword">protected</span>]=&gt;</div><div class="line">  bool(<span class="keyword">false</span>)</div><div class="line">&#125;</div><div class="line">string(<span class="number">20</span>) <span class="string">"IteratorDemo::rewind"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">red=&gt;stop</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">green=&gt;run</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div><div class="line">string(<span class="number">21</span>) <span class="string">"IteratorDemo::current"</span></div><div class="line">string(<span class="number">17</span>) <span class="string">"IteratorDemo::key"</span></div><div class="line">yellow=&gt;wait</div><div class="line">string(<span class="number">18</span>) <span class="string">"IteratorDemo::next"</span></div><div class="line">string(<span class="number">19</span>) <span class="string">"IteratorDemo::valid"</span></div></pre></td></tr></table></figure></p>
<p>这就实现了一个通用的 <code>Iterator</code> 接口,当然这是是为了实现而实现,中间可以做很多事情的,这要发挥一下想象力</p>
<p>在程序里经常看到 <code>FooIterator</code> 这类的对象,就是基于上面写的 <code>Iterator</code> 进行的延伸,比如刚才我们<br>例子中用到的<code>SplFileObject</code>,<code>SimpleXMLIterator</code>,<code>ArrayIterator</code>这些类,都是大同小异的,<br>不过是根据实现的迭代器添加一些更适用的方法,比如一个<code>DirectoryIterator</code>中就是继承了<code>SplFileInfo</code>的方法<br>并且实现了 <code>Iterator</code> 接口,再添加了一些自己的方法,有用 idea 的可以用代码追踪看一下也是蛮有意思的</p>
<p>参考资料:</p>
<ol>
<li><a href="http://php.net/manual/zh/class.iterator.php" target="_blank" rel="external">Iterator（迭代器）接口 </a></li>
<li><a href="http://www.ruanyifeng.com/blog/2008/07/php_spl_notes.html" target="_blank" rel="external">PHP SPL笔记</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迭代器,让对象可用 &lt;code&gt;foreach&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;,&lt;code&gt;while&lt;/code&gt;方法&lt;br&gt;
    
    </summary>
    
      <category term="php-SPL" scheme="http://blog.justwe.site/categories/php-SPL/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="SPL" scheme="http://blog.justwe.site/tags/SPL/"/>
    
  </entry>
  
  <entry>
    <title>PHP标准类库系列 arrayAccess</title>
    <link href="http://blog.justwe.site/2017/06/26/php-spl-arrayaccess/"/>
    <id>http://blog.justwe.site/2017/06/26/php-spl-arrayaccess/</id>
    <published>2017-06-26T09:22:53.000Z</published>
    <updated>2017-06-26T09:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多的 php 框架模型调取属性的时候可以按照数组的方式去调用,这是因为使用了<code>arrayAccess</code>这个接口<br><a id="more"></a></p>
<h2 id="什么是-SPL"><a href="#什么是-SPL" class="headerlink" title="什么是 SPL?"></a>什么是 SPL?</h2><p>SPL 是 Standard PHP Library 的缩写,是官方在 php5之后提供的一个标准类库,为 php 面向对象开发<br>提供了良好的支持</p>
<h2 id="如何使用arrayAccess-接口"><a href="#如何使用arrayAccess-接口" class="headerlink" title="如何使用arrayAccess 接口"></a>如何使用arrayAccess 接口</h2><p>最好的学习就是使用啊,这是我写的一个 demo<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $name = <span class="string">'demo'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> $attributes = [];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Demo constructor.</div><div class="line">     * <span class="doctag">@param</span> array $attribute</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $attribute = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;attributes = $attribute;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;&#123;$offset&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$offset&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@param</span> mixed $value</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span><span class="params">($offset, $value)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;&#123;$offset&#125; = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> mixed $offset</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span><span class="params">($offset)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;$offset)&#123;</div><div class="line">          <span class="keyword">$this</span>-&gt;$offset = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $name</div><div class="line">     * <span class="doctag">@param</span> $value</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($name, $value)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;attributes[$name] = $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $name</div><div class="line">     * <span class="doctag">@return</span> mixed|null</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> array_key_exists($name,<span class="keyword">$this</span>-&gt;attributes)? <span class="keyword">$this</span>-&gt;attributes[$name] : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$arr = [</div><div class="line">    <span class="string">'height'</span> =&gt; <span class="string">'180cm'</span>,</div><div class="line">];</div><div class="line">$demo = <span class="keyword">new</span> Demo($arr);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo-&gt;name . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'name'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'height'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="keyword">unset</span>($demo[<span class="string">'height'</span>]);</div><div class="line">var_dump($demo[<span class="string">'height'</span>]);</div><div class="line"><span class="comment">//新增</span></div><div class="line">$demo[<span class="string">'sex'</span>] = <span class="string">'man'</span>;</div><div class="line"><span class="keyword">echo</span> $demo-&gt;sex . PHP_EOL;</div><div class="line"><span class="comment">//修改</span></div><div class="line">$demo[<span class="string">'height'</span>] = <span class="string">'2333cm'</span>;</div><div class="line"><span class="keyword">echo</span> $demo[<span class="string">'height'</span>] . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//打印这个类</span></div><div class="line">var_dump($demo);</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">demo</div><div class="line">demo</div><div class="line">180cm</div><div class="line">NULL</div><div class="line">man</div><div class="line">2333cm</div><div class="line">object(Demo)#1 (2) &#123;</div><div class="line">  [&quot;name&quot;]=&gt;</div><div class="line">  string(4) &quot;demo&quot;</div><div class="line">  [&quot;attributes&quot;:protected]=&gt;</div><div class="line">  array(2) &#123;</div><div class="line">    [&quot;height&quot;]=&gt;</div><div class="line">    string(6) &quot;2333cm&quot;</div><div class="line">    [&quot;sex&quot;]=&gt;</div><div class="line">    string(3) &quot;man&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里还用了<code>__set</code>和<code>__get</code>,现在一些框架的关于数据模型的类也是类似的实现思路</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多的 php 框架模型调取属性的时候可以按照数组的方式去调用,这是因为使用了&lt;code&gt;arrayAccess&lt;/code&gt;这个接口&lt;br&gt;
    
    </summary>
    
      <category term="php-SPL" scheme="http://blog.justwe.site/categories/php-SPL/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="SPL" scheme="http://blog.justwe.site/tags/SPL/"/>
    
  </entry>
  
  <entry>
    <title>__Callstatic</title>
    <link href="http://blog.justwe.site/2017/06/23/php-callstatic/"/>
    <id>http://blog.justwe.site/2017/06/23/php-callstatic/</id>
    <published>2017-06-23T08:50:15.000Z</published>
    <updated>2017-06-23T08:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多框架中调用方法都是<code>Foo::bar()</code>这种格式的,但是他们真的是静态方法吗?<br><a id="more"></a></p>
<p>这种情况在 <code>larave</code> 中尤其常见,但是开发过程中很明显这些有一部分不是静态的,比如你使用一个模型<code>User</code>,那么你每次实例化出来他都是一个全新的,互不影响,这里就用到了一个魔术方法<code>__callStatic</code></p>
<p>举个栗子:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is __call'</span>. PHP_EOL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is __callStatic:'</span>. PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> Test();</div><div class="line">$test-&gt;hello();</div><div class="line">$test::hi();</div><div class="line"><span class="comment">//this is __call:hello</span></div><div class="line"><span class="comment">//this is __callStatic:hi</span></div></pre></td></tr></table></figure></p>
<p>当然魔术方法也是很耗性能的一种方式,每次调用的时候后回先扫一遍<code>class</code>没找到方法时才会调用它,而为了代码的整洁和抽象这个方法也能给很大的帮助,在这之间去要有个权衡</p>
<p>下面实现的 <code>log</code> 类,采用的就是这种方法,将方法解耦出来,只要符合规定的接口就能调用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    <span class="comment">//获取 logger 的实体</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $logger;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogger</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$logger?: <span class="keyword">self</span>::$logger = <span class="keyword">self</span>::createLogger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createLogger</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Logger();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">setLogger</span><span class="params">(LoggerInterface $logger)</span></span>&#123;</div><div class="line">        <span class="keyword">self</span>::$logger = $logger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        call_user_func_array([<span class="keyword">self</span>::getLogger(),$name],$arguments);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($name, $arguments)</span></span></div><div class="line">    &#123;</div><div class="line">        forward_static_call_array([<span class="keyword">self</span>::getLogger(),$name],$arguments);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LoggerInterface</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($message,array $content = [])</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($messge,array $content = [])</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">implements</span> <span class="title">LoggerInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($message, array $content = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is Log method info'</span> . PHP_EOL;</div><div class="line">        var_dump($content);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($messge, array $content = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'this is Log method alert: '</span>. $messge . PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Test::info(<span class="string">'喊个口号:'</span>,[<span class="string">'好好'</span>,<span class="string">'学习'</span>,<span class="string">'天天'</span>,<span class="string">'向上'</span>]);</div><div class="line">$test = <span class="keyword">new</span> Test();</div><div class="line">$test-&gt;alert(<span class="string">'hello'</span>);</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">this is Log method info</div><div class="line">array(4) &#123;</div><div class="line">  [0]=&gt;</div><div class="line">  string(6) &quot;好好&quot;</div><div class="line">  [1]=&gt;</div><div class="line">  string(6) &quot;学习&quot;</div><div class="line">  [2]=&gt;</div><div class="line">  string(6) &quot;天天&quot;</div><div class="line">  [3]=&gt;</div><div class="line">  string(6) &quot;向上&quot;</div><div class="line">&#125;</div><div class="line">this is Log method alert: hello</div></pre></td></tr></table></figure></p>
<p>也许有的小伙伴已经看出来了,没错!这段代码就是仿照(抄)的 <code>EasyWechat</code>的日志部分,<a href="https://github.com/overtrue/wechat/blob/master/src/Support/Log.php" target="_blank" rel="external">代码片段</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多框架中调用方法都是&lt;code&gt;Foo::bar()&lt;/code&gt;这种格式的,但是他们真的是静态方法吗?&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="http://blog.justwe.site/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="laravel" scheme="http://blog.justwe.site/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Git-Error-Permission</title>
    <link href="http://blog.justwe.site/2017/06/23/git-error-permission/"/>
    <id>http://blog.justwe.site/2017/06/23/git-error-permission/</id>
    <published>2017-06-23T08:46:13.000Z</published>
    <updated>2017-06-23T08:49:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这种情况在部署 <code>webhook</code> 的时候经常会碰到<br>报错信息: <code>git error insufficient permission for adding an object</code><br>这种报错就是权限错误,把项目中的.git 文件整体改成你的执行权限就行</p>
<p><strong>有一点要注意</strong>,如果你服务器上有一个 www 的角色在部署项目,那么你就不能再用root的角色去部署了,否则会在 .git/objects 目录下产生由 root所属的文件从而造成当www再次执行合并任务的时候因为权限不能操作部分commit的文件而造成合并失败</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这种情况在部署 &lt;code&gt;webhook&lt;/code&gt; 的时候经常会碰到&lt;br&gt;报错信息: &lt;code&gt;git error insufficient permission for adding an object&lt;/code&gt;&lt;br&gt;这种报错就是权限错误,把项目中的.gi
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="linux" scheme="http://blog.justwe.site/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>转 跨域请求时两次发送请求的问题</title>
    <link href="http://blog.justwe.site/2017/06/23/axios-cors/"/>
    <id>http://blog.justwe.site/2017/06/23/axios-cors/</id>
    <published>2017-06-23T08:42:38.000Z</published>
    <updated>2017-06-23T08:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>跨域的时候总会碰上各种各样的问题,这就是其中一种情况<br><a id="more"></a><br>检查一下，两次请求分别的 Request Method:<br>因为是跨域请求，客户端发先发送一个OPTIONS 请求<br>Preflighted Requests是CORS中一种透明服务器验证机制。预检请求首先需要向另外一个域名的资源发送一个 HTTP OPTIONS 请求头，其目的就是为了判断实际发送的请求是否是安全的。</p>
<p>很有可能是这个问题，我现在用axios 作为我的网络请求库，也遇到了这个问题，跨域访问的时候 ，都会先发送一个OPTIONS请求，用来判断接下来的请求是否安全和被允许</p>
<p>我现在的做法是，在index.php 入口文件中，检测，是否为OPTIONS 请求，如果是就返回一个状态具体代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if ($_SERVER[&apos;REQUEST_METHOD&apos;]==&apos;OPTIONS&apos;) &#123;</div><div class="line">    header(&quot;Access-Control-Allow-Origin: *&quot;);</div><div class="line">    header(&quot;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;);</div><div class="line">    header(&apos;Access-Control-Allow-Methods: GET, POST, PUT,DELETE,OPTIONS,PATCH&apos;);</div><div class="line">    return;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://segmentfault.com/q/1010000009846666" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域的时候总会碰上各种各样的问题,这就是其中一种情况&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="axios" scheme="http://blog.justwe.site/tags/axios/"/>
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Git同步所 Fork 的库代码</title>
    <link href="http://blog.justwe.site/2017/06/17/git-fork-upstream/"/>
    <id>http://blog.justwe.site/2017/06/17/git-fork-upstream/</id>
    <published>2017-06-17T06:36:23.000Z</published>
    <updated>2017-06-17T06:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们 fork 了一个库进行开发,但是时间长了那个库已经添加了一些新的东西,这要怎么处理呢?<br><a id="more"></a><br>先添加你 fork 的库的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add FORK-sync https://github.com/xxx/yyy.git</div><div class="line">git remote -v</div></pre></td></tr></table></figure></p>
<p> 能看到类似的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FORK-sync	https://github.com/xxx/yyy.git (fetch)</div><div class="line">FORK-sync	https://github.com/xxx/yyy.git (push)</div><div class="line">origin	git@github.xxx/born-1.git (fetch)</div><div class="line">origin	git@github.xxx/born-1.git (push)</div></pre></td></tr></table></figure></p>
<p>然后接受所 fork 库的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch FORK-sync</div></pre></td></tr></table></figure></p>
<p>合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge FORK-sync/master</div></pre></td></tr></table></figure></p>
<p>再推送到你的远程仓库就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们 fork 了一个库进行开发,但是时间长了那个库已经添加了一些新的东西,这要怎么处理呢?&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="fork" scheme="http://blog.justwe.site/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>Go操作 Json 文本</title>
    <link href="http://blog.justwe.site/2017/06/05/go-json/"/>
    <id>http://blog.justwe.site/2017/06/05/go-json/</id>
    <published>2017-06-05T14:18:51.000Z</published>
    <updated>2017-06-19T15:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些简单的导入导出<br><a id="more"></a></p>
<h2 id="事先准备一个-json-文件"><a href="#事先准备一个-json-文件" class="headerlink" title="事先准备一个 json 文件"></a>事先准备一个 json 文件</h2><p>首先我们准备一个 json 文件,我直接就用的<code>package.json</code>里的一些字段<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"GPF &lt;5173180@qq.com&gt;"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"A Vue.js project"</span>,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.2.6"</span>,</div><div class="line">    <span class="attr">"vue-router"</span>: <span class="string">"^2.3.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"browserslist"</span>: [</div><div class="line">    <span class="string">"&gt; 1%"</span>,</div><div class="line">    <span class="string">"last 2 versions"</span>,</div><div class="line">    <span class="string">"not ie &lt;= 8"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="具体操作的代码"><a href="#具体操作的代码" class="headerlink" title="具体操作的代码"></a>具体操作的代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> allStruct <span class="keyword">interface</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义了获取 json 的结构体</span></div><div class="line"><span class="keyword">type</span> Package <span class="keyword">struct</span> &#123;</div><div class="line">	Mingzi       <span class="keyword">string</span> <span class="string">`json:"name"`</span></div><div class="line">	Version      <span class="keyword">string</span></div><div class="line">	PrIvate      <span class="keyword">bool</span></div><div class="line">	Dependencies Depend</div><div class="line">	Browserslist []<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">type</span> Depend <span class="keyword">struct</span> &#123;</div><div class="line">	Vue    <span class="keyword">string</span></div><div class="line">	Router <span class="keyword">string</span> <span class="string">`json:"vue-router"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	path := <span class="string">"./package.json"</span></div><div class="line"></div><div class="line">	pkg := Package&#123;&#125;</div><div class="line">	file, err := os.Open(path)</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	data, err := ioutil.ReadAll(file)</div><div class="line">	checkError(err)</div><div class="line">	<span class="comment">//这个就是解析 json 格式内容的函数</span></div><div class="line">	json.Unmarshal(data, &amp;pkg)</div><div class="line">	foreachStruct(pkg)</div><div class="line">	<span class="comment">//output</span></div><div class="line">	<span class="comment">// Mingzi -- hexo-site</span></div><div class="line">	<span class="comment">// Version -- 0.0.0</span></div><div class="line">	<span class="comment">// PrIvate -- true</span></div><div class="line">	<span class="comment">// Dependencies -- &#123;^2.2.6 ^2.3.1&#125;</span></div><div class="line">	<span class="comment">// Browserslist -- [&gt; 1% last 2 versions not ie &lt;= 8]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检测错误的方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历结构体的方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">foreachStruct</span><span class="params">(st <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	t := reflect.TypeOf(st)</div><div class="line">	v := reflect.ValueOf(st)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; t.NumField(); k++ &#123;</div><div class="line">		key := t.Field(k).Name</div><div class="line">		value := v.Field(k).Interface()</div><div class="line">		fmt.Printf(<span class="string">"%s -- %v \n"</span>, key, value)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法是将 json 自动的赋值给定义好的 <code>struct</code> 上,自动赋值的条件是:</p>
<ol>
<li><p>首先查找 tag 含有 jsonkey 值的<strong>可导出的</strong> struct 字段(首字母大写),如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mingzi       string `json:&quot;name&quot;`  //对应 json 中的 &quot;name:&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>其次查找字段名相同的<strong>可导出的</strong> struct 字段 如: <code>Version      string //对应 json 中的 &quot;version:&quot;</code></p>
</li>
<li>然后查找可导出的大小写不敏感的字段 如: <code>PrIvate      bool //对应 json 中的 &quot;private&quot;</code></li>
</ol>
<p>总之就是如果要求不高就建立 struct 的时候字段直接和 json 字段一一对应就好,但是一定要<strong>首字母大写</strong></p>
<h2 id="导入未知结构的-json-数据"><a href="#导入未知结构的-json-数据" class="headerlink" title="导入未知结构的 json 数据"></a>导入未知结构的 json 数据</h2><p>很多时候我们需要导入的 json 的不确定内容的,或者特别特别长,比如<code>laravel 的 composer.json</code>文件<br>这个时候如果写结构体就很不灵活了,当然,像这种配置型的文件写一个长长的结构体也是可以的<br>于是乎我们就是用 <strong>空接口</strong> 配合 <strong>断言</strong> 来实现未知格式json 的解析<br>上代码:<br>这里的<code>composer.json</code>文件可以参考 <a href="https://github.com/laravel/laravel/blob/master/composer.json" target="_blank" rel="external">laravel的composer.json文件</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io/ioutil"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/bitly/go-simplejson"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	filePath := <span class="string">"./composer.json"</span></div><div class="line">	file, err := os.Open(filePath)</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">defer</span> file.Close()</div><div class="line"></div><div class="line">	data, err := ioutil.ReadAll(file)</div><div class="line">	<span class="comment">// checkError(err)</span></div><div class="line">	readJSON(data)</div><div class="line"></div><div class="line">	js, err := simplejson.NewJson(data)</div><div class="line">	checkError(err)</div><div class="line"></div><div class="line">	<span class="comment">//获取某个字段值</span></div><div class="line">	str, err := js.Get(<span class="string">"name"</span>).String()</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="string">"name -&gt; "</span>, str)</div><div class="line"></div><div class="line">	<span class="comment">//多层级的key值</span></div><div class="line">	str2, err := js.Get(<span class="string">"autoload"</span>).Get(<span class="string">"classmap"</span>).GetIndex(<span class="number">0</span>).String()</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="string">"autoload.classmap[0] -&gt; "</span>, str2)</div><div class="line"></div><div class="line">	<span class="comment">//判断字段是否存在</span></div><div class="line">	<span class="comment">//源码内容 https://github.com/bitly/go-simplejson/blob/master/simplejson.go#L157</span></div><div class="line">	jType, ok := js.CheckGet(<span class="string">"type"</span>)</div><div class="line">	<span class="keyword">if</span> ok &#123;</div><div class="line">		str3, _ := jType.String()</div><div class="line">		fmt.Println(<span class="string">"type -&gt; "</span>, str3)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		fmt.Println(<span class="string">"no exist"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//数组</span></div><div class="line">	arr, err := js.Get(<span class="string">"keywords"</span>).Array()</div><div class="line">	checkError(err)</div><div class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</div><div class="line">		fmt.Printf(<span class="string">"arr index:%d value:%s \n"</span>, i, v)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//字典</span></div><div class="line">	mp := js.Get(<span class="string">"require"</span>).MustMap()</div><div class="line">	fmt.Println(<span class="string">"require's key:value is:"</span>)</div><div class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> mp &#123;</div><div class="line">		fmt.Printf(<span class="string">"%s : %s \n"</span>, key, value)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readJSON</span><span class="params">(data []<span class="keyword">byte</span>)</span></span> &#123;</div><div class="line">	<span class="comment">//定义一个由空接口组成的字典用来承接解析出来的 json</span></div><div class="line">	<span class="keyword">var</span> f <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">	json.Unmarshal(data, &amp;f)</div><div class="line">	<span class="comment">//通过断言来判断字段类型</span></div><div class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> f &#123;</div><div class="line">		<span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</div><div class="line">		<span class="keyword">case</span> <span class="keyword">string</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is string ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">case</span> <span class="keyword">int</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is int ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">case</span> []<span class="keyword">interface</span>&#123;&#125;:</div><div class="line">			fmt.Println(k, <span class="string">"is interface ====&gt;"</span>, v)</div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			fmt.Println(k, <span class="string">"is null type ====&gt;"</span>, v)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了 空接口&amp;断言 这种万用的写法,社区里也是有不少成熟的轮子,我这里用的就是一个很不错的轮子<br><a href="https://github.com/bitly/go-simplejson/blob/master/simplejson.go" target="_blank" rel="external">simpleJson</a>,以上给了几个示例,更全面的在轮子<br>的 <a href="https://github.com/bitly/go-simplejson" target="_blank" rel="external">github</a>中的测试文件中列举出来了</p>
<blockquote>
<p>作为新手首要的目标就是先让项目跑起来,等有一定的代码量之后再去看轮子的源码,如果先看源码经常<br>起到事倍功半的效果<br>—-这是我说的</p>
</blockquote>
<h2 id="导出-json-格式文件"><a href="#导出-json-格式文件" class="headerlink" title="导出 json 格式文件"></a>导出 json 格式文件</h2><p>知道了如何导入就要知道如何导出,接下来就是导出的一些需要注意的地方<br>上代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"encoding/json"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//Server is a json format</span></div><div class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</div><div class="line">	ServerName <span class="keyword">string</span> <span class="string">`json:"serverName"`</span></div><div class="line">	ServerIP   <span class="keyword">string</span> <span class="string">`json:"serverIP"`</span></div><div class="line">	Port       <span class="keyword">int</span>    <span class="string">`json:"port,string"`</span>         <span class="comment">// ,string 将 int,int64,bool,string 类型字段按 string 输出</span></div><div class="line">	Version    <span class="keyword">string</span> <span class="string">`json:"version,omitempty"`</span>   <span class="comment">//添加了 ,omitempty 修饰符的意思就是如果该字段未空就不输出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Serverslice is a json format</span></div><div class="line"><span class="keyword">type</span> Serverslice <span class="keyword">struct</span> &#123;</div><div class="line">	ID <span class="keyword">string</span> <span class="string">`json:"-"`</span> <span class="comment">// - 将不会处理</span></div><div class="line">	Servers []Server <span class="string">`json:"servers"`</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> s Serverslice</div><div class="line">	s.Servers = <span class="built_in">append</span>(s.Servers, Server&#123;<span class="string">"beijing_vpn"</span>, <span class="string">"127.0.0.1"</span>, <span class="number">22</span>, <span class="string">"v0.0.1"</span>&#125;)</div><div class="line">	s.Servers = <span class="built_in">append</span>(s.Servers, Server&#123;ServerName: <span class="string">"chegongzhuang"</span>, ServerIP: <span class="string">"127.0.0.2"</span>, Port: <span class="number">443</span>&#125;)</div><div class="line"></div><div class="line">	b, err := json.Marshal(s)</div><div class="line">	checkError(err)</div><div class="line">	fmt.Println(<span class="keyword">string</span>(b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//输出内容为:</span></div><div class="line"><span class="comment">//&#123;"servers":[&#123;"serverName":"beijing_vpn","serverIP":"127.0.0.1","port":"22","version":"v0.0.1"&#125;,&#123;"serverName":"chegongzhuang","serverIP":"127.0.0.2","port":"443"&#125;]&#125;</span></div></pre></td></tr></table></figure></p>
<p>我们使用了<code>encoding/json</code>这个包,而且是将结构体转成的 json 格式,需要注意一下几点:</p>
<ol>
<li>定义<code>Struct</code>的字段必须是首字母大写可导出的,如果不写<code>tag</code>的话将按照字段名来输出</li>
<li><code>tag</code>中设置的自定义名称如<code>json:&quot;serverName&quot;</code>将优先于字段名用于 json 的字段当中<br>按照我们刚才的例子就是 json 中输出 <code>serverName</code> 而不是 <code>ServerName</code></li>
<li>如果 <code>tag:&quot;-&quot;</code> 将不对这个字段进行处理<br>marshal 函数需要注意的问题:</li>
<li><code>tag:&quot;xxx,omitempty&quot;</code>这种修饰词就是如果字段为空时不输出</li>
<li><code>tag:&quot;xxx,string&quot;</code>将 int,int64,bool,string 类型字段按 string 输出</li>
<li>json 对象只支持 string 作为 key,因此如果要编码一个 map 必须是<code>map[string]T</code> (T 代表任意类型)</li>
<li>channel,complex和 function 不能被输出</li>
<li>指针在编码的时候会输出指针指向的内容,空指针输出<code>null</code></li>
</ol>
<p>参照七牛的<a href="https://github.com/qiniu/api.v7/blob/develop/cdn/api.go" target="_blank" rel="external">sdk 文档</a>就是一个很好的例子</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些简单的导入导出&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="json" scheme="http://blog.justwe.site/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>关于使用 Git 的操作流程</title>
    <link href="http://blog.justwe.site/2017/05/27/git-workflow/"/>
    <id>http://blog.justwe.site/2017/05/27/git-workflow/</id>
    <published>2017-05-27T05:24:32.000Z</published>
    <updated>2017-05-29T14:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>老夫的毕生功力都在这了…<br><a id="more"></a></p>
<h2 id="通常我们工作时是这样操作"><a href="#通常我们工作时是这样操作" class="headerlink" title="通常我们工作时是这样操作"></a>通常我们工作时是这样操作</h2><p>说一下使用 <code>git</code> 做版本控制的时候的工作流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add -A           #需要添加到版本库中的文件 -A 就代表着所有文件(除开了 .gitignore忽略掉的文件)</div><div class="line">git commit -m &apos;本次提交的备注&apos;</div><div class="line">git pull            #将远程的库和本地的库版本同步一下,因为远程库可能发生了修改(多人合作开发时)</div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>这样操作的前提是本地远程都是同一个 <code>master</code> 分支上</p>
<h2 id="最可能会碰到的问题"><a href="#最可能会碰到的问题" class="headerlink" title="最可能会碰到的问题"></a>最可能会碰到的问题</h2><p>以上操作前两步通常不会碰到问题,最容易发生问题的是 <code>git pull</code> 这一步<br>因为多人开发时难免碰到同时修改了同一个文件,那么就会产生<strong>冲突</strong><br>git 是根据文件每行发生的修改进行的判定的,如果同时对同一文件的同一行发生了修改,就卡死到这一步上了</p>
<h2 id="怎么解决这个问题"><a href="#怎么解决这个问题" class="headerlink" title="怎么解决这个问题"></a>怎么解决这个问题</h2><p>我常用的是命令行和 phpstrom 中的版本控制工具,最推荐的是命令行操作,别的图形界面也是调的命令行接口<br>直接学会git 的命令是学习成本最低的一种方式,一次学会到处可用啊!</p>
<p>命令行还有个强大的地方就是它的提示通常就是你解决问题的方法,照着提示打就行(要善用提示啊,别看见报错就慌了)</p>
<p>我们做一个实验,我自己的一个版本库本地和远程同时发生了修改,而且是操作的同一个文件,<br>我直接进行 <code>git push</code>操作<br><img src="/images/git/git-push.png" alt=""><br>看到提示没?提示中的 hint 中说了,向远程库中更新被拒,因为远程有了修改而本地没有(说白了就是没同步),<br>这通常发生在另一个版本库向远程推送了相同的文件(就是两个人在这个版本下同时操作了同一个文件),<br>提示中给出原因之后紧接着给出了解决办法<code>(e.g., &#39;git pull ...&#39;)before pushing again</code>,</p>
<p>我们按着它给的提示操作一下<br><img src="/images/git/git-pull.png" alt=""><br>通常如果两个人之间的操作不发生冲突比如同时修改了同一个文件的同一行的情况下就会进入<code>commit</code>的<br>编辑界面了,但是我给他人为的造成一个错误,这个错误就是我们最常碰到的错误,合并冲突<br>看到提示中的最后一行了没有?<br><code>Automatic merge failed; fix conflicts and then commit the result.</code><br>自动合并失败了,请修复冲突并再次提交</p>
<p>如果文件很多我怎么去找到它?</p>
<ul>
<li>一种是靠界面工具主动把错误推到你面前</li>
<li>另一种就是自己去找了</li>
</ul>
<p>第一种方法坑爹的地方就是好多工具他给你提示就提示一次,你如果给关了就不会再提示了,但是该提交不上去的<br>还是提交不上去,而且如果是线上火速修复的时候你的编辑器是帮不到那么远的<br>我们选第二种,肯定不是挨个文件去翻啊!会死人的</p>
<p>有一个很有用的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p><img src="/images/git/git-status.png" alt=""><br>标红的文件都给你了,而且还给你了需要执行的命令,<strong>你别假装看不到啊!</strong><br>当然这个时候直接<code>git add &amp;&amp; git commit</code>会出事的,你还没解决冲突呢!<br>我们去这个冲突文件中解决掉冲突本地能跑通了再提交,而且这个错误提示会指名文件路径的,我这个冲突文件<br>因为正好是在项目的根目录下才没有的</p>
<p>打开这个文件我们看到如下的内容:<br><img src="/images/git/git-chongtu.png" alt=""><br>我这是在 phpstrom 中打开的文件,如果phpstrom 能读取到你项目中的 <code>.git/</code> 目录是可以进行版本控制的<br>这里phpstrom 就帮你把冲突文件标红了,多么醒目~当然这也是我们自己找的<br>如果文件内容特别多但是就一两处冲突时我们直接搜索关键词 <code>HEAD</code>或者<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>就行,你懂的…<br>被尖角号扩起来的就是冲突的地方,接下来就是<del>保孩子还是保大人</del>解决冲突的时候了,找到谁和你改的同一处代码</p>
<p>什么?你说你找不到是谁?你没看到代码冲突块下的 <code>779833d952d8a6557b2e8eba3bd192ede5cb6ca0</code><br>这一段文字吗?你先别激动,这个点还不适合开车,这个是提交的 commit-id,你每次提交都会产生的一个标识<br>要查看这到底是谁和我的代码冲突了就执行下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log 779833d952d8a6557b2e8eba3bd192ede5cb6ca0</div></pre></td></tr></table></figure></p>
<p>第一行就是你要的结果,<br>如果直接<code>git log -p</code> 就是列出所有的提交记录 -p 就是显示出修改的地方</p>
<p>冲突块部分 HEAD就是你写的代码,下面的是别人写的,去掉其中一个把那些标签清理干净,测试一下没问题了<br>再<code>git add &amp;&amp; git commit &amp;&amp; git pull &amp;&amp; git push</code> 这四连技好了,世界清净了</p>
<h2 id="这合并的时候发生了什么"><a href="#这合并的时候发生了什么" class="headerlink" title="这合并的时候发生了什么?"></a>这合并的时候发生了什么?</h2><p>这是我在 segmentfault 中给出的答案:</p>
<p>比如你从一个git log为<code>1,2,3,4,5,6</code>的远程库拉取到了本地,<br>另一个同事也拉取了同样的代码,而且你的同事先于你提交到远程了,<br>此时<strong>远程</strong>的版本是<code>1,2,3,4,5,6,7_new,8_new</code>,<br>而你当前只是<strong>本地</strong>的版本<code>1,2,3,4,5,6,7_local,8_local,9_local</code><br>从这里你就能看出你前一部分和<strong>远程</strong>的一样,后一部分和<strong>远程</strong>的不一样,<br>这个时候你不能正常推送上去的,如果你采取<code>git push origin master --force</code><br>那么<strong>远程</strong>的版本就变成了<code>1,2,3,4,5,6,7_local,8_local,9_local</code><br>之前你同事推送的<code>7_new,8_new</code>这两次推送被覆盖了,这不是大家想要的情况<br>因此需要<code>git pull</code>来将<strong>本地</strong>的版本合并成样<br><code>1,2,3,4,5,6,7_new,7_local,8_local,8_new,9_local,10_commit_merge</code><br>远程和<strong>本地</strong>的排序是按当时 <code>commit</code> 的时间来排的,最后一个<code>10_commit_merge</code>就是你<strong>本地</strong>和<strong>远程</strong>合并的标志,最后你推送到远程仓库的应该也是这个,<br>因为你们操作的是同一个库始终要保持代码的同步,所以一旦版本库发生改动同一分支下的所有人都要跟着去同步他,因为各开发各的直接往上推 git 还没智能到帮你处理冲突的地步<br><a href="https://segmentfault.com/q/1010000009549291?_ea=1982061" target="_blank" rel="external">答案链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老夫的毕生功力都在这了…&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="workflow" scheme="http://blog.justwe.site/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Laravel54初始化迁移失败</title>
    <link href="http://blog.justwe.site/2017/05/24/laravel54-migrate-error/"/>
    <id>http://blog.justwe.site/2017/05/24/laravel54-migrate-error/</id>
    <published>2017-05-24T03:55:45.000Z</published>
    <updated>2017-05-24T04:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在新版的 laravel 框架当中(v5.4.23) 出现了报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Illuminate\Database\QueryException]</div><div class="line"> SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t</div><div class="line"> oo long; max key length is 767 bytes (SQL: alter table `users` add unique `</div><div class="line"> users_email_unique`(`email`))</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>错误重现:</p>
<ol>
<li>laravel 版本 5.4.23</li>
<li>配置好数据库链接,执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php artisan make:auth</div><div class="line">php artisan migrate</div></pre></td></tr></table></figure>
</li>
</ol>
<p>就会出现错误</p>
<p>解决办法:<br>打开文件 <code>@yourApp/app/Prividers/AppserviceProvider.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    Schema::defaultStringLength(<span class="number">191</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>文章来源: <a href="https://laracasts.com/discuss/channels/laravel/laravel-54-failing-on-php-artisan-migrate-after-php-artisan-makeauth?page=1" target="_blank" rel="external">laracast</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在新版的 laravel 框架当中(v5.4.23) 出现了报错&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Illuminate\Database\QueryException]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; oo long; max key length is 767 bytes (SQL: alter table `users` add unique `&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; users_email_unique`(`email`))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="laravel" scheme="http://blog.justwe.site/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Go-Mysql</title>
    <link href="http://blog.justwe.site/2017/05/17/go-mysql/"/>
    <id>http://blog.justwe.site/2017/05/17/go-mysql/</id>
    <published>2017-05-17T15:32:12.000Z</published>
    <updated>2017-05-18T02:16:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里写一个<code>go</code> 操作 <code>mysql</code> 的 curd 的 demo</p>
<a id="more"></a>
<p>表结构是这样的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(</div><div class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</div><div class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">''</span>,</div><div class="line">	age <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>,</div><div class="line">	created_at <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>go 的文件是:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"database/sql"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	_ <span class="string">"github.com/GO-SQL-Driver/MySQL"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkErr</span><span class="params">(err error)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123123@tcp(localhost:33060)/go?charset=utf8"</span>)</div><div class="line">	<span class="keyword">defer</span> db.Close()</div><div class="line">	checkErr(err)</div><div class="line"></div><div class="line">	<span class="comment">//insert</span></div><div class="line">	stmt, err := db.Prepare(<span class="string">"INSERT test SET name=? , age=? , created_at=?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err := stmt.Exec(<span class="string">"gaopengfei"</span>, <span class="number">22</span>, time.Now().Unix())</div><div class="line">	checkErr(err)</div><div class="line">	<span class="comment">//获取插入数据的 id</span></div><div class="line">	id, err := res.LastInsertId()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"insert id %d \n"</span>, id)</div><div class="line"></div><div class="line">	<span class="comment">//update</span></div><div class="line">	stmt, err = db.Prepare(<span class="string">"UPDATE test SET age=? WHERE id &lt; ?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err = stmt.Exec(<span class="number">233</span>, <span class="number">4</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="comment">//输出受影响的条数</span></div><div class="line">	affect, err := res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"affected num is %d \n"</span>, affect)</div><div class="line"></div><div class="line">	<span class="comment">//select</span></div><div class="line">	rows, err := db.Query(<span class="string">"SELECT * FROM test"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	<span class="keyword">for</span> rows.Next() &#123;</div><div class="line">		<span class="keyword">var</span> id <span class="keyword">int</span></div><div class="line">		<span class="keyword">var</span> name <span class="keyword">string</span></div><div class="line">		<span class="keyword">var</span> age <span class="keyword">int</span></div><div class="line">		<span class="keyword">var</span> createdAt <span class="keyword">int</span> <span class="comment">//go 不让使用下划线的方式定义变量,如果字段是 created_at 需要写成 createdAt 驼峰命名法</span></div><div class="line">		err = rows.Scan(&amp;id, &amp;name, &amp;age, &amp;createdAt)</div><div class="line">		checkErr(err)</div><div class="line">		<span class="comment">//将int 转成 int64格式,方便格式化时间</span></div><div class="line">		<span class="keyword">var</span> tm64 <span class="keyword">int64</span></div><div class="line">		tm64 = <span class="keyword">int64</span>(createdAt)</div><div class="line">		tm := time.Unix(tm64, <span class="number">0</span>)</div><div class="line">		fmt.Printf(<span class="string">"id is %d; name is %s; age is %d: created_at is %s \n"</span>, id, name, age, tm.Format(<span class="string">"2006-01-02 03:04:05 PM"</span>))</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//delete</span></div><div class="line">	stmt, err = db.Prepare(<span class="string">"DELETE FROM test WHERE id=?"</span>)</div><div class="line">	checkErr(err)</div><div class="line">	res, err = stmt.Exec(<span class="number">3</span>)</div><div class="line">	checkErr(err)</div><div class="line">	affect, err = res.RowsAffected()</div><div class="line">	checkErr(err)</div><div class="line">	fmt.Printf(<span class="string">"affected num is %d \n"</span>, affect)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>这里使用了一个稳定的 mysql 包,因为 go 官方并没有实现 mysql 的实例,而是提供了数据操作的接口<br>只要能实现就可以进行操作</li>
<li>文件头部 <code>import</code> 中出现了 <code>_ &quot;github.com/GO-SQL-Driver/MySQL&quot;</code> 这样的写法,意思是<br>引用 <code>_</code> 后面的包名而不直接使用其中的函数,变量等资源</li>
<li>另外不得不吐槽一下 <code>go</code> 的时间格式函数,我大 php 的格式化是这样的<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date(<span class="string">"Y-m-d H:i:s"</span>,time())</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这边的是 “Y-m-d H:i:s” 啊!,一眼就看出来格式是什么了,但是 go 里的格式是这样的<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">timestamp := time.Now().Unix()</div><div class="line">tm := time.Unix(timestamp, <span class="number">0</span>)</div><div class="line">timer  := tm.Format(<span class="string">"2006-01-02 03:04:05 PM"</span>)</div><div class="line">fmt.Println(timer)</div></pre></td></tr></table></figure></p>
<p>他的格式代表不是 Y,m,d,H,i,s 而是 2006,01,02,03,04,05 PM<br>这个也好记,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">月份 1,01,Jan,January</div><div class="line"></div><div class="line">日　 2,02,_2</div><div class="line"></div><div class="line">时　 3,03,15,PM,pm,AM,am</div><div class="line"></div><div class="line">分　 4,04</div><div class="line"></div><div class="line">秒　 5,05</div><div class="line"></div><div class="line">年　 06,2006</div><div class="line"></div><div class="line">周几 Mon,Monday</div><div class="line"></div><div class="line">时区时差表示 -07,-0700,Z0700,Z07:00,-07:00,MST</div><div class="line"></div><div class="line">时区字母缩写 MST</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里写一个&lt;code&gt;go&lt;/code&gt; 操作 &lt;code&gt;mysql&lt;/code&gt; 的 curd 的 demo&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://blog.justwe.site/categories/go/"/>
    
    
      <category term="go" scheme="http://blog.justwe.site/tags/go/"/>
    
      <category term="mysql" scheme="http://blog.justwe.site/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Php-Callback-Func</title>
    <link href="http://blog.justwe.site/2017/05/11/php-callback-func/"/>
    <id>http://blog.justwe.site/2017/05/11/php-callback-func/</id>
    <published>2017-05-11T10:31:59.000Z</published>
    <updated>2017-05-11T10:41:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>你知道茴香的<code>茴</code>有四种写法,那你知道 php 的回调也有四种写法吗?<br><a id="more"></a></p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="function"><span class="keyword">function</span><span class="params">($item)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> $item;</div><div class="line">&#125;,$array);</div></pre></td></tr></table></figure>
<h2 id="类静态调用"><a href="#类静态调用" class="headerlink" title="类静态调用"></a>类静态调用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($req)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="string">'A::Test'</span>,$array);</div><div class="line">array_map([<span class="string">'A'</span>,<span class="string">'Test'</span>],$array);</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($item)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'hello world'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">array_map(<span class="string">'test'</span>,$array);</div></pre></td></tr></table></figure>
<h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($req)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> $array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">$obj = <span class="keyword">new</span> A();</div><div class="line">array_map([$obj,<span class="string">'test'</span>],$array);</div></pre></td></tr></table></figure>
<p>转载自:<a href="https://wiki.swoole.com/wiki/page/458.html" target="_blank" rel="external">4种PHP回调函数风格-Swoole扩展-Swoole文档中心</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你知道茴香的&lt;code&gt;茴&lt;/code&gt;有四种写法,那你知道 php 的回调也有四种写法吗?&lt;br&gt;
    
    </summary>
    
      <category term="default" scheme="http://blog.justwe.site/categories/default/"/>
    
    
      <category term="php" scheme="http://blog.justwe.site/tags/php/"/>
    
      <category term="callback" scheme="http://blog.justwe.site/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>Git-Askpass-Error</title>
    <link href="http://blog.justwe.site/2017/05/08/git-askpass-error/"/>
    <id>http://blog.justwe.site/2017/05/08/git-askpass-error/</id>
    <published>2017-05-08T14:31:42.000Z</published>
    <updated>2017-05-08T14:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 的账号密码错误情况<br><a id="more"></a></p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>前段时间使用 phpstrom 中的 git 出现了一个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Fetch failed</div><div class="line">	error: unable to read askpass response from &apos;..\tmp\intellij-git-askpass.bat&apos;</div><div class="line">	error: failed to execute prompt script (exit code 1)</div><div class="line">	fatal: could not read Username for &apos;http://xxx:3000&apos;: No error</div></pre></td></tr></table></figure></p>
<p>大体情况就是某一次操作的时候账户密码发生了变动,导致本地的 git 没权限去拉取远程库了(因为用的是 https)<br>的方式</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>第一种(推荐): 将远程地址换成 ssh 地址,使用 ssh-key 登录</p>
<p>第二种: 实在不想换的话就是用这种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin https://&lt;username&gt;:&lt;password&gt;@github.com/&lt;username&gt;/&lt;repo_name&gt;.git</div></pre></td></tr></table></figure></p>
<p>将账号密码写入到请求地址当中<br>比如我账户为: gaopengfei 密码为: 123456<br>请求的库的地址是 <code>https://github.com/gaopengfei123123/redis_lbs.git</code><br>那么我的远程地址就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin https://gaopengfei:123456@github.com/gaopengfei123123/redis_lbs.git</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/atom/atom/issues/8984#issuecomment-144697558" target="_blank" rel="external">参考issues</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 的账号密码错误情况&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.justwe.site/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.justwe.site/tags/git/"/>
    
      <category term="askpass" scheme="http://blog.justwe.site/tags/askpass/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Transition</title>
    <link href="http://blog.justwe.site/2017/05/06/vue-transition/"/>
    <id>http://blog.justwe.site/2017/05/06/vue-transition/</id>
    <published>2017-05-06T05:24:23.000Z</published>
    <updated>2017-05-06T07:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>对 vue 的渐变效果的简单使用</p>
<a id="more"></a>
<h2 id="单个节点的渐变效果"><a href="#单个节点的渐变效果" class="headerlink" title="单个节点的渐变效果"></a>单个节点的渐变效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>动画测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/animate.css/3.5.2/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/vue/2.3.2/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></div><div class="line">    Toggle render</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 同一个节点的多个显隐效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里解释一下 <code>&lt;transition&gt;</code> 中的参数问题:</p>
<ol>
<li><code>mode=&quot;out-in&quot;</code> 采用的切换模式是 先出后进,保证两个节点能平滑的切换显示, 还有一种是 <code>in-out</code>,<br>如果没有指定<code>mode</code>将同时生效,两个元素的动画同时触发这不是我现在需要的</li>
<li><code>enter-active-class=&quot;animated fadeInDown&quot;</code>  元素显示时添加的 class , 这里使用了 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">animate.css</a>,</li>
<li><code>leave-active-class=&quot;animated fadeOutDown&quot;</code> 元素消失时显示的动画</li>
<li><code>key</code> 相同标签名中必须的标识,否则 vue 将不能区分元素内容</li>
</ol>
<h2 id="一种运用-key-简化判断的一种写法"><a href="#一种运用-key-简化判断的一种写法" class="headerlink" title="一种运用 key 简化判断的一种写法"></a>一种运用 key 简化判断的一种写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:key</span>=<span class="string">"status"</span>&gt;</span>&#123;&#123; status &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它的效果等同于:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"status === 'show'"</span> <span class="attr">key</span>=<span class="string">"show"</span>&gt;</span></div><div class="line">    show</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"status === 'hidden'"</span> <span class="attr">key</span>=<span class="string">"hidden"</span>&gt;</span></div><div class="line">    hidden</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果是多重的状态判断这个会很实用</p>
<h2 id="多组件之间的状态过渡"><a href="#多组件之间的状态过渡" class="headerlink" title="多组件之间的状态过渡"></a>多组件之间的状态过渡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"view"</span> <span class="attr">value</span>=<span class="string">"v-a"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"view"</span> <span class="attr">value</span>=<span class="string">"v-b"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 多个组件的过渡效果 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span> <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInDown"</span> <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutDown"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">view</span>: <span class="string">'v-a'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;&#125;,</div><div class="line">      <span class="attr">components</span>: &#123;</div><div class="line">        <span class="string">'v-a'</span>: &#123;</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;div&gt;Component A&lt;/div&gt;'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'v-b'</span>: &#123;</div><div class="line">          <span class="attr">template</span>: <span class="string">'&lt;div&gt;Component B&lt;/div&gt;'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种情况下部需要添加 key 值了,因为每次动态渲染的时候都只有一个</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对 vue 的渐变效果的简单使用&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.justwe.site/tags/js/"/>
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
      <category term="animate" scheme="http://blog.justwe.site/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>使用 Axios-Post 提交数据</title>
    <link href="http://blog.justwe.site/2017/05/02/vue-axios-post/"/>
    <id>http://blog.justwe.site/2017/05/02/vue-axios-post/</id>
    <published>2017-05-02T08:45:00.000Z</published>
    <updated>2017-05-02T14:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>继 <code>vue-resource</code> 之后, <code>axios</code> 是 vue 官方首推的网络请求组件<br><a id="more"></a></p>
<h2 id="axios简介"><a href="#axios简介" class="headerlink" title="axios简介"></a>axios简介</h2><p>它的功能更强大,而且可以无痛迁移到新的项目当中,有尤大的原话就是:</p>
<blockquote>
<p>最近团队讨论了一下，Ajax 本身跟 Vue 并没有什么需要特别整合的地方，使用 fetch polyfill 或是 axios、superagent 等等都可以起到同等的效果，vue-resource 提供的价值和其维护成本相比并不划算，所以决定在不久以后取消对 vue-resource 的官方推荐。已有的用户可以继续使用，但以后不再把 vue-resource 作为官方的 ajax 方案。<br>这里可以去掉 vue-resource，文档也不必翻译了。<br><a href="https://github.com/vuefe/vuefe.github.io/issues/186" target="_blank" rel="external">原文链接</a></p>
</blockquote>
<p>这里还有一份<a href="https://juejin.im/entry/587599388d6d810058a7a41a" target="_blank" rel="external">看两眼就是能用的手册</a></p>
<h2 id="关于-csrf-攻击"><a href="#关于-csrf-攻击" class="headerlink" title="关于 csrf 攻击"></a>关于 csrf 攻击</h2><p>这篇文章想说的不是怎么用 axios,而是之前碰到了一种情况,就是在 php 框架当中,碰到了 csrf 验证的问题<br>关于 csrf 攻击这里也不会讲,因为前辈们已经说的很详细了,比如这篇<a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html#undefined" target="_blank" rel="external">通俗易懂的文章</a></p>
<h2 id="axios-与-csrf-token"><a href="#axios-与-csrf-token" class="headerlink" title="axios 与 csrf-token"></a>axios 与 csrf-token</h2><p>我常用的两个框架中 laravel 是支持在 header 中设置 csrf-token 的,而 yii 中的默认设置只是在表单<br>提交的内容中检测 csrf-token 相关的字段,使用 axios 提交内容的时候默认并不会出现在 from-data<br>内容当中,比如这样提交的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> postUrl = <span class="string">'/route/to/action'</span>;</div><div class="line"><span class="keyword">let</span> postData = &#123;</div><div class="line">  <span class="attr">id</span> : <span class="number">1</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">"xiaoming"</span>,</div><div class="line">  <span class="attr">_csrf_token</span> : <span class="string">"&lt;?= Yii::$app-&gt;request-&gt;csrfToken ?&gt;"</span></div><div class="line">&#125;</div><div class="line">axios.post(postUrl,postData)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>但是这样的提交形式在 yii2.0 当中是接收不到提交的内容的,因为它的内容是存在了 <code>request payload</code>当中<br>所以使用<code>Yii::$app-&gt;request-&gt;post()</code>是获取不到内容的,想要得到提交的内容需要这样:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestPayload</span><span class="params">()</span></span>&#123;</div><div class="line">    $request_payload = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line">    <span class="keyword">return</span> json_decode($request_payload,<span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line">print_r(requestPayload());</div></pre></td></tr></table></figure></p>
<p>这样做的缺点就是获取请求都是自己去实现,而不是通过框架的 request 类去处理<br>这么做的前提还是关闭所提交 controller 的 csrf-token 验证,不安全啊同志们!</p>
<p>那么问题来了,用什么样的姿势提交能让框架去识别并自动提取出来 csrf-token 呢?</p>
<p>说了那么多废话终于到正题了,关键就是这个类了:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> postUrl = <span class="string">'/route/to/action'</span>;</div><div class="line"><span class="keyword">let</span> postData = <span class="keyword">new</span> FormData();</div><div class="line">postData.append(<span class="string">'action'</span>, <span class="string">'ADD'</span>);</div><div class="line">postData.append(<span class="string">'param'</span>, <span class="number">0</span>);</div><div class="line">postData.append(<span class="string">'_csrf_token'</span>, <span class="string">'&lt;?= Yii::$app-&gt;request-&gt;csrfToken ?&gt;'</span>);</div><div class="line"></div><div class="line">axios.post(postUrl,postData)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(res)</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(error)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>在这之前 bb 了那么多也是想让自己的印象更清晰一点,边说边捋思路,这是当初找到答案的地方<a href="https://github.com/mzabriskie/axios/issues/318#issuecomment-218948420" target="_blank" rel="external">github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继 &lt;code&gt;vue-resource&lt;/code&gt; 之后, &lt;code&gt;axios&lt;/code&gt; 是 vue 官方首推的网络请求组件&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://blog.justwe.site/categories/js/"/>
    
    
      <category term="axios" scheme="http://blog.justwe.site/tags/axios/"/>
    
      <category term="vue" scheme="http://blog.justwe.site/tags/vue/"/>
    
  </entry>
  
</feed>
