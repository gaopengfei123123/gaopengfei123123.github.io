<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Go 火焰图分析]]></title>
    <url>%2F2018%2F11%2F01%2Fgo-flame-graph%2F</url>
    <content type="text"><![CDATA[go version go1.11.1 darwin/amd64 安装:123$ go get github.com/uber/go-torch$ cd $GOPATH/src/github.com/uber/go-torch$ git clone https://github.com/brendangregg/FlameGraph.git 安装测试工具123$ go get github.com/Masterminds/glide$ cd $GOPATH/src/github.com/uber/go-torch$ glide install 性能分析工具 glide install如果出现 Update failed for golang.org/x/sys: Cannot detect VCS 这种报错, 可以执行1$ glide mirror set https://golang.org/x/sys https://github.com/golang/sys 改变 $HOME/.gilde/mirrors.yaml 的镜像链接即可 运行时完成后输入 web12345678910$ go tool pprof --seconds 25 http://localhost:9090/debug/pprof/profileFetching profile over HTTP from http://localhost:9090/debug/pprof/profile?seconds=25Please wait... (25s)Saved profile in /Users/gpf/pprof/pprof.samples.cpu.002.pb.gzType: cpuTime: Nov 2, 2018 at 11:46am (CST)Duration: 25s, Total samples = 2.17s ( 8.68%)Entering interactive mode (type "help" for commands, "o" for options)(pprof) webFailed to execute dot. Is Graphviz installed? Error: exec: "dot": executable file not found in $PATH 出现 Failed to execute dot. Is Graphviz installed? Error: exec: &quot;dot&quot;: executable file not found in $PATH 报错, 需要安装 graphviz 在 mac 上就直接 brew install graphviz 即可]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>flame-graph</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-Diff]]></title>
    <url>%2F2018%2F10%2F26%2Fgit-diff%2F</url>
    <content type="text"><![CDATA[git 对比文件差异 通常 git diff COMMIT_ID_1 COMMIT_DI_2 查看 只查看更改过的文件目录 git diff --name-only COMMIT_ID_1 COMMIT_DI_2 快捷用法就是: git diff --name-only HEAD HEAD^ 对比和上次提交时的改动]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次 Git Revert 的经历]]></title>
    <url>%2F2018%2F10%2F25%2Fgit-revert%2F</url>
    <content type="text"><![CDATA[合作开发经常会提merge request嘛, 然后就提了一个不该提的, 还手抖给合并了…. 返现问题以后准备回退, 然后抬眼一看各分支的合并情况…. 哇脑壳痛, 这就用不了平时最喜欢的 reset 了, 查了查资料, 想取消某一次 merge request用 revert 是最合适的 接下来分三步,先找到要回退的那次 mr, 通常是这样的: 12345678910111213141516171819202122git log commit 365ea982c24f2c60150df6159734ab73b74515bc (origin/master, origin/HEAD)Merge: 465fbfb8 f15b39aeAuthor: xxx &lt;xxx&gt;Date: Thu Oct 25 15:41:10 2018 +0800 Merge branch 'master' of xxxxxxxxxxxxxxxcommit 465fbfb8084089f9d08516b4d75ba51ae5dcd5ceAuthor: xxx &lt;xxx&gt;Date: Thu Oct 25 15:41:03 2018 +0800 mergecommit 1e309ff40fd02d1c9c6e604c2649d8a94086a573Author: xxx &lt;zhangkaixuan&gt;Date: Thu Oct 25 15:40:37 2018 +0800 merge... 这样的, 这只是 log 的中间的一部分, 假设 mr 之后后续又有很多 mr 已经合并了, 那么先找到我们要回退的 commit id, 这里就假设一个叫 c76627674dedf4fc067cb0c5b2afbc123fd9c053 执行 git revert -m 1 c76627674dedf4fc067cb0c5b2afbc123fd9c053 通常执行这一步之后没什么冲突就可以了, 然后有冲突了, 就和正常的 merger conflicts 处理一样 解决完冲突, 执行 git revert --continue 这就算合并了 那么回滚到一半不想做了, 也好说, 执行 git revert --abort 以后, 大家就当无事发生过 关于 git revert -m 1 这个1指的是 mainline, 1 代表着 master 这条线资料参考: Why does git revert complain about a missing -m option?]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转 Vscode 设置终端字体]]></title>
    <url>%2F2018%2F10%2F16%2Fvscode-terminal-font-macOS%2F</url>
    <content type="text"><![CDATA[mac 上设置vscode终端样式(尤其是想用 powershell 主题的) Mac下配置vscode终端字体：在Mac 10.13.6下的解决方案（亲测可用），其他版本做参考。 123下载安装字体$cd /Library/Fonts$sudo git clone https://github.com/abertsch/Menlo-for-Powerline.git config.json 位置123Windows %APPDATA%\Code\User\settings.jsonMac $HOME/Library/Application Support/Code/User/settings.jsonLinux $HOME/.config/Code/User/settings.json 在 vscode 配置中设置字体：123cd $HOME/Library/Application Support/Code/User/settings.json# 文件内指定字体主题"terminal.integrated.fontFamily": "Menlo for Powerline" 在Ubuntu 18.04.1LTS 下的解决方案（亲测可用），其他版本linux做参考。12345下载安装字体$cd /usr/share/fonts/truetype/$sudo git clone https://github.com/abertsch/Menlo-for-Powerline.git刷新字体$sudo fc-cache -f -v 回到 Vs Code的用户设置.json 中加入以下代码1"terminal.integrated.fontFamily": "Menlo for Powerline", 文章来源]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang 处理 Map[interface{}]interface{} 数据]]></title>
    <url>%2F2018%2F09%2F28%2Fgo-complex-interface%2F</url>
    <content type="text"><![CDATA[go 调用 rpc , 掉用其他的服务时会出现一些神奇的数据结构, 今天我们来实验一个 上代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package mainimport ( "encoding/json" "log")// 这里是针对出现 map[interface&#123;&#125;]interface&#123;&#125; 类型数据进行的一次转化处理示例type respBody map[interface&#123;&#125;]interface&#123;&#125;func main() &#123; // 模拟一个从 hprose-php-server 传过来的数据 res := map[interface&#123;&#125;]interface&#123;&#125;&#123; "errorCode": 200, "errorMsg": "登录成功", "responseData": map[interface&#123;&#125;]interface&#123;&#125;&#123; "hx_password": "c427ee88c8abeeee4fcddbfbf8767025", "like_post": 0, "avatar": "http://img2.xxx.com/user/3_100_100.png", "beauty_list": []int&#123;1, 2, 3&#125;, "role": []string&#123;"admin", "emplyee", "boss"&#125;, "mission_status": map[interface&#123;&#125;]interface&#123;&#125;&#123; "ok": 233, &#125;, &#125;, &#125; tmp := respHandler(res) log.Println("tmp:", tmp) by, err := json.Marshal(tmp) log.Println("output json:", string(by), err)&#125;func respHandler(res interface&#123;&#125;) (tmp map[string]interface&#123;&#125;) &#123; // map 需要初始化一个出来 tmp = make(map[string]interface&#123;&#125;) log.Println("input res is : ", res) switch res.(type) &#123; case nil: return tmp case map[string]interface&#123;&#125;: return res.(map[string]interface&#123;&#125;) case map[interface&#123;&#125;]interface&#123;&#125;: log.Println("map[interface&#123;&#125;]interface&#123;&#125; res:", res) for k, v := range res.(map[interface&#123;&#125;]interface&#123;&#125;) &#123; log.Println("loop:", k, v) switch k.(type) &#123; case string: switch v.(type) &#123; case map[interface&#123;&#125;]interface&#123;&#125;: log.Println("map[interface&#123;&#125;]interface&#123;&#125; v:", v) tmp[k.(string)] = respHandler(v) continue default: log.Printf("default v: %v %v \n", k, v) tmp[k.(string)] = v &#125; default: continue &#125; &#125; return tmp default: // 暂时没遇到更复杂的数据 log.Println("unknow data:", res) &#125; return tmp&#125;]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>json</tag>
        <tag>switch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go 开发时的一些初级问题]]></title>
    <url>%2F2018%2F09%2F25%2Fgo-primary-mistakes%2F</url>
    <content type="text"><![CDATA[平时碰到的一些小问题, 记一下 assignment to entry in nil map, map 赋值问题1234567891011121314151617181920212223242526272829303132333435363738394041424344// ServiceMap 可用服务列表type ServiceMap struct &#123; handlers map[string]BaseClient RWLock sync.RWMutex BaseService&#125;var ServiceMp *ServiceMapfunc init() &#123; // #1 ServiceMp = &amp;ServiceMap&#123;&#125; // #2.1 ServiceMp.handlers = make(map[string]BaseClient) ServiceMp.AddMethod("XyToken", BaseClient&#123; Module: "System", Class: "XyToken", Func: "getXyOpenKey", &#125;) log.Println("get method:", ServiceMp.handlers)&#125;// AddMethod 添加方法func (serv *ServiceMap) AddMethod(key string, body BaseClient) (err error) &#123; defer func() &#123; if err := recover(); err != nil &#123; log.Println("AddMethod error:", err) &#125; &#125;() if _, ok := serv.handlers[key]; !ok &#123; serv.RWLock.Lock() // #2.2 serv.handlers[key] = body serv.RWLock.Unlock() &#125; return nil&#125; #1 当文件里有一个全局的变量时, 需要先初始化 ServiceMp = &amp;ServiceMap{} 一个实体出来 #2 在 ServiceMap.handlers这个值添加方法的时候, 不能直接 serv.handlers[key] = body, 而是要先给它赋值一个空的切片,才能往里面加东西, 参考 #2.1 和 #2.2 interface conversion: interface {} is float64, not int通常json 转成 map[string]interface{} 时,数字类型就是float64的, 比如:想把它转成int类型使用就要auth.Sys = int(sys.(float64))这样(sys 就是一个 interface{} 类型的数字), 而不是auth.Sys = sys.(int), 后一种写法会有 painc 错误 xxx.(type) 只能用在 switch 当中, 不想这么写就用 reflect.Typeof(xxx)]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Golang 的测试文件]]></title>
    <url>%2F2018%2F09%2F20%2Fgo-test%2F</url>
    <content type="text"><![CDATA[一些函数没有连续的会话状态是可以写出来顺便就写一个测试脚本了比如: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// redis.gopackage toolsimport ( "github.com/gomodule/redigo/redis" "time" "user-server/config")var ( redisClient *redis.Pool REDIS_HOST string REDIS_DB int REDIS_AUTH string MAX_ACTIVE int MAX_IDLE int IDLE_TIMEOUT int64)func init() &#123; REDIS_HOST = config.Conf.Redis.Host REDIS_DB = 0 REDIS_AUTH = "abc" MAX_ACTIVE = 10 MAX_IDLE = 1 /** *@MaxIdle 最大空闲链接 *@MaxActive 最大活跃链接 *@IdleTimeout 自动超时时间 */ redisClient = &amp;redis.Pool&#123; MaxIdle: MAX_IDLE, MaxActive: MAX_ACTIVE, IdleTimeout: 30 * time.Second, Dial: func() (redis.Conn, error) &#123; c, err := redis.Dial("tcp", REDIS_HOST) if err != nil &#123; return nil, err &#125; if REDIS_AUTH != "" &#123; c.Do("AUTH", REDIS_AUTH) &#125; c.Do("SELECT", REDIS_DB) return c, nil &#125;, &#125;&#125;func GetRedis() redis.Conn &#123; return redisClient.Get()&#125; 对应的测试文件 在同目录创建一个 redis_test.go 123456789101112package toolsimport ( "testing")func TestGetRedis(t *testing.T) &#123; co := GetRedis() defer co.Close() co.Do("SET", "test_redis_key", "test_redis_value")&#125; 测试脚本的标准格式是: 文件名为 xxx_test.go 作为测试文件标记 引入 testing 包 要测试的函数名为 TestXXXX(t *testing.T) 输出结果通过 t.Logf() t.Error() 这类的测试包提供的函数来调用 写完代码, 在目录下运行:123456# 运行当前目录所有测试文件并输出结果go test -v# 运行指定测试文件, 需要把被测试文件也带上go test -v redis.go redis_test.go# 运行指定的测试方法go test -v --test.run TestGetRedis]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go Interface 的机制]]></title>
    <url>%2F2018%2F09%2F12%2Fgo-interface-tip%2F</url>
    <content type="text"><![CDATA[对 interface 赋值变量的时候经常出的问题 日常开发时有个这样的例子: 123456789101112131415161718192021222324package mainimport "fmt"type Human interface &#123; Run()&#125;type Boy struct &#123; Name string&#125;func (b *Boy) Run() &#123; fmt.Println("my name is " + b.Name)&#125;func main() &#123; xiaoming := Boy&#123;Name: "xiao ming"&#125; var h Human // h = xiaoming // #1 会报错, Boy does not implement Human (Run method has pointer receiver) h = &amp;xiaoming h.Run()&#125; 如果用 #1 这行代码时会出现以下错误:123# command-line-arguments./main.go:23:4: cannot use xiaoming (type Boy) as type Human in assignment: Boy does not implement Human (Run method has pointer receiver) 然而用下面的 h = &amp;xiaoming 是正常的 这个问题，首先得先了解一下Golang 中 方法的集合的概念，一个struct虽然可以通过值类型和引用类型两种方式定义方法，但是不通的对象类型对应了不同的方法集： 1234Values Methods Receivers----------------------------------------------- T (t T)*T (t T) and (t *T) 值类型的对象只有（t T) 结构的方法，虽然值类型的对象也可以调用(t *T) 方法，但这实际上是Golang编译器自动转化成了&amp;t的形式来调用方法，并不是表明值类型的对象拥有该方法。 换一个维度来看上面的表格可能更加直观： 12345Methods Receivers Values-----------------------------------------------(t T) T and *T(t *T) *T 这就意味着指针类型的receiver 方法实现接口时，只有指针类型的对象实现了该接口。 对应上面的例子来说，只有&amp;user实现了notifier接口，而user根本没有实现该接口。所以上面代码会报出这样的异常。]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[身为 Phper 为什么我选择 Go 语言?]]></title>
    <url>%2F2018%2F09%2F12%2Fgo-why%2F</url>
    <content type="text"><![CDATA[想换个语言开发的同学可以看这里 概况go 相比 php 有哪些优势? go 的部署简单, 运行时只要把一个二进制文件扔到机器上就行, 这一点在容器化方面优势很大 可控的多线程和更简单的多线程间通信 编译型语言对动态语言天生的性能优势, 变量在开发过程中不会突然从 str 变成 array 微服务相关的项目多 自 go 1.5 以后, 底层完全采用的 go 自己的代码重构 go 本身的优势 开发效率和运行的效率都在可接受范围 成熟的官方库和活跃的社区, 还有官方出品的工具链 语法简单(25个关键字), 对于初学者来说不用受配置环境的苦 良好兼容 c 语言 语言层面支持并发 运行时对外部的依赖极少 go 较于 php 的劣势 编译造成的繁琐操作 代码量偏多 至今没有一个成熟的依赖库管理工具, 缺乏版本管理 字典类型要考虑并发读写安全的问题, 需要有锁的概念, 这一点 swoole 也有类似的情况 go 的特色defer 延迟处理12345678910111213141516func OpenFile() bool&#123; file.Open("file/path") if condition1 &#123; file.Close() return false &#125; if condition2 &#123; file.Close() return false &#125; file.Close() return true&#125; 对比一下12345678910111213func OpenFile() bool&#123; file.Open("file/path") defer file.Close() if condition1 &#123; return false &#125; if condition2 &#123; return false &#125; return true&#125; 123456789101112...func main () &#123; for i :=0;i &lt; 5 ; i++&#123; defer fmt.Println("输出：",i) &#125;&#125;...// 输出： 4// 输出： 3// 输出： 2// 输出： 1// 输出： 0 多返回值1234567func multipartReturn(a int, b int) (res int, err error) &#123; res = a + b if res &gt; 3 &#123; return res, nil &#125; return 0, errors.New("math: square root of negative number")&#125; goroutinue 并发12345678910111213141516func main() &#123; go loop(true) loop(false)&#125;func loop(desc bool) &#123; if desc &#123; for i := 10; i &gt; 0; i-- &#123; fmt.Printf("loop1: %d \n", i) &#125; &#125; else &#123; for j := 0; j &lt; 10; j++ &#123; fmt.Printf("loop2: %d \n", j) &#125; &#125;&#125; channel 多线程通信12345678910111213141516171819202122232425func main() &#123; // 创建一个缓冲 ch := make(chan string, 3) go loopPro(true, ch) go loopPro(false, ch) for i := 0; i &lt; 20; i++ &#123; fmt.Print(&lt;-ch) &#125;&#125;// 加入 channel 的概念func loopPro(desc bool, ch chan&lt;- string) &#123; if desc &#123; for i := 10; i &gt; 0; i-- &#123; time.Sleep(time.Second) ch &lt;- fmt.Sprintf("loop1: %d \n", i) &#125; &#125; else &#123; for j := 0; j &lt; 10; j++ &#123; time.Sleep(time.Second) ch &lt;- fmt.Sprintf("loop2: %d \n", j) &#125; &#125;&#125; 跨平台http-server的 demo1234567891011121314151617181920212223242526package mainimport ( "fmt" "net/http")func main() &#123; fmt.Println("route: http://localhost:9090/") fmt.Println("route: http://localhost:9090/hello") mux := http.NewServeMux() mux.HandleFunc("/hello", helloHandler) mux.HandleFunc("/", pageHandler) http.ListenAndServe(":9090", mux)&#125;func helloHandler(w http.ResponseWriter, r *http.Request) &#123; w.Write([]byte("hello world"))&#125;func pageHandler(w http.ResponseWriter, r *http.Request) &#123; w.Write([]byte("hi baby"))&#125; 可根编译成指定平台的执行文件12CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.goCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go 调用 c 代码1234567891011121314151617package main/* 下面是 C 代码 */// int add(int a, int b) &#123;// return a + b;// &#125;import "C"import "fmt"func main() &#123; a := C.int(1) b := C.int(2) value := C.add(a, b) fmt.Printf("%v\n", value)&#125; 代码来源 大体了解一下语法安装官网安装包地址: https://golang.org/dl/以 centos 为例1234$ wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz$ tar -C /usr/local -zxvf go1.11.linux-amd64.tar.gz$ export PATH=$PATH:/usr/local/go/bin/$ go GOROOT 不用管它…GOPATH 目录结构123bin/ # 生成的执行文件 pkg/ # 编译时用到的外部库执行文件src/ # 我们开发的各种库和 go get 到的各种库源码 Hello world123456789package mainimport ( "fmt")func main() &#123; fmt.Println("hello world")&#125; 运行 go run main.go 资源类型常用: int/int8/int16/int32/int64 uint/uint8/uint16/uint32/uint64 float32/float64 string array slice(切片) map(字典) point(指针) 面向对象: struct interface 特色: chan 变量赋值123456789101112131415161718192021222324var a inta = 1// 或a := 1// 数组var arr [10]int// 切片var slice1 []int = make([]int, 3)var slice1 := make([]int, 3, 10) // 预留了10字节内存slice1 = []int&#123;1, 2, 3&#125;slice2 := slice1[2:] // [3]var any interface&#123;&#125; // 空接口接一切any = slice2 // [3]// 字典var mp map[string]stringmp["a"] = "诶"mp["b"] = "必"// 同上 mp := map[string]string&#123;"a": "aaa", "b": "bbb"&#125;// 这样写得清楚这是干什么的var mp map[string]interface&#123;&#125; 逻辑处理1234567891011121314151617for i := 0;i &lt; 5 ; i++ &#123; fmt.Println("输出：",i)&#125;if i &gt; 1 &#123; ....&#125;// 隐式执行 breakswitch os := runtime.GOOS; os &#123; case "darwin": fmt.Println("OS X.") case "linux": fmt.Println("Linux.") default: fmt.Printf("%s.", os)&#125; 面向对象struct12345678910111213141516171819202122232425262728293031package mainimport ( "fmt")type human struct &#123; Name string Age int&#125;// 隐式的继承 human 的属性type ming struct &#123; human Skill string&#125;// 添加结构体所属的方法func (h human) Say() &#123; fmt.Printf("我叫%s,今年%d", h.Name, h.Age)&#125;func main() &#123; var xm ming xm.Name = "小明" xm.Age = 18 xm.Skill = "跑得快" fmt.Println(xm) xm.Say()&#125; interface 当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。 – 鸭子类型 12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( "fmt")type Animal interface &#123; Speak() string&#125;type Dog struct &#123;&#125;func (d Dog) Speak() string &#123; return "Woof!"&#125;type Cat struct &#123;&#125;func (c Cat) Speak() string &#123; return "Meow!"&#125;type PHPProgrammer struct &#123;&#125;func (p PHPProgrammer) Speak() string &#123; return "PHP is the best language! "&#125;type PassBy struct &#123;&#125;func main() &#123; animals := []Animal&#123;Dog&#123;&#125;, Cat&#123;&#125;, PHPProgrammer&#123;&#125;&#125; // animals[3] = PassBy&#123;&#125; // 编译不会通过, 因为没有实现 Animal 接口 for _, animal := range animals &#123; fmt.Println(animal.Speak()) &#125;&#125; demo 代码地址]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Php开发过程中不常碰到的error (8.14更新)]]></title>
    <url>%2F2018%2F08%2F26%2Fphp-unsual-mistakes%2F</url>
    <content type="text"><![CDATA[这里做一些备注,以防再次碰到 url 当中的参数有 &amp;timestamp=1234567890这样的字段会被转义成xtamp=1234567890这个不仅存在于页面解析当中,当使用 curl 请求时拼接的参数有这种格式的也会发生转义解决方法有两个: 把 timestamp 这个参数放在 urlQuery 的最前面, ?timestamp=1234567890 这样避免出现 &amp;time发生转义的情况 将&amp;用&amp;amp;来代替 Automatically populating $HTTP_RAW_POST_DATA is deprecated and will be removed in a future version.出现这句话通常说明你在用的 php 版本是5.6.而且在php&lt;=5.6的时候,进行 application/json格式的 post 提交会把数据放在$HTTP_RAW_POST_DATA这个系统变量里面,在php&gt;=7的时候这个变量被移除了,统统归总到php://input这里解决方法: 根据系统提示的走: Although that indeed would be technically impossible (as $HTTP_RAW_POST_DATA is populated in the bootstrapping phase of the PHP process) allow one to override the setting by means of calling ini_set. 要确保自己的系统中没有使用 HTTP_RAW_POST_DATA这个变量,直接在php.ini里面禁掉它的设置,但是容易出现系统中又打开的情况(在框架中很常见) 改一下自己的提交方式, 使用 application/form-data或者application/x-www-form-urlencoded这种格式的提交, 然后在后端接收数据的时候再转成自己需要的格式(通常是数组) 参考资料 Exception ‘yii\db\Exception’ with message ‘SQLSTATE[HY000] [2002] No such file or directory’这种情况出现在平时运行的好好的, 但是突然换 cli 模式后这个配置就出问题了,原因在当 host=localhost时走的是 unix:socket 链接, 当host=127.0.0.1走的是 tcp 链接,这在php-fpm和php-cli中有点区别,尤其是本地没有安装 mysql 的时候解决方法有三种: 将本地链接配置统一成 127.0.0.1 查看 MySQL 中的user表, host=localhost和host=127.0.0.1是不是用的同一个账号密码 配置php.ini文件中的pdo_mysql.default_socket= 写上完整的 socket 路径以上三种方法都可以试一下参考资料 常驻内存时发生的事情这个是 phper 很少碰到但是很常见的情况, 比如用 swoole 启动了一个常驻进程的服务, 那么就一定要小心使用静态变量,在同步模式下会发生变量污染, 还有就是 redis,mysql 这类的链接,你会发现长时间静置以后就会出现一些摸不着头脑的问题, 这种情况不妨想一下是不是 server 端回收了这个 socket,因此在 client 端怎么都写入不进去. 还有就是 php 在读取消息的时候,出现消息过长的情况,那么就要考虑EOF终止符的问题了… 单次 http 每一次请求都是全新的代码, 不用自己考虑 gc 的问题, 但是在常驻内存的时候,这些就是一个个的大坑了 mysql has gone away产生这个错误的主要原因是 mysql server 端断开了链接, client 端还拿着这个句柄去请求,解决方式有两种: show global variables like &#39;%timeout&#39;; 查看 wait_timeout 的时长,适当的调长一点, 这种方法治标不治本,而且有隐患 12mysql&gt; set global wait_timeout=10;mysql&gt; show global variables like 'wait_timeout'; 使用 mysql 之前需要 mysql_ping() 一下, 如果出现断开的错误就启动重连机制 js 和 php 交互传中文参数的编解码问题之前碰到了问题是:在 php 端 urlencode 的值为:1orderid%3D21111111110001954%26pid%3D257742%26reason%3D%E4%B8%AA%E4%BA%BA%E6%96%B9%E9%9D%A2%E5%8E%9F%E5%9B%A0_%E4%BD%BF%E7%94%A8%E7%BA%A2%E5%8C%85%E9%87%8D%E6%96%B0%E4%B8%8B%E5%8D%95%26token%3D041d9e5575f480b7bfd58b09bd14ab1c7ee9e9594f2fcdb9f0e3e39fc634b48f 需要 urldecode 一次 而在 js 端的结果是:1orderid%3D21111111110002170%26pid%3D257742%26reason%3D%25E4%25B8%25AA%25E4%25BA%25BA%25E6%2596%25B9%25E9%259D%25A2%25E5%258E%259F%25E5%259B%25A0_%25E4%25B8%25AA%25E4%25BA%25BA%25E8%25BA%25AB%25E4%25BD%2593%25E5%258E%259F%25E5%259B%25A0%26token%3D041d9e5575f480b7bfd58b09bd14ab1c7ee9e9594f2fcdb9f0e3e39fc634b48f 需要 urldecode 两次 查阅资料后:12345678910111213在后端是PHP程序的情况下，保持前端Javascript和PHP之间传值的统一编码可以使用以下函数进行处理： WEB前端JavaScript 编码：escape(encodeURI(string)) 解码：unescape(decodeURI(string)) WEB后端Php 编码：urlencode(string) 解码：urldecode(urldecode(string)) 为什么要encodeURI(url)两次才不会出现乱码？ PHP中rawurlencode和urlencode、JS中encodeURI与encodeURIComponent 的区别rawurlencode遵守是94年国际标准备忘录RFC 1738 urlencode实现的是传统做法，和上者的主要区别是对空格的转义是’+’而不是’%20’javascript的encodeURL也是94年标准，而javascript的escape是另一种用”%xxx”标记unicode编码的方法。推荐在PHP中使用用rawurlencode。弃用urlencode 样例source:超级无敌的人sadha sajdh数据样本sdls fhejrthcxzb.file.jpeg PHP urlencode:%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha+sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls+fhejrthcxzb.file.jpeg PHP rawurlencode:%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha%20sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls%20fhejrthcxzb.file.jpeg Javascript encodeURI|encodeURIComponent:%E8%B6%85%E7%BA%A7%E6%97%A0%E6%95%8C%E7%9A%84%E4%BA%BAsadha%20sajdh%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%ACsdls%20fhejrthcxzb.file.jpeg Javascript escape:%u8D85%u7EA7%u65E0%u654C%u7684%u4EBAsadha%20sajdh%u6570%u636E%u6837%u672Csdls%20fhejrthcxzb.file.jpeg 帖子原文 在前端还有个问题就是, js 的 encodeURIComponent 和 encodeURI 都不会转换 _-.!~*&#39;()# 这些保留字符, 而在后端的rawurlencode 则是会转换的, 因此需要前端单独把这几个给拎出来, 如下:12"*".charCodeAt(0) // 42String.fromCharCode(42) // * 这里有张图说的很明白图片来源 关于出现 &lt;U+200B&gt; 这种 zero-width space 字符如果出现 mb_substr 这类操作的时候, 会出现字数判断错误的问题, 这个有时候很难排查, 因为在 win 上,使用命令行或者 linux 上用cat命令是看不到字符间是有 &lt;U+200B&gt; 的, 如下: 这玩意儿出现的场景就是: 在前端输入框中输入几个字, 然后复制粘贴. 这样尽管看起来之间没有空格, 但是其中还是插入了这个字符这玩意就叫 zero-width space 零宽空格, 处理的办法也很简单, 前端传值之前给过滤一下, 比如 https://stackoverflow.com/questions/7055600/u200b-zero-width-space-characters-in-my-js-code-where-did-they-come-from 或 https://codeday.me/bug/20171122/97765.html 后端 php 处理的话和这个不一样, 使用 utf-8 的处理方式, 可以参考这篇文章 特殊字符的删除办法与原理 替换这种编码123$value = str_replace("\xe2\x80\x8b", '', $value);$value = str_replace("\xe2\x80\x8c", '', $value);$value = str_replace("\xe2\x80\x8d", '', $value); 编码对照如下: mac 设置crontab -e ： “/usr/bin/vi” exited with status 1输入以下命令1234export EDITOR=vimsudo touch /etc/crontabcrontab -ecrontab -l 把默认编辑器从 vi 改成 vim 原文 出现: The “https://bower.herokuapp.com/packages/jquery&quot; file could not be downloaded (HTTP/1.1 502 Bad Gateway)yii2 更新的时候静态资源出现问题, 执行 composer global require &quot;fxp/composer-asset-plugin:~1.4.4&quot; 问题来源 出现: Jquery UI 1.11.4 and jquery 3.0 的版本兼容问题这个是在部署 adminLTE + rbac 时候遇上的, 打开 /admin/menu/create 会报 Jquery UI error - f.getClientRects is not a function 错误 解决方法:配置文件: config/web.php1234567891011121314151617... 'components' =&gt; [ ... //静态资源 'assetManager' =&gt; [ ... 'assetMap' =&gt; [ 'jquery.js' =&gt; 'https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js', // 'jquery.min.js' =&gt; 'https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js',// 'jquery.js' =&gt; '@web/js/jquery/jquery.js',// 'jquery.min.js' =&gt; '@web/js/jquery/jquery.js', ], ... ], ... ]... 把相应的 jquery 替换成 v2.2.4 解决问题来源]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>debug</tag>
      </tags>
  </entry>
</search>
